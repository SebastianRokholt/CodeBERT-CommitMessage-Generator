{"commit_tokens": ["Fix", "WTF", "when", "creating", "a", "lazily", "initialized", "connection"], "add_tokens": "case State . INITIALIZING : return \" INITIALIZING \" ;", "del_tokens": ""}
{"commit_tokens": ["changed", "the", "inner", "class", "to", "static"], "add_tokens": "private static class ClientProxyFuture {", "del_tokens": "private class ClientProxyFuture {"}
{"commit_tokens": ["Fixed", "a", "bug", "where", "the", "notification", "scroller", "could", "crash", "."], "add_tokens": "updateChildren ( ) ;", "del_tokens": "applyCurrentState ( ) ;"}
{"commit_tokens": ["Raise", "visibility", "of", "Netty", "Channel", "Builder", "Ctor"], "add_tokens": "protected NettyChannelBuilder ( String target ) {", "del_tokens": "private NettyChannelBuilder ( String target ) {"}
{"commit_tokens": ["Fix", "for", "truncated", "sentence", "in", "Find", "on", "Page", "field"], "add_tokens": "mMatches . setVisibility ( View . GONE ) ;", "del_tokens": "mMatches . setVisibility ( View . INVISIBLE ) ;"}
{"commit_tokens": ["remove", "blank", "line"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["IDEA", "-", "82242", "Scroll", "the", "tabs", "with", "mouse", "wheel"], "add_tokens": "doScrollSelectionInView ( myLastSingRowLayout ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "stupid", "copy", "/", "paste", "typo", "."], "add_tokens": "new PassFactory ( \" lintChecks \" , true ) {", "del_tokens": "new PassFactory ( \" checkAccessControls \" , true ) {"}
{"commit_tokens": ["Remove", "unused", "constant", "from", "TWLayoutManager"], "add_tokens": "", "del_tokens": "private static final int INVALID_OFFSET = Integer . MIN_VALUE ;"}
{"commit_tokens": ["remove", "unused", "enum", "value"], "add_tokens": "", "del_tokens": "NEW_CoreMemberSHIP_TARGET ,"}
{"commit_tokens": ["Added", "missing", "call", "to", "super", ".", "close", "(", ")", "."], "add_tokens": "super . close ( ) ;", "del_tokens": ""}
{"commit_tokens": ["make", "shared", "variable", "volatile"], "add_tokens": "private volatile long signal ;", "del_tokens": "private long signal ;"}
{"commit_tokens": ["Removed", "non", "-", "needed", "imports"], "add_tokens": "", "del_tokens": "import groovy . lang . Closure ; import groovy . lang . GroovyObject ;"}
{"commit_tokens": ["help", "topic", "(", "PY", "-", "4665", ")"], "add_tokens": "return \" reference . settingsdialog . codestyle . python \" ;", "del_tokens": "return null ;"}
{"commit_tokens": ["fixed", "PY", "-", "13561", "Hang", "on", "New", "Project", "action"], "add_tokens": "@ Override public String getVersionString ( ) { return \" \" ; }", "del_tokens": ""}
{"commit_tokens": ["Add", "keys", ".", "add", "(", "key", ")"], "add_tokens": "keys . add ( key ) ;", "del_tokens": ""}
{"commit_tokens": ["removed", "todo", "on", "vetoesHiding", "reviewed"], "add_tokens": "", "del_tokens": "/ / todo [ kirillk ] look here"}
{"commit_tokens": ["Add", "@", "Incubating", "to", "override", "of", "API", "withCancellationToken"], "add_tokens": "@ Incubating", "del_tokens": ""}
{"commit_tokens": ["make", "brokerhosts", "serializable"], "add_tokens": "public static interface BrokerHosts extends Serializable {", "del_tokens": "public static interface BrokerHosts {"}
{"commit_tokens": ["dispose", "component", "managers", "on", "EDT"], "add_tokens": "ApplicationManager . getApplication ( ) . assertIsDispatchThread ( ) ;", "del_tokens": ""}
{"commit_tokens": ["WFLY", "-", "6768", "ServletResourceManager", "does", "not", "implement", "isResourceChangeListenerSupported", "correctly"], "add_tokens": "return explodedDeployment & & deploymentResourceManager . isResourceChangeListenerSupported ( ) ;", "del_tokens": "return explodedDeployment ;"}
{"commit_tokens": ["Make", "a", "variable", "final"], "add_tokens": "private final ShowcaseView showcaseView ;", "del_tokens": "final ShowcaseView showcaseView ;"}
{"commit_tokens": ["Fix", "for", "issue", "27"], "add_tokens": "public String getName ( ) { return name ; }", "del_tokens": ""}
{"commit_tokens": ["make", "TypedColumn", "public"], "add_tokens": "public class TypedColumn", "del_tokens": "class TypedColumn"}
{"commit_tokens": ["Remove", "some", "declared", "exceptions", "that", "are", "never", "thrown"], "add_tokens": "DirectiveVisitor ( Compiler compiler ) {", "del_tokens": "DirectiveVisitor ( Compiler compiler ) throws JasperException {"}
{"commit_tokens": ["Fix", "DeletionRetentionStrategy", "#", "configurationClass", "(", ")"], "add_tokens": "return DeletionRetentionStrategyConfig . class ;", "del_tokens": "return DeletionRetentionStrategy . class ;"}
{"commit_tokens": ["Corrected", "description", "of", "CommandSender", ".", "getServer", "(", ")"], "add_tokens": "* Returns the server instance that this command is running on", "del_tokens": "* Returns the server instance that this player is running through"}
{"commit_tokens": ["corrected", "type"], "add_tokens": "List < GenericDomValue < String > > getChangeNotess ( ) ;", "del_tokens": "List < GenericDomValue < String > > getChangeNoteses ( ) ;"}
{"commit_tokens": ["remove", "space"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Made", "validation", "util", "also", "have", "private", "constructor", "to", "prevent", "initialization"], "add_tokens": "private ValidationUtil ( ) { }", "del_tokens": ""}
{"commit_tokens": ["DO", "NOT", "MERGE", "Tweak", "overscroll"], "add_tokens": "private static final int OVERSCROLL_DISTANCE = 0 ;", "del_tokens": "private static final int OVERSCROLL_DISTANCE = 2 ;"}
{"commit_tokens": ["LPS", "-", "44526", "New", "User", "does", "not", "have", "administration", "permissions", "in", "New", "Site", "when", "made", "Site", "Administrator", "/", "Site", "Owner"], "add_tokens": "clearCache ( userGroupRole ) ;", "del_tokens": ""}
{"commit_tokens": ["Changed", "CommandLineRunner", "to", "public", "as", "I", "believe", "that", "was", "the", "intention", "according", "to"], "add_tokens": "public class CommandLineRunner extends", "del_tokens": "class CommandLineRunner extends"}
{"commit_tokens": ["Bring", "back", "warnings"], "add_tokens": "return false ;", "del_tokens": "return true ;"}
{"commit_tokens": ["Remove", "unused", "import", "."], "add_tokens": "", "del_tokens": "import water . persist . Persist ;"}
{"commit_tokens": ["make", "round", "avatars", "a", "little", "bigger", "with", "a", "smaller", "border"], "add_tokens": "private int mBorderWidth = 4 ;", "del_tokens": "private int mBorderWidth = 6 ;"}
{"commit_tokens": ["Fix", "memory", "leak", "with", "TouchTargets", "not", "being", "recycled", "."], "add_tokens": "} else { next = null ; child = null ;", "del_tokens": ""}
{"commit_tokens": ["Should", "fix", "black", "laser", "beams", "."], "add_tokens": "public int getBrightnessForRender ( float par1 ) { return 210 ; }", "del_tokens": ""}
{"commit_tokens": ["Fix", "possible", "forever", "cache", "-", "miss", "after", "ScaleTextSize", "updated"], "add_tokens": "mCacheTimer . update ( mTimer . currMillisecond ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "tests"], "add_tokens": "@ Deprecated @ Deprecated", "del_tokens": ""}
{"commit_tokens": ["fixed", "django", "process", "termination", "(", "PY", "-", "2015", ")"], "add_tokens": "sendSigKill ( myProcessUid ) ;", "del_tokens": "sendSigInt ( myProcessUid ) ;"}
{"commit_tokens": ["Adjust", "homebrew", "go", "sdk", "path"], "add_tokens": "return GoEnvironmentUtil . getExecutableForSdk ( path ) . canExecute ( ) & & getVersionString ( path ) ! = null ;", "del_tokens": "return GoEnvironmentUtil . getExecutableForSdk ( path ) . canExecute ( ) ;"}
{"commit_tokens": ["Removed", "incorrect", "import"], "add_tokens": "", "del_tokens": "import org . jivesoftware . messenger . container . starter . JiveClassLoader ;"}
{"commit_tokens": ["avoid", "compiler", "warning"], "add_tokens": "", "del_tokens": "* @ return"}
{"commit_tokens": ["Updated", "TODO"], "add_tokens": "/ / TODO : Not sure about this class . Is it generally applicable enough to be public ?", "del_tokens": ""}
{"commit_tokens": ["extending", "async", "testunit", "timeout"], "add_tokens": "this . wait ( 30000 ) ;", "del_tokens": "this . wait ( 15000 ) ;"}
{"commit_tokens": ["update", "multipleEntity"], "add_tokens": "int getItemType ( ) ;", "del_tokens": "public int getItemType ( ) ;"}
{"commit_tokens": ["Add", "missing", "@", "Override"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["Use", "new", "AndroidUtils", ".", "executeOnPool", "."], "add_tokens": "AndroidUtils . executeOnPool ( shortCutTask ) ;", "del_tokens": "AndroidUtils . executeAsyncTask ( shortCutTask ) ;"}
{"commit_tokens": ["Fix", "broken", "update", "."], "add_tokens": "if ( ! myDisposed ) {", "del_tokens": "if ( myDisposed ) {"}
{"commit_tokens": ["Add", "missing", "Override", "decorator"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "35134", "Fix", "small", "issue", "detected"], "add_tokens": "_total = 0 ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "bug", "#", "12422326", "Unable", "to", "change", "text", "direction", "programmatically", "using", "setTextDirection", "Android", "SDK", "API"], "add_tokens": "if ( mLayout ! = null ) { checkForRelayout ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["Returned", "missing", "call", "to", "trackRelatedPostsIfShowing", "(", ")"], "add_tokens": "trackRelatedPostsIfShowing ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Added", "current", "book", "changing", "event"], "add_tokens": "fireBookEvent ( BookEvent . CurrentBookChanged , book ) ;", "del_tokens": ""}
{"commit_tokens": ["Don", "t", "send", "job", "requests", "if", "there", "is", "an", "error", "in", "setupContext"], "add_tokens": "return ;", "del_tokens": ""}
{"commit_tokens": ["fixed", "possible", "NPE"], "add_tokens": "if ( other ! = null ) { myId = other . myId ; }", "del_tokens": "myId = other . myId ;"}
{"commit_tokens": ["set", "component", "configurations", "correctly", "for", "trident", "spouts"], "add_tokens": "bd . addConfigurations ( m ) ;", "del_tokens": "scd . addConfigurations ( m ) ;"}
{"commit_tokens": ["Makes", "html", "attributes", "highlighter", "as", "markup", "in", "javadocs", "as", "well", "."], "add_tokens": "XmlTokenType . XML_NAME ,", "del_tokens": ""}
{"commit_tokens": ["added", "missing", "BenchmarkRunner", "config", "for", "svenson", "JSON", "databind"], "add_tokens": "SvensonJsonDatabind . register ( groups ) ;", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "57173", "Wake", "all", "thread", "waiting", "on", "the", "manager"], "add_tokens": "_serviceDependencies . notifyAll ( ) ;", "del_tokens": "_serviceDependencies . notify ( ) ;"}
{"commit_tokens": ["Add", "http", "timeout", "as", "well", "as", "socket", "timeout"], "add_tokens": "HttpConnectionParams . setConnectionTimeout ( httpParams , socketTimout ) ;", "del_tokens": ""}
{"commit_tokens": ["Properly", "stop", "server", "."], "add_tokens": "super . stop ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Reload", "more", "container", "when", "repopulating", "task", "edit", "fragment"], "add_tokens": "loadMoreContainer ( ) ;", "del_tokens": ""}
{"commit_tokens": ["LRQA", "-", "10616", "Add", "missing", "annotation"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["Remove", "an", "unnecessary", "empty", "line"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Updated", "version"], "add_tokens": "private static final String VERSION = \" 0 . 2 . 2 \" ;", "del_tokens": "private static final String VERSION = \" 0 . 2 . 1 \" ;"}
{"commit_tokens": ["OpenSSL", "does", "implement", "SSL_CK_RC2_128_CBC_EXPORT40_WITH_MD5"], "add_tokens": "", "del_tokens": "Cipher . SSL_CK_RC2_128_CBC_EXPORT40_WITH_MD5 ,"}
{"commit_tokens": ["try", "l", ".", "newRouteIsCalculated", "(", "updateRoute", "true", ")"], "add_tokens": "l . newRouteIsCalculated ( updateRoute , true ) ;", "del_tokens": "l . newRouteIsCalculated ( updateRoute , suppressTurnPrompt ) ;"}
{"commit_tokens": ["DO", "NOT", "MERGE", "-", "Small", "documentation", "fix", "for", "AudioManager", ".", "java"], "add_tokens": "* Gets a variable number of parameter values from audio hardware .", "del_tokens": "* Sets a varaible number of parameter values to audio hardware ."}
{"commit_tokens": ["Added", "throws", "XMPPException", "to", "#", "testBigFunctional"], "add_tokens": "public void testBigFunctional ( ) throws XMPPException {", "del_tokens": "public void testBigFunctional ( ) {"}
{"commit_tokens": ["do", "not", "request", "focus", "for", "About", "command"], "add_tokens": "@ Override protected boolean activateToolBeforeExecution ( ) { return false ; }", "del_tokens": ""}
{"commit_tokens": ["should", "fix", "the", "RedundantThrowTest"], "add_tokens": "public void testimplicitSuper ( ) throws Exception {", "del_tokens": "public void testImplicitSuper ( ) throws Exception {"}
{"commit_tokens": ["changed", "default", "param", "name"], "add_tokens": "void setReadOnly ( Boolean readOnly ) ;", "del_tokens": "void setReadOnly ( Boolean example ) ;"}
{"commit_tokens": ["Fix", "hotswap"], "add_tokens": "NodeTraversal . traverseEs6 ( compiler , scriptRoot , this ) ;", "del_tokens": "NodeTraversal . traverseEs6 ( compiler , originalRoot , this ) ;"}
{"commit_tokens": ["Don", "t", "create", "domain", "objects", "on", "demand", "just", "by", "property", "reference"], "add_tokens": "", "del_tokens": "onMissing . execute ( name ) ;"}
{"commit_tokens": ["do", "not", "hide", "non", "-", "dumb", "-", "aware", "actions", "just", "disable", "them"], "add_tokens": "", "del_tokens": "presentation . setVisible ( false ) ;"}
{"commit_tokens": ["setNewData", "(", ")", "add", "resetLastPosition"], "add_tokens": "mLastPosition = - 1 ;", "del_tokens": ""}
{"commit_tokens": ["Stop", "any", "playing", "media", "when", "closing", "InAppBrowser"], "add_tokens": "this . inAppWebView . loadUrl ( \" about : blank \" ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "log", "msg"], "add_tokens": "", "del_tokens": "System . out . println ( \" is asynch \" ) ;"}
{"commit_tokens": ["Remove", "warnings"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["add", "@", "Override", "annotation"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["Fix", "power", "provider"], "add_tokens": "powerProvider = provider ;", "del_tokens": "provider = powerProvider ;"}
{"commit_tokens": ["LPS", "-", "70007", "add", "query", "string", "to", "the", "redirect", "URL", "in", "cases", "when", "query", "string", "is", "not", "null"], "add_tokens": "if ( Validator . isNotNull ( queryString ) ) {", "del_tokens": "if ( layout . isTypeControlPanel ( ) ) {"}
{"commit_tokens": ["fix", "forever", "loop"], "add_tokens": "element = ifStatement ;", "del_tokens": ""}
{"commit_tokens": ["Avoid", "splitting", "overloaded", "methods"], "add_tokens": "public void inMemSeekTest ( ) throws IOException {", "del_tokens": "public void seekTest ( ) throws IOException {"}
{"commit_tokens": ["Removed", "unused", "imports", "."], "add_tokens": "", "del_tokens": "import java . util . HashMap ;"}
{"commit_tokens": ["Fix", "RegTestParams", "subsidy", "decrease", "block", "count", "(", "150", ")"], "add_tokens": "subsidyDecreaseBlockCount = 150 ;", "del_tokens": "subsidyDecreaseBlockCount = 10000 ;"}
{"commit_tokens": ["Added", "a", "shutdown", "method"], "add_tokens": "void shutdown ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "unnecessary", "call", "to", "recycle", "."], "add_tokens": "", "del_tokens": "recycle ( true ) ;"}
{"commit_tokens": ["Grant", "read", "permissions", "to", "attachments"], "add_tokens": "intent . addFlags ( Intent . FLAG_GRANT_READ_URI_PERMISSION ) ;", "del_tokens": ""}
{"commit_tokens": ["Added", "a", "comment", "."], "add_tokens": "/ * * * Create indices * /", "del_tokens": ""}
{"commit_tokens": ["remove", "circular", "reference", "in", "generics"], "add_tokens": "public class DBMaker < DBMakerT extends DBMaker > {", "del_tokens": "public class DBMaker < DBMakerT extends DBMaker < DBMakerT > > {"}
{"commit_tokens": ["Fix", "isUsbMassStorageConnected", "(", ")", "will", "always", "return", "true"], "add_tokens": "mUmsEnabling = enable ;", "del_tokens": "mUmsEnabling = true ;"}
{"commit_tokens": ["Removed", "print", "statement", "which", "was", "probably", "set", "during", "debugging"], "add_tokens": "", "del_tokens": "System . out . println ( e . getActionCommand ( ) ) ;"}
{"commit_tokens": ["remove", "test", "files", "after", "completion"], "add_tokens": "OS . rmdir ( sTmpDir ) ;", "del_tokens": "/ / OS . rmdir ( sTmpDir ) ;"}
{"commit_tokens": ["added", "TODO"], "add_tokens": "/ / TODO use widely", "del_tokens": ""}
{"commit_tokens": ["Implement", "jumpToCurrentState", "(", ")", "in", "VectorDrawable"], "add_tokens": "@ Override public void jumpToCurrentState ( ) { mVectorState . mBasicAnimator . end ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["Fix", "the", "missing", "return", "type", "for", "method", "references"], "add_tokens": "sb . append ( returnType ) ;", "del_tokens": ""}
{"commit_tokens": ["Renamed", "glassfish", "tree", "benchmark", "."], "add_tokens": "return \" json / javax - tree / glassfish \" ;", "del_tokens": "return \" javax - json / tree / glassfish \" ;"}
{"commit_tokens": ["Fixed", "missing", "output", "dir", "for", "asset", "bundle", "processing"], "add_tokens": "action . setOutputDir ( outputDir ) ;", "del_tokens": ""}
{"commit_tokens": ["Add", "case", "for", "Decimal128", "to", "JsonReader", "#", "skipValue"], "add_tokens": "case DECIMAL128 : readDecimal128 ( ) ; break ;", "del_tokens": ""}
{"commit_tokens": ["Add", "handler", "for", "download", "event"], "add_tokens": "case DOWNLOADED_START : onDownloadStart ( intent ) ; break ;", "del_tokens": ""}
{"commit_tokens": ["Duplicate", "statement", "in", "AsyncTwitterTest", ".", "java"], "add_tokens": "", "del_tokens": "user = null ;"}
{"commit_tokens": ["fixed", "findbugs"], "add_tokens": "", "del_tokens": "private String defaultHostHeader = \" ec2 . amazonaws . com \" ;"}
{"commit_tokens": ["Fix", "IntentFilter", "constructor", "to", "properly", "process", "the", "action", "parameter", "."], "add_tokens": "addAction ( action ) ;", "del_tokens": ""}
{"commit_tokens": ["Return", "the", "disambiguated", "Chinese", "relation", ".", ".", "."], "add_tokens": "return rel ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "some", "height", "issues", "with", "draggable", "task", "adapter"], "add_tokens": "return ( int ) ( metrics . density * 45 ) ;", "del_tokens": "return ( int ) ( metrics . density * 40 ) ;"}
{"commit_tokens": ["Making", "delombok", "compatible", "with", "post", "-", "resolution", "transformers", "meant", "delombok", "would", "fail", "with", "a", "duplicate", "context", "value", "error", "."], "add_tokens": "context . put ( Comments . class , ( Comments ) null ) ;", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "38423", "Remove", "unthrown", "exception"], "add_tokens": "public void deleteRepositories ( long groupId ) {", "del_tokens": "public void deleteRepositories ( long groupId ) throws PortalException {"}
{"commit_tokens": ["LPS", "-", "43332", "Do", "not", "strip", "HTML", "from", "description", "in", "getSummary", "method"], "add_tokens": "return _fileEntry . getDescription ( ) ;", "del_tokens": "return HtmlUtil . stripHtml ( _fileEntry . getDescription ( ) ) ;"}
{"commit_tokens": ["Add", "@", "Deprecated", "annotations", "to", "declarations", "with", "@", "deprecated", "javadoc", "tags"], "add_tokens": "@ Deprecated", "del_tokens": ""}
{"commit_tokens": ["Fixed", "store", "password", "checkbox", "(", "PY", "-", "5722", ")"], "add_tokens": "myStorePassword = storePassword ;", "del_tokens": "myStorePassword = true ;"}
{"commit_tokens": ["Remove", "TODO"], "add_tokens": "", "del_tokens": "} else if ( v = = mBatchArchiveButton ) { / / TODO"}
{"commit_tokens": ["Delete", "@", "Optional", "in", "data", ".", "media", ".", "Media", "class"], "add_tokens": "", "del_tokens": "@ Optional / / msgpack requires this"}
{"commit_tokens": ["update", "doc"], "add_tokens": "/ / init params from entity", "del_tokens": ""}
{"commit_tokens": ["Make", "another", "member", "final"], "add_tokens": "private final SimpleMatrix [ ] slices ;", "del_tokens": "private SimpleMatrix [ ] slices ;"}
{"commit_tokens": ["Fix", "crash", "when", "scrolling", "a", "layer"], "add_tokens": "break ;", "del_tokens": ""}
{"commit_tokens": ["annotate", "return", "values", "of", "IndexableSetContributor", ".", "getAdditionalRootsToIndex", "as", "@", "NotNull"], "add_tokens": "@ NotNull", "del_tokens": ""}
{"commit_tokens": ["Make", "the", "save", "password", "selected", "by", "default", "."], "add_tokens": "private boolean rememberPassword = true ;", "del_tokens": "private boolean rememberPassword ;"}
{"commit_tokens": ["Make", "eventual", "assertion", "in", "PartitionServiceSafetyCheckTest"], "add_tokens": "assertSafeEventually ( instances ) ;", "del_tokens": "assertSafe ( instances ) ;"}
{"commit_tokens": ["Added", "todo", "."], "add_tokens": "/ / todo add tags", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "45564", "Add", "missing", "@", "Override"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["Add", "destroyed", "check"], "add_tokens": "if ( mNativeClass = = 0 ) { return false ; }", "del_tokens": ""}
{"commit_tokens": ["fix", "builders", "databases", "loading", "empty"], "add_tokens": "/ / Refresh the databases once all the library type handlers are registered serverDB . refresh ( ) ; clientDB . refresh ( ) ;", "del_tokens": ""}
{"commit_tokens": ["highlighted", "cells", "not", "refreshing", "fix"], "add_tokens": "refreshDrawableState ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Hide", "enum", "constructor", "further", "."], "add_tokens": "private LoadedFrom ( int debugColor ) {", "del_tokens": "LoadedFrom ( int debugColor ) {"}
{"commit_tokens": ["Removed", "spurious", "break", "."], "add_tokens": "", "del_tokens": "break ;"}
{"commit_tokens": ["Suppress", "bogus", "warning", "in", "ShardSorter"], "add_tokens": "@ SuppressWarnings ( \" SubtractionInCompareTo \" )", "del_tokens": ""}
{"commit_tokens": ["IDEA", "-", "83589", "Splitter", "panel", "has", "tabs", "but", "no", "content"], "add_tokens": "updateResults ( false ) ;", "del_tokens": ""}
{"commit_tokens": ["Don", "t", "null", "onTouchListener", "now", "this", "class", "no", "longer", "implements", "it", "."], "add_tokens": "", "del_tokens": "setOnTouchListener ( null ) ;"}
{"commit_tokens": ["Ensure", "progress", "bar", "is", "not", "displayed", "when", "page", "icon", "displays"], "add_tokens": "showProgressBar ( false ) ;", "del_tokens": ""}
{"commit_tokens": ["removed", "import", "from", "sample", "project"], "add_tokens": "", "del_tokens": "import com . slidinglayersample . R ;"}
{"commit_tokens": ["Align", "Async", "ActionCodes"], "add_tokens": "clearDispatches ( ) ;", "del_tokens": ""}
{"commit_tokens": ["added", "license", "header"], "add_tokens": "/ * * Copyright ( c ) 2007 Mockito contributors * This program is made available under the terms of the MIT License . * /", "del_tokens": ""}
{"commit_tokens": ["prevent", "read", "/", "write", "after", "close"], "add_tokens": "myMap = null ;", "del_tokens": ""}
{"commit_tokens": ["Prevent", "Lockscreen", "album", "art", "from", "activating", "FLAG_KEEP_SCREEN_ON"], "add_tokens": "mWindowLayoutParams . format = show ? PixelFormat . TRANSLUCENT : PixelFormat . OPAQUE ;", "del_tokens": ""}
{"commit_tokens": ["missed", "one"], "add_tokens": "poolEntry . setNetworkTimeout ( networkTimeout ) ;", "del_tokens": ""}
{"commit_tokens": ["fix", "erroneous", "conversion", "to", "radians"], "add_tokens": "q . fromAngleAxis ( 180 , axis ) ;", "del_tokens": "q . fromAngleAxis ( MathUtil . degreesToRadians ( 180 ) , axis ) ;"}
{"commit_tokens": ["remove", "unused", "import"], "add_tokens": "", "del_tokens": "import com . android . internal . os . RuntimeInit ;"}
{"commit_tokens": ["Add", "GC", "thread", "to", "RSGL", "."], "add_tokens": "mGCThread = new GCThread ( this ) ; mGCThread . start ( ) ;", "del_tokens": ""}
{"commit_tokens": ["refs", "#", "304", "fixed", "crash", "if", "background", "and", "second", "scale", "is", "used", "together"], "add_tokens": "return mLabelVerticalSecondScaleWidth = = null ? 0 : mLabelVerticalSecondScaleWidth ;", "del_tokens": "return mLabelVerticalSecondScaleWidth ;"}
{"commit_tokens": ["Make", "bilingual", "text", "visible", "for", "city"], "add_tokens": "return getShortText ( obj ) ;", "del_tokens": "return obj . getName ( region . getLang ( ) ) ;"}
{"commit_tokens": ["Fix", "bug", "in", "setLength"], "add_tokens": "setComplete ( mLength ) ;", "del_tokens": "setComplete ( length ) ;"}
{"commit_tokens": ["added", "Nullable", "annotation"], "add_tokens": "@ Nullable", "del_tokens": ""}
{"commit_tokens": ["Put", "TemplateServlet", "in", "the", "right", "package"], "add_tokens": "package groovy . servlet ;", "del_tokens": ""}
{"commit_tokens": ["corrected", "documentation"], "add_tokens": "* /", "del_tokens": "* @ param panel1 * /"}
{"commit_tokens": ["Enable", "parsing", "result", "check"], "add_tokens": "super . doTest ( true ) ;", "del_tokens": "super . doTest ( false ) ;"}
{"commit_tokens": ["Fix", "infinite", "loop", "in", "r1095367"], "add_tokens": "entry = jarInputStream . getNextJarEntry ( ) ;", "del_tokens": ""}
{"commit_tokens": ["skip", "smooth", "setting", "if", "the", "platform", "doesn", "t", "have", "at", "least", "a", "MAX_SAMPLES"], "add_tokens": "if ( smoothDisabled | | PGL . MAX_SAMPLES = = - 1 ) return ;", "del_tokens": "if ( smoothDisabled ) return ;"}
{"commit_tokens": ["Avoid", "crash", "if", "layer", "is", "destroyed", "after", "GLRenderer"], "add_tokens": "if ( mGlCanvas ! = null ) { mGlCanvas . cancelLayerUpdate ( layer ) ; }", "del_tokens": "mGlCanvas . cancelLayerUpdate ( layer ) ;"}
{"commit_tokens": ["Add", "INVALID_SUPPRESS", "to", "lint", "checks", "so", "it", "will", "be", "reported", "at", "the", "correct", "level", "."], "add_tokens": "CheckJSDocStyle . INVALID_SUPPRESS ,", "del_tokens": ""}
{"commit_tokens": ["Closes", "the", "StringLogger", "in", "shutdown", "(", ")", "for", "HA", "graph", "db"], "add_tokens": "messageLog . close ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "test", "compilation"], "add_tokens": "", "del_tokens": "cassandra . stop ( ) ;"}
{"commit_tokens": ["Removed", "extra", "empty", "lines", "to", "fix", "the", "build", "failure"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["remove", "change", "from", "another", "PR", "to", "avoid", "confusion"], "add_tokens": "protected boolean isLeaderMode ( ) { return mIsLeader ; }", "del_tokens": ""}
{"commit_tokens": ["Add", "call", "to", "destroy", "finished", "message", "loader", "-", "fixes", "#", "1227"], "add_tokens": "getLoaderManager ( ) . destroyLoader ( LOCAL_MESSAGE_LOADER_ID ) ;", "del_tokens": ""}
{"commit_tokens": ["suppress", "contract", "validation", "for", "wrong", "Logger", ".", "assertTrue"], "add_tokens": "/ / noinspection ConstantConditions", "del_tokens": ""}
{"commit_tokens": ["Suppressed", "deprecation", "warning", "in", "the", "group", "test"], "add_tokens": "@ SuppressWarnings ( \" deprecation \" )", "del_tokens": ""}
{"commit_tokens": ["help", "topic", "(", "PY", "-", "1911", ")"], "add_tokens": "return \" project . propVCSSupport . VCSs . Mercurial \" ;", "del_tokens": "return null ;"}
{"commit_tokens": ["Added", "private", "constructor", "to", "ThreadSafeLazyLoadedIvoryTower", "."], "add_tokens": "private ThreadSafeLazyLoadedIvoryTower ( ) { }", "del_tokens": ""}
{"commit_tokens": ["Fix", "a", "typo", "on", "TvContract", "."], "add_tokens": "public static final String PARAM_BROWSABLE_ONLY = \" browsable_only \" ;", "del_tokens": "public static final String PARAM_BROWSABLE_ONLY = \" browable_only \" ;"}
{"commit_tokens": ["Remove", "unused", "import", "alluxio", ".", "util", ".", "OSUtils", "to", "pass", "checkstyle"], "add_tokens": "import alluxio . util . OSUtils ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "build", "."], "add_tokens": "IRemoteCallback callback0 , IRemoteCallback callback1 , boolean scaleUp ) {", "del_tokens": "IRemoteCallback callback , boolean scaleUp ) {"}
{"commit_tokens": ["improve", "reliability", "of", "MyAccountPageTest"], "add_tokens": "orchestrator . resetData ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Added", "RGBA4444"], "add_tokens": "RGBA4444 ,", "del_tokens": "UNUSED13 ,"}
{"commit_tokens": ["Fix", "null", "pointer", "check", "in", "sendExtraCommand", "(", ")", "."], "add_tokens": "if ( proxy = = null ) {", "del_tokens": "if ( provider = = null ) {"}
{"commit_tokens": ["Fix", "bug", "in", "JedisCluster", "del", "command", "."], "add_tokens": "} . run ( key ) ;", "del_tokens": "} . run ( null ) ;"}
{"commit_tokens": ["add", "new", "forced", "upgrade", "API", "deprecate", "setForcedUpgradeVersion", "(", ")"], "add_tokens": "setForcedUpgrade ( version ) ;", "del_tokens": "mForcedUpgradeVersion = version ;"}
{"commit_tokens": ["Add", "missing", "@", "Override", "in", "SpongeGame"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["decrease", "the", "repetition", "rate", "of", "the", "off", "-", "the", "-", "rote", "prompt"], "add_tokens": "waitAnnouncedOffRoute + = 30000 ;", "del_tokens": "waitAnnouncedOffRoute + = 10000 ;"}
{"commit_tokens": ["Use", "execute", "(", ")", "instead", "of", "executeQuery", "(", ")", "for", "initSql", "."], "add_tokens": "statement . execute ( initSql ) ;", "del_tokens": "statement . executeQuery ( initSql ) ;"}
{"commit_tokens": ["Add", "missing", "super", "in", "test"], "add_tokens": "super . httpMethods ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "error", "in", "javadoc", "sample"], "add_tokens": "", "del_tokens": "* }"}
{"commit_tokens": ["fixed", "by", "applying", "fix", "from", "pull", "request", "120", "manually"], "add_tokens": "return \" \\ ' \" + path + \" \\ ' \" ;", "del_tokens": "return path ;"}
{"commit_tokens": ["Fix", "debug", "log", "for", "SpellCheckerSessionListenerImpl", "#", "TASK_CANCEL"], "add_tokens": "return \" TASK_CANCEL \" ;", "del_tokens": "return \" STATE_WAIT_CONNECTION \" ;"}
{"commit_tokens": ["Turn", "off", "ignore", "libraries", "option", "by", "default"], "add_tokens": "myIgnoreLibraries = false ;", "del_tokens": "myIgnoreLibraries = true ;"}
{"commit_tokens": ["Fixed", "a", "bug", "where", "the", "chronometer", "wasn", "t", "updating", "the", "time"], "add_tokens": "updateText ( SystemClock . elapsedRealtime ( ) ) ;", "del_tokens": ""}
{"commit_tokens": ["removed", "line"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["get", "request", "source"], "add_tokens": "public String distributedRequestSource = null ;", "del_tokens": ""}
{"commit_tokens": ["Making", "Undertow", "class", "final"], "add_tokens": "public final class Undertow {", "del_tokens": "public class Undertow {"}
{"commit_tokens": ["Fixing", "the", "delete", "mount", "point", "journaling", "."], "add_tokens": "return JournalEntryType . DELETE_MOUNTPOINT ;", "del_tokens": "return JournalEntryType . ADD_MOUNTPOINT ;"}
{"commit_tokens": ["Fix", "error", "in", "previous", "patch"], "add_tokens": "public Boolean getValid ( ) {", "del_tokens": "public boolean getValid ( ) {"}
{"commit_tokens": ["Simplify", "code", "to", "remove", "warning", "."], "add_tokens": "literal = value ;", "del_tokens": "literal = value . toString ( ) ;"}
{"commit_tokens": ["disable", "caching", "explicitly", "to", "get", "rid", "of", "useless", "log", "entry"], "add_tokens": "setCachingEnabled ( false ) ;", "del_tokens": ""}
{"commit_tokens": ["removed", "unused", "import"], "add_tokens": "", "del_tokens": "import java . io . EOFException ;"}
{"commit_tokens": ["Expose", "content", "uri"], "add_tokens": "abstract public Uri getContentUri ( ) ;", "del_tokens": "abstract protected Uri getContentUri ( ) ;"}
{"commit_tokens": ["Make", "mSessionCallback", "null", "in", "TvView", ".", "unbindTvInput"], "add_tokens": "mSessionCallback = null ;", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "27739", "Site", "admins", "without", "Control", "Panel", "access", "cannot", "manage", "page", "or", "site", "pages"], "add_tokens": "if ( portletId . equals ( PortletKeys . LAYOUTS_ADMIN ) ) { return true ; }", "del_tokens": ""}
{"commit_tokens": ["Added", "connecting", "status"], "add_tokens": "status . setMessage ( Language . text ( \" contrib . status . downloading_list \" ) ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "Javadoc", "nag"], "add_tokens": "* @ param name The new channel name", "del_tokens": "* @ param name"}
{"commit_tokens": ["Reorder", "TypeInfo", ".", "Type", "enum", "so", "ordinals", "back", "to", "orginal", "value"], "add_tokens": "VARIABLE_BINARY ( - 1 ) , DOUBLE ( SIZE_OF_DOUBLE ) ;", "del_tokens": "DOUBLE ( SIZE_OF_DOUBLE ) , VARIABLE_BINARY ( - 1 ) ;"}
{"commit_tokens": ["Reveal", "getPositionForView", "(", "View", ")"], "add_tokens": "public int getPositionForView ( View view ) { return mList . getPositionForView ( view ) ; }", "del_tokens": ""}
{"commit_tokens": ["accessing", "wrong", "var"], "add_tokens": "this . totalStatus = 0 ;", "del_tokens": "int totalStatus = 0 ;"}
{"commit_tokens": ["Fix", "regression", "in", "refactoring", "in", "r1706035"], "add_tokens": "action ( ActionCode . COMMIT , null ) ;", "del_tokens": ""}
{"commit_tokens": ["dispose", "FileTreeNode"], "add_tokens": "Disposer . dispose ( child ) ;", "del_tokens": ""}
{"commit_tokens": ["EntityBlock", "doesn", "t", "block", "left", "click", "."], "add_tokens": "", "del_tokens": "@ Override public boolean canBeCollidedWith ( ) { return ! isDead ; }"}
{"commit_tokens": ["Allow", "content", "packs", "to", "avoid", "grok", "patterns", "field"], "add_tokens": "", "del_tokens": "@ NotNull"}
{"commit_tokens": ["Make", "Wrench", "full", "3D"], "add_tokens": "setFull3D ( ) ;", "del_tokens": ""}
{"commit_tokens": ["don", "t", "show", "empty", "Python", "code", "style", "settings", "page", ";", "fix", "Python", "preview", "text"], "add_tokens": "@ Override public boolean hasSettingsPage ( ) { return false ; }", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "62799", "Fix", "NullPointer", "in", "test"], "add_tokens": "public String getPortletName ( ) { return StringPool . BLANK ; } @ Override", "del_tokens": ""}
{"commit_tokens": ["enable", "new", "building", "model"], "add_tokens": "return myPlatformToolsRevision ;", "del_tokens": "/ / return myPlatformToolsRevision ; return 7 ;"}
{"commit_tokens": ["remove", "silly", "throws", "decl"], "add_tokens": "public static void main ( String [ ] args )", "del_tokens": "public static void main ( String [ ] args ) throws Throwable"}
{"commit_tokens": ["Reverted", "commit", "76c8630367c027873cd1e2d28b6a27eb9f082b5d"], "add_tokens": "", "del_tokens": "notifyAll ( ) ;"}
{"commit_tokens": ["made", "ghserver", "extendable"], "add_tokens": "protected Module createModule ( )", "del_tokens": "private Module createModule ( )"}
{"commit_tokens": ["Dependency", "parser", "should", "provide", "dependencies"], "add_tokens": "return Collections . singleton ( DEPENDENCY_REQUIREMENT ) ;", "del_tokens": "return new HashSet < > ( ) ;"}
{"commit_tokens": ["Field", "made", "final"], "add_tokens": "private final BindingTrace trace ;", "del_tokens": "private BindingTrace trace ;"}
{"commit_tokens": ["remove", "irrelevant", "suppression"], "add_tokens": "", "del_tokens": "/ / noinspection StringToUpperCaseOrToLowerCaseWithoutLocale"}
{"commit_tokens": ["adding", "scope", "to", "group", "does", "not", "update", "containing", "inspections", "in", "tree", "view"], "add_tokens": "myTreeTable . updateUI ( ) ;", "del_tokens": ""}
{"commit_tokens": ["added", "print", "stack", "trace"], "add_tokens": "ex . printStackTrace ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Trivial", "Javadoc", "commit", "to", "trigger", "a", "CI", "build"], "add_tokens": "* Set threshold number . * * @ param threshold The new compression threshold", "del_tokens": "* Set threshold number"}
{"commit_tokens": ["convert", "bytes", "to", "hex", "for", "BytesType", ".", "getString", "(", ")"], "add_tokens": "return FBUtilities . bytesToHex ( bytes ) ;", "del_tokens": "return Arrays . toString ( bytes ) ;"}
{"commit_tokens": ["Remove", "unnecessary", "code"], "add_tokens": "", "del_tokens": "setReadTimeout ( soTimeout ) ; setWriteTimeout ( soTimeout ) ;"}
{"commit_tokens": ["Fix", "back", "popping", "the", "back", "stack", "too", "much", "."], "add_tokens": "return popBackStack ( null , 0 ) ;", "del_tokens": "return popBackStack ( null , - 1 ) ;"}
{"commit_tokens": ["Fix", "AudioTrack", ".", "setPlaybackRate", "(", ")", "error", "handling"], "add_tokens": "if ( mState ! = STATE_INITIALIZED ) {", "del_tokens": "if ( mState = = STATE_UNINITIALIZED ) {"}
{"commit_tokens": ["Fix", "NPE", "in", "AbsListView", "hotspot", "management"], "add_tokens": "mSelector . setHotspot ( x , y ) ;", "del_tokens": "d . setHotspot ( x , y ) ;"}
{"commit_tokens": ["Erase", "icon", "for", "application", "list", "view", "items"], "add_tokens": "} else { holder . imgIcon . setImageDrawable ( null ) ; holder . imgIcon . destroyDrawingCache ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Added", "FIXME", "item"], "add_tokens": "/ / FIXME look up contact via Persistent Presence OS . It might already / / exist .", "del_tokens": ""}
{"commit_tokens": ["Fix", "a", "ViewPager", "bug", "repopulating", "after", "a", "data", "set", "change", "that", "removed"], "add_tokens": "setCurrentItemInternal ( newCurrItem , false , true ) ;", "del_tokens": "populate ( newCurrItem ) ;"}
{"commit_tokens": ["Add", "specification", "name", "to", "version", "number"], "add_tokens": "* @ since EL 3 . 0", "del_tokens": "* @ since 3 . 0"}
{"commit_tokens": ["Fixed", "GsdEnterAlwaysCollapsedParallaxFragment", "examples"], "add_tokens": "return R . layout . fragment_gsd_enter_always_collapsed_parallax ;", "del_tokens": "return R . layout . fragment_gsd_enter_always_collapsed ;"}
{"commit_tokens": ["Added", "missing", "switch", "case"], "add_tokens": "case DAY_START :", "del_tokens": ""}
{"commit_tokens": ["fix", "missing", "imports", "for", "anonymous", "classes"], "add_tokens": "return parentGen = = null ? this : parentGen ;", "del_tokens": "return parentGen ;"}
{"commit_tokens": ["Remove", "unneeded", ";"], "add_tokens": "INFO", "del_tokens": "INFO ;"}
{"commit_tokens": ["Reset", "scroll", "position", "when", "clear", "state"], "add_tokens": "scrollTo ( 0 , 0 ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "catalina", "import", "from", "spec", "classes"], "add_tokens": "", "del_tokens": "import org . apache . catalina . core . AsyncContextImpl . AsyncState ;"}
{"commit_tokens": ["Fix", "default", "value", "of", "AnimationDrawable", "s", "one", "shot", "property"], "add_tokens": "mOneShot = false ;", "del_tokens": "mOneShot = true ;"}
{"commit_tokens": ["Fix", "a", "description", "of", "a", "ViewPagerAction", "for", "tests", "."], "add_tokens": "return \" ViewPager move to a specific page \" ;", "del_tokens": "return \" ViewPager move one page to the right \" ;"}
{"commit_tokens": ["Fix", "typo", "in", "method", "isRotate", "*", "d", "*", "Supported", ";", "don", "t", "attempt", "to", "rotate", "images", "of", "unknown", "format"], "add_tokens": "public boolean isRotateSupported ( ) {", "del_tokens": "public boolean isRotatedSupported ( ) {"}
{"commit_tokens": ["Fix", "BufferedTokenStream", ".", "reset", "(", ")", "putting", "the", "stream", "in", "an", "invalid", "state", "when", "called", "before", "lazyInit"], "add_tokens": "seek ( 0 ) ;", "del_tokens": "p = 0 ;"}
{"commit_tokens": ["Fix", "build"], "add_tokens": "/ / Do nothing .", "del_tokens": "sPathMeasureManager . removeJavaReferenceFor ( nPathMeasure ) ;"}
{"commit_tokens": ["Remove", "unused", "variable", "."], "add_tokens": "", "del_tokens": "private static Random sRandom ;"}
{"commit_tokens": ["LPS", "-", "45010", "Fix", "typo"], "add_tokens": "companyPortletPreferences , \" adminEmailPasswordSentBody \" ,", "del_tokens": "companyPortletPreferences , \" adminEmailPasswordResetBody \" ,"}
{"commit_tokens": ["add", "close", "method", "to", "EchoedRow"], "add_tokens": "public void close ( ) { }", "del_tokens": ""}
{"commit_tokens": ["Fixed", "missing", "error", "data", "in", "NN", "JSON"], "add_tokens": "static final int API_WEAVER = 1 ; static public DocGen . FieldDoc [ ] DOC_FIELDS ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "bu", "ending", "FolderList", "activity", "after", "auto", "-", "opening", "the", "default", "folder"], "add_tokens": "finish ( ) ;", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "47071", "Missed", "one"], "add_tokens": "", "del_tokens": "@ Transactional"}
{"commit_tokens": ["i", "will", "get", "it", "right"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Fix", "a", "bug", "disappearing", "installerPackageName", "info", "of", "packages", "after", "reboot", "."], "add_tokens": "installerPackageName = base . installerPackageName ;", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "65497", "Fix", "updateModifiedDate"], "add_tokens": "user . setModifiedDate ( modifiedDate ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "screen", "magnifier", "scaling", "due", "to", "ScaleGestureDetector", "changes", "."], "add_tokens": "mScaleGestureDetector . setQuickScaleEnabled ( false ) ;", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "36115", "Fix", "incorrect", "logic", "?"], "add_tokens": "if ( backgroundTask = = null ) {", "del_tokens": "if ( backgroundTask ! = null ) {"}
{"commit_tokens": ["fix", "add", "break", "for", "1", ".", "4"], "add_tokens": "theSource . getConfig ( ) ) ; break ;", "del_tokens": ""}
{"commit_tokens": ["Restoring", "most", "recent", "items", "first"], "add_tokens": "Collections . reverse ( messages ) ;", "del_tokens": ""}
{"commit_tokens": ["Prevent", "reflective", "instantiation", "by", "masochists", "."], "add_tokens": "throw new AssertionError ( \" No instances . \" ) ;", "del_tokens": ""}
{"commit_tokens": ["remember", "size", "of", "file", "chooser", "dialogs", "(", "IDEADEV", "-", "42144", ")"], "add_tokens": "@ Override protected String getDimensionServiceKey ( ) { return \" FileChooserDialogImpl \" ; }", "del_tokens": ""}
{"commit_tokens": ["set", "version"], "add_tokens": "return \" 4 . 5 . 1 \" ;", "del_tokens": "return \" 4 . 5 \" ;"}
{"commit_tokens": ["Removed", "unused", "method", "."], "add_tokens": "", "del_tokens": "public void mapActivityCreate ( MapActivity activity ) { } @ Override"}
{"commit_tokens": ["CLJ", "-", "1338", "-", "make", "Murmur3", "public"], "add_tokens": "public final class Murmur3 {", "del_tokens": "final class Murmur3 {"}
{"commit_tokens": ["LPS", "-", "27783", "add", "method", "to", "WorkflowedModel"], "add_tokens": "public boolean isInTrash ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "mutliple", "test", "binding", "for", "KillbillNodesApi"], "add_tokens": "protected void configureKillbillNodesApi ( ) { }", "del_tokens": ""}
{"commit_tokens": ["Increasing", "uninterrupted", "sleep", "quantum", "in", "SQLiteDatabase", "to", "increase", "transaction", "size", "."], "add_tokens": "private static final int SLEEP_AFTER_YIELD_QUANTUM = 1000 ;", "del_tokens": "private static final int SLEEP_AFTER_YIELD_QUANTUM = 500 ;"}
{"commit_tokens": ["Add", "mk", "to", "Shell", "script", "group"], "add_tokens": "\" MK \" ,", "del_tokens": ""}
{"commit_tokens": ["Make", "TemplateResource", "public", "(", "to", "make", "it", "reusable", "from", "other", "frameworks", ")"], "add_tokens": "public static class TemplateResource {", "del_tokens": "static class TemplateResource {"}
{"commit_tokens": ["build", "#", "7"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Removed", "debug", "line", "."], "add_tokens": "", "del_tokens": "Log . info ( \" Name Info : \" + name ) ;"}
{"commit_tokens": ["Saving", "Blacklist", "and", "Hold", "for", "Moderation", "lists", "when", "dismissing", "dialog"], "add_tokens": "mSiteSettings . saveSettings ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "final", "keyword", "from", "Number3D", "class"], "add_tokens": "public class Number3D {", "del_tokens": "public final class Number3D {"}
{"commit_tokens": ["added", "code", "completion", "for", "intellij", "plugin", "(", "now", "use", "Shift", "-", "Enter", "to", "execute", "expressions", ")", "."], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Rename", "method"], "add_tokens": "public DBMaker asyncThreadDaemonEnable ( ) {", "del_tokens": "public DBMaker asyncThreadSetDaemon ( ) {"}
{"commit_tokens": ["Reset", "a", "session", "callback", "variable", "when", "tune", "is", "failed"], "add_tokens": "mSessionCallback = null ;", "del_tokens": ""}
{"commit_tokens": ["simplify", "code"], "add_tokens": "", "del_tokens": "} else if ( currentStatus = = STATUS_UTWP_TOLD ) { currentStatus = STATUS_UNKNOWN ;"}
{"commit_tokens": ["Adding", "@", "SuppressWarnings", "to", "avoid", "warning", "in", "Java", "7"], "add_tokens": "@ SuppressWarnings ( \" rawtypes \" )", "del_tokens": ""}
{"commit_tokens": ["add", "dynamic", "change", "maxActive", "support"], "add_tokens": "void setMaxActive ( int maxActive ) ;", "del_tokens": ""}
{"commit_tokens": ["fixed", "bug", "with", "services", "shutting", "down", "by", "itself"], "add_tokens": "shutdown = false ;", "del_tokens": ""}
{"commit_tokens": ["Removed", "pipeline", ".", "getState", "(", ")", "call", "from", "start", "(", ")", "it", "hangs", "capture", "on", "windows"], "add_tokens": "", "del_tokens": "pipeline . getState ( ) ;"}
{"commit_tokens": ["LPS", "-", "42288", "Exclude", "portlets", "that", "are", "not", "dataSiteLevel", "from", "import", "layouts", "content", "list"], "add_tokens": "portletDataHandler . isDataSiteLevel ( ) & &", "del_tokens": ""}
{"commit_tokens": ["Remove", "call", "to", "FileDescriptor", ".", "sync", "in", "Compiler", ".", "writeClassFile"], "add_tokens": "", "del_tokens": "cfs . getFD ( ) . sync ( ) ;"}
{"commit_tokens": ["Fixed", "accidental", "edit", "conflict", "."], "add_tokens": "", "del_tokens": "@ Override public ILiquidTank getTank ( ForgeDirection direction , LiquidStack type ) { / / TODO Auto - generated method stub return null ; }"}
{"commit_tokens": ["Fixed", "isPackage", "(", ")", "check", "for", "module", "files"], "add_tokens": "return PyNames . INIT_DOT_PY . equals ( file . getName ( ) ) ;", "del_tokens": "return turnInitIntoDir ( file ) ! = null ;"}
{"commit_tokens": ["Removed", "unnecessary", "cast", "."], "add_tokens": "add ( type , null ) ;", "del_tokens": "add ( ( CompositeType ) type , null ) ;"}
{"commit_tokens": ["Fix", "quality", "flaw"], "add_tokens": "", "del_tokens": "@ Override public String toString ( ) { return super . toString ( ) ; }"}
{"commit_tokens": ["Make", "sure", "out", "counts", "our", "current", "before", "attempting", "to", "use", "them", "for", "sorting"], "add_tokens": "rootColumnGroup . tabulate ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "bug", "631689", "."], "add_tokens": "return normalizedValue * ( maxSize - minSize ) + minSize ;", "del_tokens": "return normalizedValue * maxSize + minSize ;"}
{"commit_tokens": ["Fixed", "the", "index", "bug", "in", "PennTreeReader", ".", "java"], "add_tokens": "t . indexLeaves ( true ) ;", "del_tokens": ""}
{"commit_tokens": ["fix", "hide", "-", ">", "quit", "issue"], "add_tokens": "", "del_tokens": "removeMessages ( QUIT ) ;"}
{"commit_tokens": ["remove", "null", "response", "when", "processing", "line", "by", "line", "with", "autoOutput", "enabled"], "add_tokens": "if ( autoOutput & & o ! = null ) {", "del_tokens": "if ( autoOutput ) {"}
{"commit_tokens": ["Copy", "the", "solid", "color", "when", "mutating", "a", "gradient", "drawable", "."], "add_tokens": "mSolidColor = state . mSolidColor ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "small", "issue", "in", "SuggestBuilder", "#", "getText"], "add_tokens": "return this . globalText ;", "del_tokens": "return null ;"}
{"commit_tokens": ["LPS", "-", "62858", "Don", "t", "invoke", "the", "persistence", "utilities", "use", "the", "service"], "add_tokens": "LayoutSetPrototypeLocalServiceUtil . updateLayoutSetPrototype ( layoutSetPrototype ) ;", "del_tokens": "LayoutSetPrototypeUtil . update ( layoutSetPrototype ) ;"}
{"commit_tokens": ["Fix", "whitespaces"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Add", "more", "padding", "to", "in", "case", "of", "gossipocalypse", "."], "add_tokens": "X6 , X7 , X8 , X9 , X10 ,", "del_tokens": ""}
{"commit_tokens": ["Fix", "bug", "#", "6029615", "Update", "Javadoc", "for", "onPaddingChanged", "(", ")"], "add_tokens": "* { @ link # LAYOUT_DIRECTION_LTR } * { @ link # LAYOUT_DIRECTION_RTL }", "del_tokens": ""}
{"commit_tokens": ["Fix", "camera", "getMeteringAreas", "does", "not", "return", "areas", "correctly", "."], "add_tokens": "return splitArea ( get ( KEY_METERING_AREAS ) ) ;", "del_tokens": "return splitArea ( KEY_METERING_AREAS ) ;"}
{"commit_tokens": ["added", "Nullable", "annotations"], "add_tokens": "@ Nullable", "del_tokens": ""}
{"commit_tokens": ["fix", "bug", "in", "dataPath", "(", ")"], "add_tokens": "return path + File . separator + \" data \" + File . separator + where ;", "del_tokens": "return path + File . separator + \" data \" + where ;"}
{"commit_tokens": ["Made", "empty", "constructor", "for", "ModMetadata", "public"], "add_tokens": "public ModMetadata ( )", "del_tokens": "ModMetadata ( )"}
{"commit_tokens": ["LPS", "-", "36595", "Do", "not", "display", "Manage", "Site", "Membership", "in", "Control", "Panel", "when", "the", "Site", "membership", "policy", "doesn", "t", "allow", "manual", "membership"], "add_tokens": "if ( ! group . isManualMembership ( ) ) { return true ; }", "del_tokens": ""}
{"commit_tokens": ["remove", "@", "Nullable", "annotation"], "add_tokens": "", "del_tokens": "@ Nullable"}
{"commit_tokens": ["Fix", "bug", "5244365", "-", "Don", "t", "populate", "a", "ViewPager", "in", "onAttachedToWindow"], "add_tokens": "", "del_tokens": "if ( mAdapter ! = null ) { populate ( ) ; }"}
{"commit_tokens": ["Reset", "the", "inverse", "of", "the", "modelview", "in", "resetMatrix", "(", ")", "."], "add_tokens": "modelviewInv . reset ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Print", "objects", "to", "out", "&", "err", "(", "closes", "#", "17", ")"], "add_tokens": "logMessage ( String . valueOf ( x ) ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "data", "type", "in", "setStreamVersion"], "add_tokens": "public void setStreamVersion ( int format ) {", "del_tokens": "public void setStreamVersion ( byte format ) {"}
{"commit_tokens": ["don", "t", "clear", "selection", "during", "repaint", "to", "avoid", "blinking", "of", "test", "s", "tree", "when", "selection", "is", "hold", "by", "a", "leaf", "of", "a", "collapsed", "node"], "add_tokens": "", "del_tokens": "clearSelection ( ) ;"}
{"commit_tokens": ["refresh", "error", "notification", "after", "try", "again"], "add_tokens": "mNotificationService . updateErrorNotification ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "an", "unneeded", "assignment"], "add_tokens": "", "del_tokens": "int sentiment = RNNCoreAnnotations . getPredictedClass ( tree ) ;"}
{"commit_tokens": ["Fix", "checkstyle"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Add", "back", "missing", "constructor", "."], "add_tokens": "public AQuery ( Activity act , View root ) { super ( act , root ) ; }", "del_tokens": ""}
{"commit_tokens": ["Fix", "#", "198", "optimize", "initLazyView", "(", ")", "callback", "timing", "in", "the", "ViewPager", "scene", "."], "add_tokens": "mIsFirstVisible = true ;", "del_tokens": ""}
{"commit_tokens": ["Call", "invalidate", "(", ")", "in", "setCornerRadius", "(", ")", "fixes", "#", "87", "."], "add_tokens": "invalidate ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Reverted", "accidental", "DataSourceStatus", "enum", "change"], "add_tokens": "FAILURE ,", "del_tokens": "FAILURE , StoredProcedureResult ,"}
{"commit_tokens": ["Fix", "a", "typo", "in", "ScriptOpCodes", "PUSHDATA2", "string", "."], "add_tokens": "return \" PUSHDATA2 \" ;", "del_tokens": "return \" PUSHDATA1 \" ;"}
{"commit_tokens": ["Don", "t", "recycle", "native", "bitmap", "after", "the", "finalizer", "is", "called", "."], "add_tokens": "mRecycled = true ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "formatting"], "add_tokens": "ClientContext . reset ( ) ;", "del_tokens": "ClientContext . reset ( ) ;"}
{"commit_tokens": ["LPS", "-", "18560", "Source", "formatting", "missed", "the", "break"], "add_tokens": "break ;", "del_tokens": ""}
{"commit_tokens": ["dispose", "a", "dialog", "if", "it", "hasn", "t", "shown"], "add_tokens": "Disposer . dispose ( confirmExitDialog . getDisposable ( ) ) ;", "del_tokens": ""}
{"commit_tokens": ["Don", "t", "update", "DisplayLists", "when", "dumping"], "add_tokens": "view . mRenderNode . output ( ) ;", "del_tokens": "RenderNode renderNode = view . updateDisplayListIfDirty ( ) ; renderNode . output ( ) ;"}
{"commit_tokens": ["made", "PGLListener", "constructor", "public"], "add_tokens": "public PGLListener ( ) { }", "del_tokens": ""}
{"commit_tokens": ["Remove", "an", "@", "Override", "that", "is", "not", "needed", "."], "add_tokens": "", "del_tokens": "@ Override"}
{"commit_tokens": ["Add", "missing", "@", "Override"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["add", "emptyVersion", "comment"], "add_tokens": "/ / 59 adb24e - f3cd - 3e02 - 97f 0 - 5 b395827453f", "del_tokens": ""}
{"commit_tokens": ["Removed", "Scrollbar"], "add_tokens": "appView . setVerticalScrollBarEnabled ( false ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "memory", "leak", "and", "slowness", "in", "keyguard"], "add_tokens": "removeCallbacks ( mUpdateSeekBars ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "checkstyle", "issues"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["do", "not", "use", "Sun", "s", "internal", "NotImplementedException", "use", "the", "standard", "UnsupportedOperationException", "instead"], "add_tokens": "throw new UnsupportedOperationException ( ) ;", "del_tokens": "throw new NotImplementedException ( ) ;"}
{"commit_tokens": ["Fix", "bug", "#", "12993929", "Screen", "orientation", "change", "replaces", "wifi", "password", "dialog", "with", "Add", "network", "dialog"], "add_tokens": "0 , 0 , true ) ;", "del_tokens": "0 , 0 , false ) ;"}
{"commit_tokens": ["added", "code", "to", "visit", "sibling", "nodes"], "add_tokens": "acceptSiblings ( currentNode , followSiblings ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "unnecessary", "empty", "line"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Added", "onSnapshotCreated", "method"], "add_tokens": "public void onSnapshotCreated ( Object snapshot ) ;", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "50131", "This", "does", "not", "need", "NewClassLoaderJUnitTestRunner"], "add_tokens": "", "del_tokens": "@ RunWith ( NewClassLoaderJUnitTestRunner . class )"}
{"commit_tokens": ["turn", "off", "auto", "-", "import", "popup", "by", "default"], "add_tokens": "public boolean SHOW_IMPORT_POPUP = false ;", "del_tokens": "public boolean SHOW_IMPORT_POPUP = true ;"}
{"commit_tokens": ["remove", "extra", "import", "in", "BusinessSubscriptionTransitionRecorder"], "add_tokens": "", "del_tokens": "import java . util . UUID ;"}
{"commit_tokens": ["File", "type", "renamed"], "add_tokens": "return \" Kotlin \" ;", "del_tokens": "return \" jet \" ;"}
{"commit_tokens": ["Fix", "swapped", "diff", "panels", "in", "update", "-", "during", "-", "push", "info", "tab"], "add_tokens": "myBeforeUpdateLabel = beforeUpdateLabel ; myAfterUpdateLabel = afterUpdateLabel ;", "del_tokens": "myAfterUpdateLabel = beforeUpdateLabel ; myBeforeUpdateLabel = afterUpdateLabel ;"}
{"commit_tokens": ["Fix", "a", "rare", "NPE", "crash", "in", "Android", "2", "."], "add_tokens": "catch ( NullPointerException e ) { throw new AsyncSelectorException ( e ) ; }", "del_tokens": ""}
{"commit_tokens": ["Fix", "unnecessary", "boolean", "expression"], "add_tokens": "@ SuppressWarnings ( \" IdentityBinaryExpression \" )", "del_tokens": ""}
{"commit_tokens": ["At", "the", "end", "of", "header", "sync", "reset", "the", "counts", "."], "add_tokens": "mFolderCompleted = 0 ; mFolderTotal = 0 ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "more", "DB", "reserved", "words", "used", "by", "tests"], "add_tokens": "@ Table ( name = \" ` Role ` \" )", "del_tokens": ""}
{"commit_tokens": ["Removed", "a", "sysout", "I", "missed", "."], "add_tokens": "", "del_tokens": "System . out . println ( w . toString ( ) ) ;"}
{"commit_tokens": ["Need", "val", "and", "pos", "on", "the", "interface"], "add_tokens": "String getVal ( ) ; int getStart ( ) ;", "del_tokens": ""}
{"commit_tokens": ["PY", "-", "8427", "Behave", "BDD", "support"], "add_tokens": "* TODO : Copy / paste with Django and PyBDD bundles", "del_tokens": ""}
{"commit_tokens": ["eliminate", "eclipse", "warnings"], "add_tokens": "", "del_tokens": "@ SuppressWarnings ( \" unused \" )"}
{"commit_tokens": ["Do", "not", "replace", "map", "reference"], "add_tokens": "myCustomEnvironment . clear ( ) ; myCustomEnvironment . putAll ( customEnvironment ) ;", "del_tokens": "myCustomEnvironment = customEnvironment ;"}
{"commit_tokens": ["Correct", "a", "typo"], "add_tokens": "* Store Children from this StandardServer description", "del_tokens": "* Store Children from this StandardServer descrition"}
{"commit_tokens": ["Avoid", "NPE", "when", "trying", "to", "do", "access", "logging", "on", "cookies", "for", "an", "unmapped", "request", "."], "add_tokens": "if ( getContext ( ) = = null ) { return ; }", "del_tokens": ""}
{"commit_tokens": ["Add", "one", "way", "to", "construct", "BlockStoreMeta", "cheaply", "."], "add_tokens": "", "del_tokens": "*"}
{"commit_tokens": ["Fix", "a", "warning"], "add_tokens": "public synchronized void clear ( ) {", "del_tokens": "public void clear ( ) {"}
{"commit_tokens": ["Make", "@", "BugPattern", "maturity", "optional"], "add_tokens": "MaturityLevel maturity ( ) default MaturityLevel . MATURE ;", "del_tokens": "MaturityLevel maturity ( ) ;"}
{"commit_tokens": ["Reverting", "back", "to", "TopicOffsetOutOfRangeException", "extends", "RunTimeException", "."], "add_tokens": "public class TopicOffsetOutOfRangeException extends RuntimeException {", "del_tokens": "public class TopicOffsetOutOfRangeException extends FailedFetchException {"}
{"commit_tokens": ["Remove", "redundant", "call", "to", "createSdpOffer", "(", ")"], "add_tokens": "", "del_tokens": "invite . setContent ( callSession . createSdpOffer ( intendedDestination ) , contentTypeHeader ) ;"}
{"commit_tokens": ["Fix", "check", "style"], "add_tokens": "", "del_tokens": "import javax . annotation . concurrent . ThreadSafe ;"}
{"commit_tokens": ["LPS", "-", "36711", "Add", "missing", "@", "Override"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["Fix", "splash", "progress", "disappearing", "on", "image", "repaint"], "add_tokens": "myProgressLastPosition = 0 ;", "del_tokens": ""}
{"commit_tokens": ["unique", "id", "contains", "site", "name"], "add_tokens": "return \" @ Basket : \" + Link . getSiteName ( ) ;", "del_tokens": "return \" @ Basket \" ;"}
{"commit_tokens": ["Add", "TypeCheck", ".", "DETERMINISTIC_TEST", "check", "to", "suspiciousCode", "group", "."], "add_tokens": "CheckSuspiciousCode . SUSPICIOUS_INSTANCEOF_LEFT_OPERAND , TypeCheck . DETERMINISTIC_TEST ) ;", "del_tokens": "CheckSuspiciousCode . SUSPICIOUS_INSTANCEOF_LEFT_OPERAND ) ;"}
{"commit_tokens": ["Conditionally", "reset", "the", "transaction", "isolation", "level", "based", "on", "whether", "the", "user", "has", "altered", "it", "or", "not", "."], "add_tokens": "isTransactionIsolationDirty = true ;", "del_tokens": ""}
{"commit_tokens": ["Added", "parsing", "of", "Cython", "include", "statements"], "add_tokens": "public void testIncludes ( ) { doTest ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["HHH", "-", "2166", "-", "remove", "@", "Override", "annotations", "for", "1", ".", "4"], "add_tokens": "", "del_tokens": "@ Override"}
{"commit_tokens": ["Added", "IPC", "exception", "(", "support", "info", ")"], "add_tokens": "\" android . view . ViewConfiguration \" ,", "del_tokens": ""}
{"commit_tokens": ["Fixing", "special", "handling", "of", "presence", "type", "in", "the", "model"], "add_tokens": "return ( type = = 5 ? \" \" : value ) ;", "del_tokens": "return value ;"}
{"commit_tokens": ["Oops", "typo", "caused", "infinite", "loop"], "add_tokens": "return new TestOptions ( ) ;", "del_tokens": "return newTestOptions ( ) ;"}
{"commit_tokens": ["added", "backprop", "to", "reconstructions", "as", "well"], "add_tokens": "numEpochs + + ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "documentation", "for", "Wifi", "ScanResult", ".", "timestamp"], "add_tokens": "* timestamp in microseconds ( since boot ) when", "del_tokens": "* Time Synchronization Function ( tsf ) timestamp in microseconds when"}
{"commit_tokens": ["Fix", "#", "675"], "add_tokens": "frameworkMode ) ;", "del_tokens": "mActivity . startActionMode ( wrappedCallback ) ) ;"}
{"commit_tokens": ["Remove", "comment"], "add_tokens": "", "del_tokens": "/ / Synch Stats if the service is not running"}
{"commit_tokens": ["throw", "inside", "finally", "blocks", "inspection", "temporary", "disabled", "until", "IDEA", "-", "154184", "is", "fixed"], "add_tokens": "", "del_tokens": "/ / noinspection ThrowFromFinallyBlock"}
{"commit_tokens": ["added", "missing", "chain", "to", "superclass"], "add_tokens": "super . onSaveInstanceState ( state ) ;", "del_tokens": ""}
{"commit_tokens": ["Expose", "NETWORK_SCORE_SERVICE", "as", "@", "SystemApi", "."], "add_tokens": "@ SystemApi", "del_tokens": ""}
{"commit_tokens": ["Remove", "$", "Revision", "keyword", "from", "files", "in", "jasper", "/", "*", "*"], "add_tokens": "", "del_tokens": "* @ version $ Revision $"}
{"commit_tokens": ["fixed", "the", "build"], "add_tokens": "", "del_tokens": "@ Override"}
{"commit_tokens": ["suppress", "test", "for", "now"], "add_tokens": "public void _testMethodParams ( ) throws Exception {", "del_tokens": "public void testMethodParams ( ) throws Exception {"}
{"commit_tokens": ["LPS", "-", "55548", "Add", "property", "to", "field", "type", "settings", "definition"], "add_tokens": "@ DDMFormField public String visibilityExpression ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "test", "I", "opted", "to", "host", "elsewhere"], "add_tokens": "", "del_tokens": "@ Test public void testAsyncDispatchEncoding ( ) throws Exception { }"}
{"commit_tokens": ["Allow", "change", "in", "whether", "to", "shuffle", "training", "data", "after", "checkpoint", "restart", "."], "add_tokens": "\" shuffle_training_data \" ,", "del_tokens": ""}
{"commit_tokens": ["add", "missing", "period", "to", "save", "as", "extension"], "add_tokens": "return \" . Rprof \" ;", "del_tokens": "return \" Rprof \" ;"}
{"commit_tokens": ["Remove", "test", "code"], "add_tokens": "", "del_tokens": "System . out . println ( \" onWritePossible \" ) ;"}
{"commit_tokens": ["Fix", "NullPointerException", "in", "XML", ".", "toString", "(", "object", "tagName", ")"], "add_tokens": "* @ version 2015 - 10 - 18", "del_tokens": "* @ version 2015 - 10 - 14"}
{"commit_tokens": ["Added", "toString", "(", ")", "method", "in", "NeoApp", ".", "NeoAppRelationshipType", ".", ".", ".", "otherwise"], "add_tokens": "@ Override public String toString ( ) { return name ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "59252", "Add", "Layout", "into", "request", "so", "that", "we", "can", "fetch", "its", "group", "ID", "when", "calculating", "locale", "."], "add_tokens": "request . setAttribute ( WebKeys . LAYOUT , layout ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "compilation", "error", "."], "add_tokens": "", "del_tokens": "localServer = server ;"}
{"commit_tokens": ["Fix", "divide", "by", "zero", "error", "in", "GCInspector"], "add_tokens": "if ( count . equals ( previousCount ) )", "del_tokens": "if ( count = = previousCount )"}
{"commit_tokens": ["Removed", "redundant", "PermissionsResolver", ".", "load", "(", ")", "call"], "add_tokens": "", "del_tokens": "permissionResolver . load ( ) ;"}
{"commit_tokens": ["Remove", "unused", "WebApplicationContext", "property"], "add_tokens": "", "del_tokens": "@ Autowired private WebApplicationContext ctx ;"}
{"commit_tokens": ["Accessibility", "events", "fired", "from", "AdapterView", "underpopulated", "."], "add_tokens": "event . setFromIndex ( mFirstPosition ) ; event . setToIndex ( mFirstPosition + getChildCount ( ) ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "hardcoded", "position", "for", "scrollToPosition", "."], "add_tokens": "mRequestPosition = position ;", "del_tokens": "mRequestPosition = 222 ; / / position ;"}
{"commit_tokens": ["disable", "optimizations", "for", "interfaces"], "add_tokens": "classNode . setNodeMetaData ( ClassNodeSkip . class , true ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "bad", "assertion"], "add_tokens": "token = getToken ( - 1 ) ;", "del_tokens": "token = getToken ( 0 ) ;"}
{"commit_tokens": ["Recycle", "style", "attributes", "typed", "array", "."], "add_tokens": "a . recycle ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Add", "a", "exception", "log", "for", "JavassistProxyFactory", "static", "initiaiization", "."], "add_tokens": "LoggerFactory . getLogger ( JavassistProxyFactory . class ) . error ( \" Fatal exception during proxy generation \" , e ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "broken", "test"], "add_tokens": "return createBeanNameELResolver ( true ) ;", "del_tokens": "return createBeanNameELResolver ( false ) ;"}
{"commit_tokens": ["Added", "a", "shutdown", "method"], "add_tokens": "void shutdown ( ) ;", "del_tokens": ""}
{"commit_tokens": ["fixed", "error", "in", "previous", "change"], "add_tokens": "activeMarker = par1IconRegister . registerIcon ( \" buildcraft : blockPathMarkerActive \" ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "the", "(", "Padding", "is", "not", "working", "properly", "on", "Android", "M", ")", "."], "add_tokens": "setScaleType ( ScaleType . CENTER_INSIDE ) ;", "del_tokens": "setScaleType ( ScaleType . MATRIX ) ;"}
{"commit_tokens": ["LPS", "-", "49887", "-", "Set", "browser", "navigation", "bar", "height"], "add_tokens": "WebDriverHelper . setNavigationBarHeight ( 120 ) ;", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "30620", "WebDAVPropsLocalServiceImpl", "is", "doing", "write", "in", "a", "read", "-", "only", "transaction"], "add_tokens": "webDAVPropsLocalService . updateWebDAVProps ( webDavProps ) ;", "del_tokens": "webDAVPropsPersistence . update ( webDavProps ) ;"}
{"commit_tokens": ["Make", "all", "IpReachabilityMonitor", "log", "messages", "have", "the", "same", "tag"], "add_tokens": "", "del_tokens": "private static final String TAG = \" NetlinkSocketObserver \" ;"}
{"commit_tokens": ["throw", "assert"], "add_tokens": "throw new AssertionError ( \" not implemented \" ) ;", "del_tokens": "return true ;"}
{"commit_tokens": ["Gracefully", "handle", "apps", "without", "native", "libraries", "."], "add_tokens": "if ( nativeLibraryPath = = null ) return false ;", "del_tokens": ""}
{"commit_tokens": ["default", "native", "proto", "to", "correct", "port", "in", "Config"], "add_tokens": "public Integer native_transport_port = 9042 ;", "del_tokens": "public Integer native_transport_port = 8000 ;"}
{"commit_tokens": ["Fixed", "failing", "test", "."], "add_tokens": "public void testGrailsVersion ( ) {", "del_tokens": "void testGrailsVersion ( ) {"}
{"commit_tokens": ["Accept", "parameters", "with", "bad", "UTF", "-", "8", "."], "add_tokens": "LOG . debug ( e ) ;", "del_tokens": ""}
{"commit_tokens": ["changed", "default", "."], "add_tokens": "private volatile int maxBootstrapRetries = 2 ;", "del_tokens": "private volatile int maxBootstrapRetries = 1 ;"}
{"commit_tokens": ["Fixed", "javadoc", "tag"], "add_tokens": "* @ return the rounding field", "del_tokens": "* @ param the rounding field"}
{"commit_tokens": ["Fix", "notification", "message", "when", "moving", "."], "add_tokens": "return getProgressNotification ( R . string . copy_remaining ) ;", "del_tokens": "return getProgressNotification ( R . string . copy_preparing ) ;"}
{"commit_tokens": ["fix", "the", "build", "."], "add_tokens": "showNotification ( config , label , bitmap ) ;", "del_tokens": "showNotification ( pm , app , config ) ;"}
{"commit_tokens": ["show", "default", "publish", "droplist", "entries", "on", "unsaved", "documents"], "add_tokens": "setPreviousDeployments ( null ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "View", "s", "long", "press", "callbacks", "when", "ACTION_CANCEL", "is", "received"], "add_tokens": "removeLongPressCallback ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "unused", "import", "."], "add_tokens": "", "del_tokens": "import java . lang . reflect . Array ; import java . util . Arrays ;"}
{"commit_tokens": ["Removed", "a", "System", ".", "out"], "add_tokens": "", "del_tokens": "System . out . println ( \" Copied \" + file ) ;"}
{"commit_tokens": ["Enable", "Treat", "test", "for", "EclipseLink"], "add_tokens": "", "del_tokens": "@ NoEclipseLink"}
{"commit_tokens": ["Added", "a", "@", "since", "tag", "to", "the", "javadoc"], "add_tokens": "* @ since 1 . 3", "del_tokens": ""}
{"commit_tokens": ["Fix", "accidental", "shadowing", "of", "a", "field"], "add_tokens": "", "del_tokens": "public Optional < Path > proguardConfig ;"}
{"commit_tokens": ["update", "gutter", "size", "after", "setting", "LineNumberConvertor"], "add_tokens": "myEditor . getGutterComponentEx ( ) . revalidateMarkup ( ) ;", "del_tokens": ""}
{"commit_tokens": ["help", "topic", "(", "PY", "-", "348", ")"], "add_tokens": "@ Override public String getBreakpointsDialogHelpTopic ( ) { return \" reference . dialogs . breakpoints \" ; }", "del_tokens": ""}
{"commit_tokens": ["Add", "missing", "@", "Override"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["fix", "bug"], "add_tokens": "this . pp = pp ;", "del_tokens": "this . pp = pp ;"}
{"commit_tokens": ["Remove", "unused", "field"], "add_tokens": "", "del_tokens": "private static final TextPaint sTemp = new TextPaint ( ) ;"}
{"commit_tokens": ["varargs", "resolve", "bug"], "add_tokens": "", "del_tokens": "break ;"}
{"commit_tokens": ["Fix", "issue", "with", "updating", "altitude"], "add_tokens": "} else { oldItemSize = app . getAppPath ( item . getTargetFileName ( ) ) . length ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Pass", "the", "Subscription", "down", "the", "chain", "for", "the", "subscriber", "."], "add_tokens": "super ( subscriber ) ;", "del_tokens": ""}
{"commit_tokens": ["Removed", "username", "attribute", "from", "WebAttributes", "class", "."], "add_tokens": "", "del_tokens": "public static final String LAST_USERNAME = \" SPRING_SECURITY_LAST_USERNAME \" ;"}
{"commit_tokens": ["add", "javadoc"], "add_tokens": "* - 1 is the default not set state", "del_tokens": ""}
{"commit_tokens": ["Restore", "last", "know", "good", "retry", "values"], "add_tokens": "private static int cTryWaitMs = 50 ;", "del_tokens": "private static int cTryWaitMs = 100 ;"}
{"commit_tokens": ["And", "remove", "the", "builder", "from", "the", "creative", "tab"], "add_tokens": "/ / setCreativeTab ( CreativeTabBuildCraft . tabBuildCraft ) ;", "del_tokens": "setCreativeTab ( CreativeTabBuildCraft . tabBuildCraft ) ;"}
{"commit_tokens": ["Select", "the", "first", "post", "after", "refreshing", "if", "using", "the", "two", "pane", "view", "."], "add_tokens": "attemptToSelectPost ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Align", "Wrapper", "javadoc", "with", "actual", "implementation", "that", "was", "changed", "by", "r926377", "."], "add_tokens": "* < code > false < / code > .", "del_tokens": "* < code > true < / code >"}
{"commit_tokens": ["Add", "a", "comment", "about", "the", "custom", "IMAP", "command", "Yahoo", "!", "needs", "to", "work", "right", "."], "add_tokens": "/ / Yahoo ! requires a custom IMAP command to work right over a non - 3 G network", "del_tokens": ""}
{"commit_tokens": ["adding", "new", "method", "forgot", "it", "in", "last", "commit", "."], "add_tokens": "public void clearComments ( int blogID ) { db . delete ( COMMENTS_TABLE , \" blogID = \" + blogID , null ) ; }", "del_tokens": ""}
{"commit_tokens": ["Add", "option", "to", "export", "weights", "and", "biases", "to", "REST", "API", "/", "Flow", "."], "add_tokens": "\" reproducible \" , \" export_weights_and_biases \"", "del_tokens": "\" reproducible \""}
{"commit_tokens": ["applied", "patch"], "add_tokens": "break ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "MMS", "last", "sync", "date"], "add_tokens": ". remove ( PREF_MAX_SYNCED_DATE_MMS )", "del_tokens": ""}
{"commit_tokens": ["added", "constructor", "that", "takes", "the", "parent", "class", "loader"], "add_tokens": "public GroovyClassLoader ( ClassLoader loader ) { super ( loader ) ; }", "del_tokens": ""}
{"commit_tokens": ["Make", "Printer", "constructor", "public"], "add_tokens": "public Printer ( @ NotNull StringBuilder out ) {", "del_tokens": "Printer ( @ NotNull StringBuilder out ) {"}
{"commit_tokens": ["remove", "key", "lookup", "for", "account", "screen", "(", "not", "a", "good", "place", ")"], "add_tokens": "/ / getOTRKeyInfo ( ) ;", "del_tokens": "getOTRKeyInfo ( ) ;"}
{"commit_tokens": ["remove", "rouge", "sout", ".", ".", "."], "add_tokens": "", "del_tokens": "System . out . println ( info . getThreadName ( ) ) ;"}
{"commit_tokens": ["Fixed", "inconsistent", "synchronization"], "add_tokens": "public synchronized Executor getChannelFactoryExecutor ( ) {", "del_tokens": "public Executor getChannelFactoryExecutor ( ) {"}
{"commit_tokens": ["fixed", "key", "type", "."], "add_tokens": "public void map ( final String pKey ,", "del_tokens": "public void map ( final Text pKey ,"}
{"commit_tokens": ["Disable", "PBAP", "for", "no", "voice", "capability"], "add_tokens": "", "del_tokens": "BluetoothUuid . PBAP_PSE ) , BluetoothUuid . getServiceIdentifierFromParcelUuid ("}
{"commit_tokens": ["Make", "force", "protected", "for", "sub", "-", "class", "access"], "add_tokens": "protected boolean force ;", "del_tokens": "private boolean force ;"}
{"commit_tokens": ["Fixes", "add", "contact", "dialog", "and", "activating", "add", "button", "."], "add_tokens": "this . initialized = true ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "build"], "add_tokens": "import android . annotation . SystemApi ;", "del_tokens": ""}
{"commit_tokens": ["consume", "the", "data"], "add_tokens": "bb . clear ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Live", "template", "support", "for", "Bindows", "(", "IDEADEV", "-", "17261", ")"], "add_tokens": "if ( myMacroTable = = null ) init ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "osmo", "login", "issue"], "add_tokens": "sessionInfo = null ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "build", "."], "add_tokens": "\" java . lang . ProcessManager \"", "del_tokens": "\" java . lang . ProcessManager \" ,"}
{"commit_tokens": ["Move", "cursor", "to", "the", "end", "of", "a", "word", "after", "correction", "popup", "alternates", "selection"], "add_tokens": "/ / Move cursor at the end of the replacement word Selection . setSelection ( editable , spanEnd + lengthDifference ) ;", "del_tokens": ""}
{"commit_tokens": ["fixed", "bug", "where", "spinner", "was", "blank", "upon", "first", "launch", "into", "media", "gallery", "."], "add_tokens": "setupSpinnerAdapter ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "copy", "/", "paste", "comment", "on", "YAML", "type"], "add_tokens": "* A YAML based content type .", "del_tokens": "* The jackson based smile binary format . Fast and compact binary format ."}
{"commit_tokens": ["Fix", "builder", "crash", "#", "21"], "add_tokens": "this . rippleSearchAdapter = inAdapter ;", "del_tokens": "this . rippleInAdapter ( inAdapter ) ;"}
{"commit_tokens": ["Remove", "an", "unnecessary", "semicolon", "."], "add_tokens": "}", "del_tokens": "} ;"}
{"commit_tokens": ["Fix", "bug", "in", "AttributeEqualBuilder", "init", "."], "add_tokens": "values = new ArrayList < Object > ( ) ;", "del_tokens": ""}
{"commit_tokens": ["removing", "unused", "import"], "add_tokens": "", "del_tokens": "import javax . swing . * ;"}
{"commit_tokens": ["fixing", "the", "indentation"], "add_tokens": "builder = null ;", "del_tokens": "builder = null ;"}
{"commit_tokens": ["Don", "t", "spuriously", "time", "out", "restore", "sessions"], "add_tokens": "/ / Done : reset the session timeout clock removeMessages ( MSG_RESTORE_TIMEOUT ) ; sendEmptyMessageDelayed ( MSG_RESTORE_TIMEOUT , TIMEOUT_RESTORE_INTERVAL ) ;", "del_tokens": ""}
{"commit_tokens": ["tweak", "comment"], "add_tokens": "", "del_tokens": "* * TODO : 1 action per lex rule"}
{"commit_tokens": ["fixed", "the", "code", "style"], "add_tokens": "void onDateSelected ( Date date ) ;", "del_tokens": "public void onDateSelected ( Date date ) ;"}
{"commit_tokens": ["Added", "suppression", "to", "@", "javax", "."], "add_tokens": "@ SuppressWarnings ( \" InjectJavaxInjectOnFinalField \" ) @ Inject final B b = null ;", "del_tokens": "@ Inject final B b = null ;"}
{"commit_tokens": ["Fix", "XML", "format"], "add_tokens": "conferenceInfo . appendChild ( users ) ;", "del_tokens": "conferenceState . appendChild ( users ) ;"}
{"commit_tokens": ["added", "getNotificationUri", "to", "comply", "with", "API", "level", "19"], "add_tokens": "/ * * Since API level 19 * / public Uri getNotificationUri ( ) { return null ; }", "del_tokens": ""}
{"commit_tokens": ["Remove", "code", "highlighted", "as", "unused", "by", "UCDetector"], "add_tokens": "", "del_tokens": "public OutputBuffer getOutputBuffer ( ) { return outputBuffer ; }"}
{"commit_tokens": ["call", "the", "callback", "on", "sdkInitialize"], "add_tokens": "sdkInitialize ( applicationContext , callback ) ;", "del_tokens": "sdkInitialize ( applicationContext ) ;"}
{"commit_tokens": ["Fix", "a", "bug", "in", "ScanSettings", "constructor", "."], "add_tokens": "mMatchMode = matchMode ;", "del_tokens": "mMatchMode = numOfMatchesPerFilter ;"}
{"commit_tokens": ["Remove", "redundant", "no", "-", "arg", "constructor", "."], "add_tokens": "", "del_tokens": "DebugChecker ( ) { }"}
{"commit_tokens": ["Add", "CAP_BLOCK_SUSPEND", "to", "system", "server"], "add_tokens": "OsConstants . CAP_BLOCK_SUSPEND ,", "del_tokens": ""}
{"commit_tokens": ["apply", "method", "parameter"], "add_tokens": "nodeEntryIndex + = sizeInBytes ;", "del_tokens": "nodeEntryIndex + = 4 ;"}
{"commit_tokens": ["removed", "unused", "import", "on", "line", "27"], "add_tokens": "", "del_tokens": "import android . content . DialogInterface ;"}
{"commit_tokens": ["Remove", "uninformative", "Javadoc"], "add_tokens": "", "del_tokens": "* * @ throws JasperException If an error occurs"}
{"commit_tokens": ["Ignore", "patterns"], "add_tokens": "_exec ( _SVN_SET_IGNORES + \" tmp \\ \" \" + projectDirName + \" \\ \" \" ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "bug", "where", "console", "jumps", "to", "top"], "add_tokens": "if ( ! child ) return ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "redundant", "onPause", "from", "ReaderWebView", "when", "hiding", "view"], "add_tokens": "", "del_tokens": "mReaderWebView . onPause ( ) ;"}
{"commit_tokens": ["Add", "CPUFREQ_STATS", "event", "tag"], "add_tokens": "CPUFREQ_STATS ,", "del_tokens": ""}
{"commit_tokens": ["Fix", "isAnswerCorrect", "code"], "add_tokens": "return checkedItems . size ( ) = = answerIds . length ;", "del_tokens": "return true ;"}
{"commit_tokens": ["Fix", "build"], "add_tokens": "onDetachedFromWindow ( ) ;", "del_tokens": "onDetachedFromWindows ( ) ;"}
{"commit_tokens": ["Fix", "a", "typo", "in", "a", "test", "method", "name", "."], "add_tokens": "public void testValidateWithJvmRouteWithPeriod ( ) {", "del_tokens": "public void testValidateWithJvmRouteWithPerid ( ) {"}
{"commit_tokens": ["Announce", "changes", "to", "the", "keyguard", "security", "message", "for", "accessibility", "."], "add_tokens": "mSecurityMessage . announceForAccessibility ( mSecurityMessage . getText ( ) ) ;", "del_tokens": ""}
{"commit_tokens": ["Removed", "debugging", "system", "out", "from", "animChannel"], "add_tokens": "/ / System . out . println ( \" Setting notified false \" ) ;", "del_tokens": "System . out . println ( \" Setting notified false \" ) ;"}
{"commit_tokens": ["undo", "previous", "trivial", "change", "still", "testing", "svn"], "add_tokens": "", "del_tokens": "*"}
{"commit_tokens": ["Fix", "a", "typo", "in", "canHandleBinaryNatively", "(", ")", "shouldnt", "take", "an", "arg"], "add_tokens": "public boolean canHandleBinaryNatively ( ) {", "del_tokens": "public boolean canHandleBinaryNatively ( FormatSchema schema ) {"}
{"commit_tokens": ["Add", "support", "for", "displayName"], "add_tokens": "String displayName ( ) default \" \" ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "unsupported", "JDK", "1", ".", "6", "operation", "(", "Bamboo", "ref", "13377", ")"], "add_tokens": "", "del_tokens": "sendPacketPool . allowCoreThreadTimeOut ( true ) ;"}
{"commit_tokens": ["stop", "web", "view", "loading", "when", "child", "browser", "dialog", "is", "closed"], "add_tokens": "this . webview . stopLoading ( ) ;", "del_tokens": ""}
{"commit_tokens": ["fix", "potential", "npe"], "add_tokens": "return result ! = null ? result : false ;", "del_tokens": "return result ;"}
{"commit_tokens": ["Avoid", "crash", "if", "layer", "is", "destroyed", "after", "GLRenderer"], "add_tokens": "if ( mGlCanvas ! = null ) { mGlCanvas . cancelLayerUpdate ( layer ) ; }", "del_tokens": "mGlCanvas . cancelLayerUpdate ( layer ) ;"}
{"commit_tokens": ["allow", "private", "constraints", "to", "be", "retrieved", "as", "a", "read", "only", "property"], "add_tokens": "public Object getConstraints ( ) { return constraints ; }", "del_tokens": ""}
{"commit_tokens": ["Add", "missing", "villager", "sounds", "."], "add_tokens": "/ / Villager VILLAGER_DEATH , VILLAGER_HAGGLE , VILLAGER_HIT , VILLAGER_IDLE , VILLAGER_NO , VILLAGER_YES ,", "del_tokens": ""}
{"commit_tokens": ["Announce", "changes", "to", "the", "keyguard", "security", "message", "for", "accessibility", "."], "add_tokens": "mSecurityMessage . announceForAccessibility ( mSecurityMessage . getText ( ) ) ;", "del_tokens": ""}
{"commit_tokens": ["getNdefMessage", "(", ")", "should", "throw", "exception", "if", "no", "tag", "in", "field", "."], "add_tokens": "} else if ( ! tagService . isPresent ( serviceHandle ) ) { throw new TagLostException ( ) ;", "del_tokens": ""}
{"commit_tokens": ["return", "a", "copy", "of", "the", "list", "of", "call", "participants"], "add_tokens": "return new LinkedList ( callParticipants ) . iterator ( ) ;", "del_tokens": "return callParticipants . iterator ( ) ;"}
{"commit_tokens": ["When", "changing", "a", "session", "ID", "use", "the", "internal", "add", "cookie", "method", "in", "the", "same", "way", "as", "when", "first", "creating", "a", "session", "cookie", "."], "add_tokens": "response . addCookieInternal ( newCookie ) ;", "del_tokens": "response . addCookie ( newCookie ) ;"}
{"commit_tokens": ["Remove", "stray", "-", "after", "splitting", "of", "increment", "and", "decrement", "methods"], "add_tokens": "decrementWindowSize ( result ) ;", "del_tokens": "decrementWindowSize ( - result ) ;"}
{"commit_tokens": ["Removed", "unnecessary", "fully", "qualified", "class", "name", "."], "add_tokens": "private final WriteConcern writeConcern ;", "del_tokens": "private final com . mongodb . WriteConcern writeConcern ;"}
{"commit_tokens": ["removed", "unused", "import"], "add_tokens": "", "del_tokens": "import java . util . Arrays ;"}
{"commit_tokens": ["Fix", "a", "serve", "memory", "leak", "by", "properly", "disposing", "the", "liquid", "wrapper", "."], "add_tokens": "liquidWrapper . dispose ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Removed", "unused", "import"], "add_tokens": "", "del_tokens": "import java . util . LinkedList ;"}
{"commit_tokens": ["Cleaning", "up", "the", "ant", "class", "loader", "once", "the", "task", "is", "complete", "."], "add_tokens": "loader . cleanup ( ) ;", "del_tokens": ""}
{"commit_tokens": ["allow", "testing", "element", "icons", "(", "author", "section", "removed", ")"], "add_tokens": "", "del_tokens": "/ * * @ author max * /"}
{"commit_tokens": ["Remove", "debug", "output", "."], "add_tokens": "", "del_tokens": "System . out . println ( \" PhoneNumberService : \" + ( phoneNumberI18nService ! = null ) ) ;"}
{"commit_tokens": ["Fix", "build", "after", "checkThread", "fix", "merge", "to", "master"], "add_tokens": "", "del_tokens": "checkThread ( ) ;"}
{"commit_tokens": ["Fix", "makeOutputDir", "method", "."], "add_tokens": "return ( outDirFile . exists ( ) | | outDirFile . mkdirs ( ) ) ;", "del_tokens": "return outDirFile . mkdirs ( ) ;"}
{"commit_tokens": ["make", "BoundColumn", "inner", "class", "static", "to", "reduce", "footprint"], "add_tokens": "private static class BoundColumn", "del_tokens": "private class BoundColumn"}
{"commit_tokens": ["Catch", "NameNotFoundException", "(", "support", "info", ")"], "add_tokens": "} catch ( NameNotFoundException ex ) { latch . countDown ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Removing", "java", ".", "util", ".", "Arrays", "import"], "add_tokens": "", "del_tokens": "import java . util . Arrays ;"}
{"commit_tokens": ["Make", "this", "public", "to", "expand", "how", "the", "class", "can", "be", "used", "for", "unit", "tests", "."], "add_tokens": "public void setPort ( int thePort ) {", "del_tokens": "protected void setPort ( int thePort ) {"}
{"commit_tokens": ["Remove", "useless", "import"], "add_tokens": "", "del_tokens": "import java . io . FileInputStream ;"}
{"commit_tokens": ["added", "support", "to", "get", "right", "Dialog", "from", "Activity"], "add_tokens": "public Dialog getDialogById ( int dialogId ) { return dialogForId . get ( dialogId ) ; }", "del_tokens": ""}
{"commit_tokens": ["Add", "version", "to", "params", "."], "add_tokens": "public static final String VERSION = \" 2 . 0 . 0 \" ;", "del_tokens": ""}
{"commit_tokens": ["removed", "unused", "code"], "add_tokens": "", "del_tokens": "public void reset ( ) { cache . clear ( ) ; }"}
{"commit_tokens": ["test", "not", "masking", "gestures", "for", "two", "finger", "tap"], "add_tokens": "gestureDetector . onTouchEvent ( event ) ;", "del_tokens": ""}
{"commit_tokens": ["update", "voiceRouter", "with", "currentStatus", "=", "STATUS_UNKNOWN", ";", "while", "makeUturnWhenPossible", "is", "active"], "add_tokens": "currentStatus = STATUS_UNKNOWN ;", "del_tokens": ""}
{"commit_tokens": ["fixed", "serialization", "of", "collect", "node"], "add_tokens": "} else { out . writeVInt ( 0 ) ;", "del_tokens": ""}
{"commit_tokens": ["Don", "t", "reference", "the", "enclosing", "type", "instance", "when", "it", "s", "not", "used", "(", "memory", "optimisation", ")"], "add_tokens": "static class Attachment implements Serializable", "del_tokens": "class Attachment implements Serializable"}
{"commit_tokens": ["Fix", "new", "camera", "restrictions", "(", "untested", ")"], "add_tokens": "return \" android . hardware . camera2 . impl . CameraDeviceImpl \" ;", "del_tokens": "return \" android . hardware . camera2 . impl . CameraDevice \" ;"}
{"commit_tokens": ["delete", "an", "unused", "flag", "in", "QueryableIndexSegment"], "add_tokens": "", "del_tokens": "private boolean nullStorage = false ;"}
{"commit_tokens": ["the", "new", "snack", "bar", "hide", "too", "quick", "if", "clear", "previous", "snacks", "."], "add_tokens": "removeCallbacks ( mHideRunnable ) ;", "del_tokens": ""}
{"commit_tokens": ["add", "return"], "add_tokens": "return \" \" ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "dead", "import"], "add_tokens": "", "del_tokens": "import water . DRemoteTask . DFuture ;"}
{"commit_tokens": ["Added", "Entity", ".", "remove", "(", ")", "which", "marks", "an", "entity", "for", "removal", "."], "add_tokens": "/ * * * Mark the entity ' s removal . * / public void remove ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Removed", "wrong", "import", "causing", "tests", "to", "fail", "."], "add_tokens": "", "del_tokens": "import org . apache . tools . ant . taskdefs . Sleep ;"}
{"commit_tokens": ["Handle", "BOOLEAN", "type", "in", "FieldSpec", "(", "#", "256", ")"], "add_tokens": "case BOOLEAN :", "del_tokens": ""}
{"commit_tokens": ["preserve", "generics", "parameters", "when", "create", "methods", "for", "parameters", "with", "default", "values"], "add_tokens": "newMethod . setGenericsTypes ( method . getGenericsTypes ( ) ) ;", "del_tokens": ""}
{"commit_tokens": ["automatically", "create", "outputDirectory"], "add_tokens": "outputDirectory . mkdirs ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Revert", "Fixed", "missing", "import"], "add_tokens": "", "del_tokens": "import buildcraft . core . inventory . StackHelper ;"}
{"commit_tokens": ["Accept", "PR", "#", "10", "without", "the", "additional", "whitespace"], "add_tokens": "\" file extension is neither ' js ' nor ' css ' . \" ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "unused", "imports", "."], "add_tokens": "", "del_tokens": "import java . lang . management . ManagementFactory ; import java . lang . management . ThreadMXBean ;"}
{"commit_tokens": ["initialize", "Boolean"], "add_tokens": "mBlockIsRead = false ;", "del_tokens": ""}
{"commit_tokens": ["TFJ", "-", "586", "define", "CursorSupport", "#", "START", "for", "the", "better", "coding", "experience"], "add_tokens": "long START = - 1L ;", "del_tokens": ""}
{"commit_tokens": ["Made", "FloatNode", "final"], "add_tokens": "public final class FloatNode extends NumericNode", "del_tokens": "public class FloatNode extends NumericNode"}
{"commit_tokens": ["LPS", "-", "10495", "Fix", "dead", "code"], "add_tokens": "if ( fileContentBag = = null ) {", "del_tokens": "if ( file = = null ) {"}
{"commit_tokens": ["add", "toString", "for", "Fields"], "add_tokens": "@ Override public String toString ( ) { return _fields . toString ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["French", "tagger", "now", "calls", "dontTagLowercaseWithUppercase", "(", ")", "."], "add_tokens": "dontTagLowercaseWithUppercase ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "typo", "in", "CFDefinition"], "add_tokens": "return staticColumns . values ( ) ;", "del_tokens": "return regularColumns . values ( ) ;"}
{"commit_tokens": ["Don", "t", "expand", "the", "SearchView", "if", "already", "expanded", "."], "add_tokens": "if ( mExpandedInActionView ) return ;", "del_tokens": ""}
{"commit_tokens": ["build", "#", "6"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "56271", "ConfigurationImpl", "clearCache", "is", "not", "resetting", "loaded", "_properties"], "add_tokens": "_properties = null ;", "del_tokens": ""}
{"commit_tokens": ["Also", "hide", "loading", "indicator", "on", "compile", "start"], "add_tokens": "PDFView . setLoadingVisible ( false ) ;", "del_tokens": ""}
{"commit_tokens": ["update", "the", "menu", "in", "the", "preview", "of", "the", "video"], "add_tokens": "invalidateOptionsMenu ( ) ;", "del_tokens": ""}
{"commit_tokens": ["provide", "precise", "diagnostic", "for", "rejected", "key"], "add_tokens": "", "del_tokens": "public static void deactivate ( ) { ourIsActivated = false ; }"}
{"commit_tokens": ["Update", "the", "footer", "indicator", "paint", "when", "footer", "color", "is", "set", "programmatically", "."], "add_tokens": "mPaintFooterIndicator . setColor ( footerColor ) ;", "del_tokens": ""}
{"commit_tokens": ["Allow", "restricting", "of", "Android", "again"], "add_tokens": "if ( uid < = 0 )", "del_tokens": "if ( uid < = 0 | | uid = = Process . SYSTEM_UID )"}
{"commit_tokens": ["dispose", "UI"], "add_tokens": "myMainPanel = null ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "DaggerGraph", "against", "updated", "snapshot"], "add_tokens": "return DaggerGraph . builder ( )", "del_tokens": "return Dagger_Graph . builder ( )"}
{"commit_tokens": ["Fixed", "typo", "in", "SASL", "name", "."], "add_tokens": "return \" DIGEST - MD5 \" ;", "del_tokens": "return \" CRAM - MD5 \" ;"}
{"commit_tokens": ["Flush", "asked", "once", "cache", "too"], "add_tokens": "synchronized ( mAskedOnceCache ) { mAskedOnceCache . clear ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["Call", "AudioTrack", ".", "flush", "(", ")", "before", "AudioTrack", ".", "release", "(", ")", "."], "add_tokens": "toRelease . flush ( ) ;", "del_tokens": ""}
{"commit_tokens": ["roles", "to", "become", "unmodifiableSet"], "add_tokens": "return Collections . unmodifiableSet ( roles ) ;", "del_tokens": "return roles ;"}
{"commit_tokens": ["Always", "call", "handleException", "rather", "than", "cb"], "add_tokens": "handleException ( e ) ;", "del_tokens": "cb . onLoadFailed ( e ) ;"}
{"commit_tokens": ["Fixed", "PMD", "violation", "(", "should", "also", "fix", "the", "build", ")"], "add_tokens": "fail ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixes", "caching", "plugin", "components", "reported", "by", "Marin", "Dzhigarov", "."], "add_tokens": "pluginInstances . put ( parent , p ) ;", "del_tokens": ""}
{"commit_tokens": ["ignore", "deleted", "files", "if", "they", "are", "unversioned", "."], "add_tokens": "? VcsDeleteType . IGNORE", "del_tokens": "? VcsDeleteType . SILENT"}
{"commit_tokens": ["Fix", "typo", "."], "add_tokens": "return ! responseFilters . isEmpty ( ) ;", "del_tokens": "return ! requestFilters . isEmpty ( ) ;"}
{"commit_tokens": ["fix", "socketio", "connect", "bug"], "add_tokens": "callback . onCompleted ( ex , ws ) ;", "del_tokens": "callback . onCompleted ( ex , null ) ;"}
{"commit_tokens": ["Remove", "an", "unused", "enum", "value", "in", "BuildRuleSuccess", ".", "Property", "."], "add_tokens": "", "del_tokens": "SHOULD_INITIALIZE_FROM_DISK_AFTER_BUILDING ,"}
{"commit_tokens": ["Set", "the", "token", "stream", "on", "the", "tree", "stream", "object", "so", "we", "can", "use", "the", "getSourceName", "(", ")", "method", "to", "get", "the", "current", "source", "file"], "add_tokens": "treeStream . setTokenStream ( tokens ) ;", "del_tokens": ""}
{"commit_tokens": ["Now", "closes", "ReadableByteChannel", "after", "it", "has", "been", "read", "."], "add_tokens": "channel . close ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "descriptor", "leak", "after", "accepting", "connections"], "add_tokens": "s . mFdCreatedInternally = true ;", "del_tokens": ""}
{"commit_tokens": ["add", "requestFocus", "(", ")", "to", "canvas", "when", "created"], "add_tokens": "canvas . requestFocus ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Do", "not", "finish", "WelcomeActivity", "when", "showing", "about", "info"], "add_tokens": "", "del_tokens": "finish ( ) ;"}
{"commit_tokens": ["fixed", "BackgroundAttribute", "bug", "."], "add_tokens": "private PrimitiveTypeUtils ( ) { }", "del_tokens": ""}
{"commit_tokens": ["Add", "the", "missing", "non", "-", "implemented", "method", "which", "is", "breaking", "trunk", "."], "add_tokens": "public boolean isDeprecated ( ) { return false ; }", "del_tokens": ""}
{"commit_tokens": ["Call", "moveQueueItemHelper", "instead", "of", "moveQueueItem"], "add_tokens": "moveQueueItemHelper ( context , from , to , broadcastUpdate ) ;", "del_tokens": "moveQueueItem ( context , from , to , broadcastUpdate ) ;"}
{"commit_tokens": ["added", "jacoco", "test", "coverage", "with", "the", "profile", "test", "-", "coverage", "and", "collected", "into", "the", "coverage", "-", "report", "module"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Removed", "PMetadata", "from", "opengl"], "add_tokens": "protected class ImageCache {", "del_tokens": "protected class ImageCache extends PMetadata {"}
{"commit_tokens": ["Include", "code", "when", "converting", "unknown", "causes", "to", "string"], "add_tokens": "return \" INVALID : \" + cause ;", "del_tokens": "return \" INVALID \" ;"}
{"commit_tokens": ["Fix", "sendConnection", "State", "intent", "api", "params", "."], "add_tokens": "newDeviceState , prevDeviceState ) ;", "del_tokens": "prevDeviceState , newDeviceState ) ;"}
{"commit_tokens": ["Added", "PyDocstringTest", "to", "all", "tests", "suite"], "add_tokens": "PyBlockEvaluatorTest . class , PyDocstringTest . class", "del_tokens": "PyBlockEvaluatorTest . class"}
{"commit_tokens": ["Tweak", "formatting", "."], "add_tokens": "private static enum StoreType { KEYSTORE , PEM }", "del_tokens": "private static enum StoreType { KEYSTORE , PEM } ;"}
{"commit_tokens": ["Add", "2", ".", "2", ".", "1", "to", "the", "version", "lookup", "table"], "add_tokens": "case V_2_2_1_ID : return V_2_2_1 ;", "del_tokens": ""}
{"commit_tokens": ["remove", "unnecessary", "line", "breaks"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Fixed", "tiny", "initialization", "issue", "with", "FileCopierUnitTest"], "add_tokens": "tempFolder . create ( ) ;", "del_tokens": ""}
{"commit_tokens": ["test", "was", "using", "incorrect", "target", "directory", "-", "noise", "in", "source", "tree"], "add_tokens": "config . setTargetDirectory ( dir ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "recursion", "issue", "with", "new", "special", "item", "entity", "code", "."], "add_tokens": "event . world . spawnEntityInWorld ( newEntity ) ;", "del_tokens": "event . world . spawnEntityInWorld ( entity ) ;"}
{"commit_tokens": ["Fix", "list", "navigation", "callbacks", "for", "ActionBarView"], "add_tokens": "mSpinner . setOnItemSelectedListener ( l ) ;", "del_tokens": ""}
{"commit_tokens": ["Add", "new", "line"], "add_tokens": "}", "del_tokens": "}"}
{"commit_tokens": ["Also", "hide", "format", "bar", "when", "canceling", "media", "selection", "."], "add_tokens": "if ( mFormatBar . getVisibility ( ) = = View . VISIBLE ) hideFormatBar ( ) ;", "del_tokens": ""}
{"commit_tokens": ["corrected", "a", "misuse", "."], "add_tokens": "parseAsStaticResourceAttribute ( illegalStaticResourceAttributeValue . value ) ;", "del_tokens": "parseAsValueModelAttribute ( illegalStaticResourceAttributeValue . value ) ;"}
{"commit_tokens": ["fixing", "broken", "tests", "once", "again"], "add_tokens": "da . close ( ) ;", "del_tokens": ""}
{"commit_tokens": ["dispose", "project", "message", "bus", "in", "lite", "tests"], "add_tokens": "myMessageBus . dispose ( ) ;", "del_tokens": ""}
{"commit_tokens": ["deleting", "unused", "field"], "add_tokens": "", "del_tokens": "private JLanguageTool langTool ;"}
{"commit_tokens": ["Disable", "RenderThread"], "add_tokens": "public static boolean sUseRenderThread = false ;", "del_tokens": "public static boolean sUseRenderThread = true ;"}
{"commit_tokens": ["ensure", "activity", "finish", "(", ")", "when", "you", "exit", "and", "lock"], "add_tokens": "finish ( ) ;", "del_tokens": ""}
{"commit_tokens": ["added", "missing", "license", "header"], "add_tokens": "/ * * Copyright ( c ) 2007 Mockito contributors * This program is made available under the terms of the MIT License . * /", "del_tokens": ""}
{"commit_tokens": ["Fix", "NPE", "when", "provider", "returns", "null", "cursor", "."], "add_tokens": "if ( cursor ! = null ) cursor . close ( ) ;", "del_tokens": "cursor . close ( ) ;"}
{"commit_tokens": ["GRAILS", "-", "6733", "-", "removed", "a", "redundant", "call", "to", "notify", "observers", "of", "an", "artefact", "change", "during", "change", "processing", "(", "the", "notification", "is", "made", "again", "later", ")", "."], "add_tokens": "", "del_tokens": "getManager ( ) . informObservers ( getName ( ) , event ) ;"}
{"commit_tokens": ["Fix", "global", "state"], "add_tokens": "rstate = new RState ( xAppInfo . getUid ( ) , mRestrictionName , null ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "hash", "code", "for", "method", "descriptor"], "add_tokens": "return ( mRestrictionName . hashCode ( ) ^ mMethodName . hashCode ( ) ) ;", "del_tokens": "return mMethodName . hashCode ( ) ;"}
{"commit_tokens": ["delete", "the", "scored", "frame", "but", "not", "the", "appended", "vec"], "add_tokens": "scored . remove ( \" actual \" ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "some", "quality", "flaws"], "add_tokens": "/ / already started in constructor", "del_tokens": ""}
{"commit_tokens": ["build", "number", "12"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["reset", "indexFiles", "when", "reloadiing", "Index", "lists"], "add_tokens": "indexFiles = null ;", "del_tokens": ""}
{"commit_tokens": ["Revert", "LPS", "-", "45166", "SF"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Check", "for", "APK", "tamper", "in", "HomeActivity", ".", "onResume", "(", ")", "fix", "#", "309"], "add_tokens": "Util . checkForTamper ( this , mTamperPromptEventListener ) ;", "del_tokens": ""}
{"commit_tokens": ["Very", "stupid", "coding", "mistake", "."], "add_tokens": "return first ;", "del_tokens": "return first ( ) ;"}
{"commit_tokens": ["remove", "debug", "flag"], "add_tokens": "public static final boolean DEBUG_ENABLED = false ;", "del_tokens": "public static final boolean DEBUG_ENABLED = true ;"}
{"commit_tokens": ["fixed", "test", "which", "randomly", "fail", "on", "slow", "CI", "server"], "add_tokens": ". convertBodyTo ( String . class )", "del_tokens": ""}
{"commit_tokens": ["Change", "the", "FilterCriteria", ".", "onRecallSelection", "(", ")", "to", "return", "the", "already", "assigned", "tag"], "add_tokens": "return mCurrentTag ;", "del_tokens": "ReaderTag tag = AppPrefs . getReaderTag ( ) ; return tag ;"}
{"commit_tokens": ["Don", "t", "rethrow", "RuntimeExceptions", "refs", "#", "292"], "add_tokens": "catch ( RuntimeException e ) { throw e ; }", "del_tokens": ""}
{"commit_tokens": ["Fix", "format", "."], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Remove", "unused", "code"], "add_tokens": "", "del_tokens": "void setHpackDecoder ( HpackDecoder hpackDecoder ) { this . hpackDecoder = hpackDecoder ; }"}
{"commit_tokens": ["add", "missing", "super", "call", "as", "spotted", "by", "nulano"], "add_tokens": "super . overheat ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "JDK5", "backwards", "compatibility", "issue"], "add_tokens": "return missingExceptionMessage = = null | | missingExceptionMessage . length ( ) = = 0 ;", "del_tokens": "return missingExceptionMessage = = null | | missingExceptionMessage . isEmpty ( ) ;"}
{"commit_tokens": ["Expose", "the", "classloader", "which", "the", "shell", "is", "using"], "add_tokens": "public GroovyClassLoader getClassLoader ( ) { return loader ; }", "del_tokens": ""}
{"commit_tokens": ["Added", "missing", "delay", "."], "add_tokens": "delay = 2 ;", "del_tokens": ""}
{"commit_tokens": ["Set", "toolClass", "of", "ItemWrench", "to", "wrench"], "add_tokens": "setHarvestLevel ( \" wrench \" , 0 ) ;", "del_tokens": ""}
{"commit_tokens": ["made", "grace", "period", "work", "for", "muc", "as", "well"], "add_tokens": "lastCarbonMessageReceived = SystemClock . elapsedRealtime ( ) ;", "del_tokens": ""}
{"commit_tokens": ["remove", "SO_LINGER"], "add_tokens": "", "del_tokens": "_socket . setSoLinger ( true , 0 ) ;"}
{"commit_tokens": ["Fix", "CollapsingToolbarLayout", "not", "invalidating", "text"], "add_tokens": "mTextToDraw = null ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "NPE", "in", "layoutlib", "."], "add_tokens": "", "del_tokens": "mContext = null ;"}
{"commit_tokens": ["Remove", "extraneous", "comment"], "add_tokens": "", "del_tokens": "/ / @ JsonDeserialize ( using )"}
{"commit_tokens": ["expanding", "properties", "fix", "(", "eg", "$", "FULLNAME", "$", ")"], "add_tokens": "LabelTextReplacingUtil . replaceText ( myPanel ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "getIntervalHistogram", "returning", "empty", "histogram"], "add_tokens": "getIntervalHistogramInto ( intervalHistogram ) ;", "del_tokens": "getIntervalHistogramInto ( new Histogram ( inactiveHistogram ) ) ;"}
{"commit_tokens": ["Use", "provided", "context", "directly"], "add_tokens": "mContext = context ;", "del_tokens": "mContext = context . getApplicationContext ( ) ;"}
{"commit_tokens": ["Remove", "redundant", "constructor", "."], "add_tokens": "", "del_tokens": "public MDCInterceptor ( ) { }"}
{"commit_tokens": ["Add", "watched", "field", "to", "AcvitiyItemBase", "(", "as", "used", "by", "user", "/", "friends", "in", "the"], "add_tokens": "public Date watched ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "unnecessary", "code"], "add_tokens": "", "del_tokens": "@ Override public void destroy ( ) { / / NOOP }"}
{"commit_tokens": ["Setting", "copiedSize", "to", "0", "when", "value", "is", "null"], "add_tokens": "} else { buffer . sizeCopied = 0 ;", "del_tokens": ""}
{"commit_tokens": ["redundant", "write", "action"], "add_tokens": "return false ;", "del_tokens": "return true ;"}
{"commit_tokens": ["Fix", "checkstyle", "problems", "with", "glusterfs", "module", "."], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Remove", "unused", "setter", "from", "HttpConfiguration", "."], "add_tokens": "", "del_tokens": "public void setRootPath ( String rootPath ) { this . rootPath = rootPath ; }"}
{"commit_tokens": ["Removed", "a", "redundant", "call", "to", "setDefaultButton"], "add_tokens": "", "del_tokens": "dialog . getRootPane ( ) . setDefaultButton ( okButton ) ;"}
{"commit_tokens": ["engines", "are", "standalone", "blocks"], "add_tokens": "@ Override public BuildingStage getBuildStage ( ) { return BuildingStage . STANDALONE ; }", "del_tokens": ""}
{"commit_tokens": ["Add", "HiveType", ".", "toString", "(", ")"], "add_tokens": "@ Override public String toString ( ) { return hiveTypeName ; }", "del_tokens": ""}
{"commit_tokens": ["update", "HttpUtils"], "add_tokens": "currRequestExpiry = defaultExpiry ;", "del_tokens": ""}
{"commit_tokens": ["Preventing", "leak"], "add_tokens": "", "del_tokens": "BluetoothLeUtils . checkAdapterStateOn ( mBluetoothAdapter ) ;"}
{"commit_tokens": ["remove", "space"], "add_tokens": "return warningExceptionTime ;", "del_tokens": "return warningExceptionTime ;"}
{"commit_tokens": ["fix", "error", "in", "docking", "station", "on", "chunk", "unload", "fixes", "#", "2898"], "add_tokens": "if ( robotTaking ( ) ! = null ) {", "del_tokens": "if ( isTaken ( ) ) {"}
{"commit_tokens": ["Also", "closes", "the", "executor", "containing", "the", "connections"], "add_tokens": "executor . shutdownNow ( ) ;", "del_tokens": ""}
{"commit_tokens": ["removed", "required", "flag", "for", "gemDirectory"], "add_tokens": "", "del_tokens": "* @ required"}
{"commit_tokens": ["Remove", "unneeded", "static", "qualifier", "in", "QuadTree", ".", "Item", "interface", "(", "thanks", "Cyril", ")"], "add_tokens": "public interface Item {", "del_tokens": "public static interface Item {"}
{"commit_tokens": ["Removed", "sleep", "from", "clickOnView", "(", ")", "as", "requested", "by", "issue", "-", "333"], "add_tokens": "", "del_tokens": "waiter . waitForView ( view , SMALLTIMEOUT ) ;"}
{"commit_tokens": ["Remove", "completed", "FIXME"], "add_tokens": "", "del_tokens": "/ / FIXME : pipe suppressibility info through to wiki docs"}
{"commit_tokens": ["Removed", "an", "unnecessary", "empty", "line"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Trim", "HardwareRenderer", "memory", "more", "frequently", "."], "add_tokens": "case ComponentCallbacks2 . TRIM_MEMORY_UI_HIDDEN : case ComponentCallbacks2 . TRIM_MEMORY_BACKGROUND :", "del_tokens": ""}
{"commit_tokens": ["Fixed", "crash", "when", "trying", "to", "rotate", "image", "when", "bitmap", "=", "=", "null", "."], "add_tokens": "if ( state instanceof Bundle & & mBitmap ! = null ) {", "del_tokens": "if ( state instanceof Bundle ) {"}
{"commit_tokens": ["Set", "size", "=", "0", "after", "MemoryCache", "clear"], "add_tokens": "size = 0 ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "issue", "when", "the", "last", "waypoint", "of", "a", "motion", "path", "was", "not", "triggering", "listeners"], "add_tokens": "setCurrentWayPoint ( path . getNbWayPoints ( ) - 1 ) ;", "del_tokens": ""}
{"commit_tokens": ["Make", "executeSingle", "limit", "to", "1"], "add_tokens": "limit ( 1 ) ;", "del_tokens": ""}
{"commit_tokens": ["updated", "minor", "mistake"], "add_tokens": "public class RealmTest extends AndroidTestCase {", "del_tokens": "public class ParameterizedTestExample extends AndroidTestCase {"}
{"commit_tokens": ["Switch", "WordIterator", "s", "BreakIterator", "to", "ICU4J"], "add_tokens": "import android . icu . text . BreakIterator ;", "del_tokens": "import java . text . BreakIterator ;"}
{"commit_tokens": ["remove", "duplicate", "annotation"], "add_tokens": "", "del_tokens": "@ Test"}
{"commit_tokens": ["The", "protocol", "class", "will", "register", "the", "socket", "with", "the", "poller", "for", "another", "read", "event"], "add_tokens": "", "del_tokens": "socket . getPoller ( ) . add ( socket ) ;"}
{"commit_tokens": ["make", "TextureAssetKey", "flipY", "option", "a", "proper", "bean", "property"], "add_tokens": "public void setFlipY ( boolean flipY ) { this . flipY = flipY ; }", "del_tokens": ""}
{"commit_tokens": ["Fixing", "up", "tests"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Fix", "spurious", "change"], "add_tokens": "}", "del_tokens": "} sh"}
{"commit_tokens": ["Fix", "/", "buildcraft", "not", "working", "in", "singleplayer"], "add_tokens": "event . registerServerCommand ( new CommandBuildCraft ( ) ) ;", "del_tokens": "CommandHandler commandManager = ( CommandHandler ) event . getServer ( ) . getCommandManager ( ) ; commandManager . registerCommand ( new CommandBuildCraft ( ) ) ;"}
{"commit_tokens": ["pin", "a", "toolwindow", "on", "pin", "button", "click", "in", "quick", "doc", "view"], "add_tokens": "myToolWindow . setAutoHide ( false ) ;", "del_tokens": ""}
{"commit_tokens": ["Revert", "previous", "fix"], "add_tokens": "", "del_tokens": "return ;"}
{"commit_tokens": ["Added", "debug", "assertions"], "add_tokens": "assert ! myDisposeCompleted & & ! myDisposed : \" Already disposed \" ;", "del_tokens": ""}
{"commit_tokens": ["use", "CONTENT_TYPE", "constant"], "add_tokens": "return CONTENT_TYPE ;", "del_tokens": "return \" application / json \" ;"}
{"commit_tokens": ["Remove", "debug", "printout"], "add_tokens": "} catch ( Throwable _ ) { }", "del_tokens": "} catch ( Throwable _ ) { _ . printStackTrace ( ) ; }"}
{"commit_tokens": ["Skip", "call", "log", "entries"], "add_tokens": "updateMaxSyncedDateCalllog ( getMaxSyncedDateCalllog ( ) ) ;", "del_tokens": ""}
{"commit_tokens": ["fixing", "some", "tests"], "add_tokens": "return isAvailableOnDataContext ( dataContext ) ;", "del_tokens": "return true ;"}
{"commit_tokens": ["made", "method", "default", "to", "slim", "the", "API"], "add_tokens": "Object getResultFor ( Invocation invocation ) throws Throwable {", "del_tokens": "public Object getResultFor ( Invocation invocation ) throws Throwable {"}
{"commit_tokens": ["IDEA", "-", "77239", "Cannot", "checkout", "project", "from", "github"], "add_tokens": "return myRepository . getChildText ( \" url \" ) + \" . git \" ;", "del_tokens": "return myRepository . getChildText ( \" url \" ) ;"}
{"commit_tokens": ["exclude", "the", "old", "ProtostuffJson", "from", "the", "benchmark", "."], "add_tokens": "", "del_tokens": "ProtostuffJson . register ( groups ) ;"}
{"commit_tokens": ["Check", "usage", "Object", ".", "wait", "(", ")", "in", "AbstractFailureDetector", "."], "add_tokens": "while ( ! isAvailable ( node ) )", "del_tokens": "if ( ! isAvailable ( node ) )"}
{"commit_tokens": ["ensuring", "id2", "follows", "id1"], "add_tokens": "twitterAPI2 . createFriendship ( id1 ) ;", "del_tokens": ""}
{"commit_tokens": ["assign", "success", "variable", "a", "value"], "add_tokens": "success = true ;", "del_tokens": ""}
{"commit_tokens": ["added", "HTTP", "500"], "add_tokens": "public static int SC_500_INTERNAL_SERVER_ERROR = 500 ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "checkstyle"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["corrected", "editor", "tab", "closing", "behaviour"], "add_tokens": "updateHistoryEntry ( event . getNewFile ( ) , true ) ;", "del_tokens": "updateHistoryEntry ( event . getOldFile ( ) , true ) ;"}
{"commit_tokens": ["Fix", "build"], "add_tokens": "", "del_tokens": "case DRIVER_HUNG_EVENT :"}
{"commit_tokens": ["Fix", "checkstyle"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["fixed", "typo", "in", "MultiTerrainLodControl", "causing", "terrains", "not", "to", "be", "removed"], "add_tokens": "removedTerrains . add ( tq ) ;", "del_tokens": "removedTerrains . remove ( tq ) ;"}
{"commit_tokens": ["assume", "allNodesAtLeast21", "until", "demonstrated", "otherwise", ";", "see", "CASSANDRA", "-", "7161"], "add_tokens": "private boolean allNodesAtLeast21 = true ;", "del_tokens": "private boolean allNodesAtLeast21 ;"}
{"commit_tokens": ["setIntegerPart", "(", "long", ")", "doesn", "t", "set", "ARG_INTEGER_PART", "."], "add_tokens": "return setIntegerPart ( String . valueOf ( integerPart ) ) ;", "del_tokens": "return setNumber ( String . valueOf ( integerPart ) ) ;"}
{"commit_tokens": ["Added", "TODO", "as", "a", "reminder", "to", "refactor", "/", "externalise", "an", "existing", "SQL", "template"], "add_tokens": "xx xxxxxxx xxxxx xxxxxxxxxxx xxxx xxx xxxxxx xx x xxxxxxxxxxx xxxx xxx xxx xxxxxx xx xxxxxxxxxx xxxxxxxxx xx xxxx xx", "del_tokens": ""}
{"commit_tokens": ["inject", "java"], "add_tokens": "@ Language ( \" JAVA \" )", "del_tokens": ""}
{"commit_tokens": ["Fix", "the", "build"], "add_tokens": "/ * *", "del_tokens": "/ *"}
{"commit_tokens": ["Fix", "typo"], "add_tokens": "throw new ServletException ( \" Oops . \" ) ;", "del_tokens": "throw new ServletException ( \" Opps . \" ) ;"}
{"commit_tokens": ["LPS", "-", "33739", "Fix", "typo"], "add_tokens": "* @ author Eudaldo Alonso", "del_tokens": "* @ author Eudaldo Alnso"}
{"commit_tokens": ["Set", "the", "connection", "channel", "in", "PaymentChannelServerListener"], "add_tokens": "ServerHandler . this . eventHandler . setConnectionChannel ( socketProtobufHandler ) ;", "del_tokens": ""}
{"commit_tokens": ["Bigger", "moving", "average", "range", "in", "importer"], "add_tokens": "return 500 ;", "del_tokens": "return 100 ;"}
{"commit_tokens": ["Add", "BlockWorkerTest", "unit", "test", "."], "add_tokens": "/ / TODO ( jiri ) : Write unit tests for untested public methods .", "del_tokens": ""}
{"commit_tokens": ["Cache", "extra", "for", "on", "demand", "choice"], "add_tokens": "result . extra = restriction . extra ;", "del_tokens": ""}
{"commit_tokens": ["fixed", "NPE", "in", "evaluate", "handler"], "add_tokens": "return DISABLED ;", "del_tokens": "return myEvaluateActionHandler ;"}
{"commit_tokens": ["Fix", "test"], "add_tokens": "atmosphereHandler . value . set ( new HashSet ( ) ) ;", "del_tokens": ""}
{"commit_tokens": ["Refactored", "constructor", "of", "AbstractSectionableItem", "that", "now", "accepts", "the", "IHeader", "item"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["Fix", "crash", "if", "flagging", "episodes", "."], "add_tokens": "mOnFlagListener = flagListener ;", "del_tokens": ""}
{"commit_tokens": ["Annotate", "ignored", "test", "case", "with", "the", "jira", "ticket", "number"], "add_tokens": "/ / TACHYON - 825", "del_tokens": ""}
{"commit_tokens": ["Make", "EntityJoinWorldEvent", "Cancelable", "properly"], "add_tokens": "import net . minecraftforge . event . Cancelable ; @ Cancelable", "del_tokens": ""}
{"commit_tokens": ["Add", "ability", "to", "get", "device", "by", "address"], "add_tokens": "public BluetoothDevice getRemoteDevice ( String address ) { return mAdapter . getRemoteDevice ( address ) ; }", "del_tokens": ""}
{"commit_tokens": ["Fix", "ANR", "in", "print", "spooler", "."], "add_tokens": "mFileProvider . releaseFile ( ) ;", "del_tokens": ""}
{"commit_tokens": ["invalidate", "the", "webview", "after", "pressing", "the", "IME", "next", "button"], "add_tokens": "mWebView . invalidate ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Create", "implicit", "sort", "remembering", "setting2", "(", "minor", "indentation", "error", ")"], "add_tokens": "reSort ( ) ;", "del_tokens": "reSort ( ) ;"}
{"commit_tokens": ["Remove", "some", "trailing", "whitespace", "."], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Added", "commitChanges", "before", "other", "return", "statement", "of", "annotateExternally", "(", ")"], "add_tokens": "commitChanges ( xmlFile ) ;", "del_tokens": ""}
{"commit_tokens": ["removed", "a", "unused", "field"], "add_tokens": "", "del_tokens": "private static Contact testerAgentContact = null ;"}
{"commit_tokens": ["remove", "trivial", "javadoc"], "add_tokens": "", "del_tokens": "/ * * * Git \" fetch \" action * /"}
{"commit_tokens": ["Don", "t", "request", "network", "scores", "before", "boot", "completes", "."], "add_tokens": "intent . setFlags ( Intent . FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "-", "text", "for", "POI", "on", "map"], "add_tokens": "mapTextLayer . putData ( this , objects ) ;", "del_tokens": "/ / mapTextLayer . putData ( this , objects ) ;"}
{"commit_tokens": ["Added", "SparkApplication", ".", "destroy", "(", ")", "Fixes", "#", "151"], "add_tokens": "default void destroy ( ) { }", "del_tokens": "void destroy ( ) ;"}
{"commit_tokens": ["Fix", "bug", "where", "LoaderManager", "instances", "were", "not", "being", "removed", "."], "add_tokens": "\" did not call through to super . onDetach ( ) \" ) ; f . mActivity . mAllLoaderManagers . remove ( f . mIndex ) ;", "del_tokens": ""}
{"commit_tokens": ["Adding", "method", "to", "return", "raw", "message", "object", "."], "add_tokens": "@ JsonIgnore public Message getRawMessage ( ) { return message ; }", "del_tokens": ""}
{"commit_tokens": ["Fix", "memory", "leak", "(", "also", "delete", "the", "best", "model", ")", "."], "add_tokens": "mymodel . delete_best_model ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "NPE", "in", "layoutlib", "."], "add_tokens": "", "del_tokens": "mContext = null ;"}
{"commit_tokens": ["fixed", "NPE", "when", "setFrameTag", "(", ")", "is", "called", "before", "setApkFile", "(", ")", "."], "add_tokens": "if ( mResTable ! = null ) {", "del_tokens": "if ( hasResources ( ) ) {"}
{"commit_tokens": ["If", "we", "have", "a", "cache", "-", "miss", "in", "repository", "loading", "return", "a", "deep", "copy"], "add_tokens": "return DeepCopier . copy ( model ) ;", "del_tokens": "return model ;"}
{"commit_tokens": ["disable", "reloading", "for", "scripts", "with", "dates", "in", "the", "future"], "add_tokens": "if ( lastMod > System . currentTimeMillis ( ) ) return false ;", "del_tokens": ""}
{"commit_tokens": ["Updated", "version"], "add_tokens": "private static final String VERSION = \" 0 . 2 . 1 \" ;", "del_tokens": "private static final String VERSION = \" 0 . 2 . 0 \" ;"}
{"commit_tokens": ["remove", "repeat", "lefover", ".", ".", "."], "add_tokens": "", "del_tokens": "@ Repeat ( iterations = 1000 )"}
{"commit_tokens": ["Fix", "map", "in", "V2", "sourcemap", "due", "to", "bad", "entry", "in", "base64", "char", "map", "."], "add_tokens": "\" abcdefghijklmnopqrstuvwxyz \" +", "del_tokens": "\" abcdefghijklmnopqrstuvwzyz \" +"}
{"commit_tokens": ["Fix", "a", "checkstyle", "error"], "add_tokens": "}", "del_tokens": "}"}
{"commit_tokens": ["Refactored", "Usecase"], "add_tokens": "void execute ( ) ;", "del_tokens": "public void execute ( ) ;"}
{"commit_tokens": ["Call", "super", "method", "to", "prevent", "StackOverflowException", "."], "add_tokens": "return super . format ( bytes ) ;", "del_tokens": "return format ( bytes ) ;"}
{"commit_tokens": ["Remove", "deprecated", "warnings"], "add_tokens": "@ SuppressWarnings ( \" deprecation \" )", "del_tokens": ""}
{"commit_tokens": ["Fix", "a", "comment"], "add_tokens": "/ / - - - Data change notifications", "del_tokens": "/ / - - - Uri notification"}
{"commit_tokens": ["Fix", "variable", "visibility", "issue"], "add_tokens": "public final String keyspace ;", "del_tokens": "private final String keyspace ;"}
{"commit_tokens": ["Fix", "doc", "breakage"], "add_tokens": "import android . view . MenuItem . OnActionExpandListener ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "JPA", "tests"], "add_tokens": "@ NoBatooJPA", "del_tokens": ""}
{"commit_tokens": ["disable", "tool"], "add_tokens": "} else { disableTool ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Allow", "Exceptions", "to", "propagate", "out", "of", "fold", "tasks", "CLJ", "-", "1058"], "add_tokens": "throw Util . sneakyThrow ( e ) ;", "del_tokens": "/ / aargh"}
{"commit_tokens": ["throw", "UnsupportedOperationException", "on", "newly", "added", "generateGraph", "(", "String", ")", "in", "blueprints", "test", "."], "add_tokens": "/ / TODO :", "del_tokens": ""}
{"commit_tokens": ["Added", "missing", "return", "in", "the", "example"], "add_tokens": "return ;", "del_tokens": ""}
{"commit_tokens": ["Removed", "unused", "code"], "add_tokens": "", "del_tokens": "public TourInformation getTour ( ) { return tour ; }"}
{"commit_tokens": ["Reset", "note", "timestamp", "when", "a", "change", "comes", "in", "for", "a", "note", "."], "add_tokens": "mTimestamp = 0 ;", "del_tokens": ""}
{"commit_tokens": ["don", "t", "stop", "processing", "after", "first", "dependency", "was", "found", "(", "IDEADEV", "-", "29885", ")"], "add_tokens": "", "del_tokens": "return false ;"}
{"commit_tokens": ["Don", "t", "force", "all", "views", "to", "be", "asking", "for", "lights", "out", "just", "because", "somebody", "did", "."], "add_tokens": "", "del_tokens": "mSystemUiVisibility = visibility ;"}
{"commit_tokens": ["Fixed", "tab", "indent"], "add_tokens": "break ;", "del_tokens": "break ;"}
{"commit_tokens": ["Suppress", "a", "warning", "."], "add_tokens": "@ SuppressWarnings ( \" fallthrough \" )", "del_tokens": ""}
{"commit_tokens": ["Remove", "todo", "for", "bad", "idea"], "add_tokens": "", "del_tokens": "/ / XXX Use host in name"}
{"commit_tokens": ["deleting", "unused", "import"], "add_tokens": "", "del_tokens": "import java . io . File ;"}
{"commit_tokens": ["LPS", "-", "34662", "Add", "@", "Override"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["Shorten", "control", "showing", "phase"], "add_tokens": "private static final int DELAY = 2500 ;", "del_tokens": "private static final int DELAY = 5000 ;"}
{"commit_tokens": ["Delete", "help", "button", "from", "postfix", "completion", "configurable"], "add_tokens": "return null ;", "del_tokens": "return getId ( ) ;"}
{"commit_tokens": ["Remove", "a", "TODO", "that", "-", "on", "reflection", "-", "is", "not", "necessary", "."], "add_tokens": "", "del_tokens": "/ / TODO : Ensure write buffer is > = header buffer size"}
{"commit_tokens": ["Fix", "build"], "add_tokens": "return ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "NPE", "added", "null", "check", "in", "Html2Text", "."], "add_tokens": "if ( html = = null ) return null ;", "del_tokens": ""}
{"commit_tokens": ["mention", "Django", "in", "module", "type", "description"], "add_tokens": "return \" Provides facilities for developing Python and Django applications \" ;", "del_tokens": "return \" Provides facilities for developing Python applications \" ;"}
{"commit_tokens": ["Add", "missing", "@", "Override", "to", "method", "addContextPanelFactory", "(", ")"], "add_tokens": "@ Override public void addContextPanelFactory ( ContextPanelFactory cpf ) {", "del_tokens": "public void addContextPanelFactory ( ContextPanelFactory cpf ) {"}
{"commit_tokens": ["Revert", "inappropriate", "fix", "(", "PY", "-", "20684", ")"], "add_tokens": "private int myIpythonInputPromptCount = 1 ;", "del_tokens": "private int myIpythonInputPromptCount = 0 ;"}
{"commit_tokens": ["Fix", "crash", "in", "bug", "4259574"], "add_tokens": "} catch ( RuntimeException e ) { processException ( \" updateMetaData \" , e ) ;", "del_tokens": ""}
{"commit_tokens": ["Prevent", "IOException", "suppressing", "at", "the", "end", "of", "file", "copying"], "add_tokens": "os . flush ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "NPE"], "add_tokens": "logMapDataWarn = log ;", "del_tokens": "log = logMapDataWarn ;"}
{"commit_tokens": ["Fix", "issue", "with", "state", "reset"], "add_tokens": "this . leftOver = 0 ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "build", "after", "checkThread", "fix", "merge", "to", "master"], "add_tokens": "", "del_tokens": "checkThread ( ) ;"}
{"commit_tokens": ["Fixed", "bug", "in", "org", ".", "parboiled", ".", "common", ".", "Reference"], "add_tokens": "return value = = null ;", "del_tokens": "return value ! = null ;"}
{"commit_tokens": ["Speed", "up", "user", "-", "switching", "wallpaper", "changes"], "add_tokens": "", "del_tokens": "mWallpaperManager . forgetLoadedWallpaper ( ) ; / / force reload"}
{"commit_tokens": ["removed", "api", "namespace", "and", "updated", "to", "use", "cordovaPlugin", "for", "android"], "add_tokens": "public class ConnectPlugin extends CordovaPlugin {", "del_tokens": "public class ConnectPlugin extends Plugin {"}
{"commit_tokens": ["Corrected", "the", "package", "name", "."], "add_tokens": "package com . jayway . android . robotium . solo ;", "del_tokens": "package com . jayway . test ;"}
{"commit_tokens": ["Increment", "of", "invalid", "packets", "counter", "needs", "to", "be", "concurrent", "because", "it", "is", "used", "by", "both", "sender", "and", "receiver", "threads", "."], "add_tokens": "invalidPackets . increment ( ) ;", "del_tokens": "invalidPackets . orderedIncrement ( ) ;"}
{"commit_tokens": ["handle", "empty", "preview", "appearance", "correctly", "."], "add_tokens": "repaint ( ) ;", "del_tokens": ""}
{"commit_tokens": ["dispose", "previous", "root", "model", "when", "changing", "to", "a", "new", "one", "without", "events"], "add_tokens": "myRootModel . dispose ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "extraneous", "semicolon", "."], "add_tokens": "}", "del_tokens": "} ;"}
{"commit_tokens": ["Revert", "Test", "failing", "build"], "add_tokens": "", "del_tokens": "filbethwetrmnhino"}
{"commit_tokens": ["setTransformationMethod", "should", "reset", "mTextDir"], "add_tokens": "/ / PasswordTransformationMethod always have LTR text direction heuristics returned by / / getTextDirectionHeuristic , needs reset mTextDir = getTextDirectionHeuristic ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "PhoneAccount", "parceling", "(", "1", "/", "2", ")"], "add_tokens": "out . writeInt ( 1 ) ;", "del_tokens": ""}
{"commit_tokens": ["Do", "not", "send", "flush", "packet", "if", "explicit", "is", "false"], "add_tokens": "if ( explicit & & ! finished ) {", "del_tokens": "if ( ! finished ) {"}
{"commit_tokens": ["Remove", "wrong", "import", "."], "add_tokens": "", "del_tokens": "import org . hibernate . validator . cfg . defs . GenericConstraintDef ;"}
{"commit_tokens": ["help", "topics", "for", "VCS", "configurables", "(", "IDEADEV", "-", "33672", ")"], "add_tokens": "return \" project . propVCSSupport . VCSs . Git \" ;", "del_tokens": "return null ;"}
{"commit_tokens": ["Returning", "proper", "type", "for", "config", "setting", "."], "add_tokens": "public int getUserPasswordBCryptSaltSize ( ) {", "del_tokens": "public Integer getUserPasswordBCryptSaltSize ( ) {"}
{"commit_tokens": ["Closes", "the", "initial", "add", "account", "window", "if", "a", "create", "account", "form", "is", "loaded", "."], "add_tokens": "dispose ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Restore", "permission", "check", "for", "mic", "muting"], "add_tokens": "if ( ! checkAudioSettingsPermission ( \" setMicrophoneMute ( ) \" ) ) { return ; }", "del_tokens": ""}
{"commit_tokens": ["Fixed", "bug", "with", "blog", "preview", "that", "prevented", "the", "progress", "spinner", "from", "appearing", "at", "the", "bottom", "of", "the", "screen", "when", "loading", "more", "posts", "."], "add_tokens": "mProgress . bringToFront ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "Car", "audio", "class", "from", "auto", "pairing", "."], "add_tokens": "", "del_tokens": "case BluetoothClass . Device . AUDIO_VIDEO_CAR_AUDIO :"}
{"commit_tokens": ["Missed", "a", "case", "to", "resumeUpdatePicture", "."], "add_tokens": "WebViewCore . resumeUpdatePicture ( mWebViewCore ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "checkstyle"], "add_tokens": "", "del_tokens": "/ *"}
{"commit_tokens": ["Made", "CuboidRegion", "(", "world", ".", ".", ".", ")", "constructor", "clamp", "to", "world", "."], "add_tokens": "recalculate ( ) ;", "del_tokens": ""}
{"commit_tokens": ["add", "an", "accessor", "for", "the", "executor", "service"], "add_tokens": "public static ExecutorService getExecutorService ( ) { return es ; }", "del_tokens": ""}
{"commit_tokens": ["Fix", "memory", "leak", "in", "lock", "screen"], "add_tokens": "mUpdateMonitor . removeCallback ( this ) ;", "del_tokens": ""}
{"commit_tokens": ["Rewinding", "NettyResponse", "s", "BodyPart", "ByteBuffer"], "add_tokens": "target . flip ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixing", "the", "generation", "of", "constructor", "annotations", "by", "using", "the", "element", "type", "CONSTRUCTOR", "instead", "of", "METHOD", "."], "add_tokens": "ElementType . CONSTRUCTOR ,", "del_tokens": "ElementType . METHOD ,"}
{"commit_tokens": ["Fix", "NPE"], "add_tokens": "protected OsmPoint [ ] toUpload = new OsmPoint [ 0 ] ;", "del_tokens": "protected OsmPoint [ ] toUpload ;"}
{"commit_tokens": ["Fix", "XHTMLText", ".", "appendBrTag", "(", ")"], "add_tokens": "text . emptyElement ( BR ) ;", "del_tokens": "text . closeElement ( BR ) ;"}
{"commit_tokens": ["Fix", "npe", "in", "getCacheTotalSize", "."], "add_tokens": "if ( mCacheDatabase = = null ) { return 0 ; }", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "54970", "removed", "unnecessary", "return"], "add_tokens": "", "del_tokens": "return ;"}
{"commit_tokens": ["Fix", "MediaSessionCompat", "adjustVolume", "crash", "pre", "-", "API", "21"], "add_tokens": "mAudioManager . adjustStreamVolume ( mLocalStream , direction , flags ) ;", "del_tokens": "mAudioManager . adjustStreamVolume ( direction , mLocalStream , flags ) ;"}
{"commit_tokens": ["enable", "Helpshift", "as", "default"], "add_tokens": "return true ;", "del_tokens": "return false ;"}
{"commit_tokens": ["improved", "handling", "for", "Droid", "Incredible", "2"], "add_tokens": "public int getMaxPictureHeight ( ) { return ( 1952 ) ; }", "del_tokens": ""}
{"commit_tokens": ["Add", "the", "isVisible", "(", ")", "getter"], "add_tokens": "public boolean isVisible ( ) { return mVisible ; }", "del_tokens": ""}
{"commit_tokens": ["LRQA", "-", "14936", "Move", "validations", "out", "of", "GetterUtil"], "add_tokens": "", "del_tokens": "PoshiRunnerValidation . validate ( rootElement , filePath ) ;"}
{"commit_tokens": ["Making", "value", "in", "circular", "queue", "0", "before", "updating", "position"], "add_tokens": "/ / first reset the value to 0 at next counter location . counter . set ( ( pos + 1 ) % GRANULARITY , 0 ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "empty", "line", "."], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["add", "@", "see"], "add_tokens": "* @ see NonNls", "del_tokens": ""}
{"commit_tokens": ["put", "back", "RingBufferDescriptor"], "add_tokens": "}", "del_tokens": "}"}
{"commit_tokens": ["Cluster", "state", "equals", "and", "node", "names"], "add_tokens": "if ( nodeA . isEqualState ( nodeB ) = = false ) {", "del_tokens": "if ( nodeA . getZoneId ( ) ! = nodeB . getZoneId ( ) ) {"}
{"commit_tokens": ["LPS", "-", "57487", "opens", "_manageServiceTrackerMap"], "add_tokens": "_manageServiceTrackerMap . open ( ) ;", "del_tokens": ""}
{"commit_tokens": ["remove", "conf", "from", "subclass", "of", "mongosplitter", "since", "it", "is", "already", "defined", "in", "superclass", "."], "add_tokens": "", "del_tokens": "protected Configuration conf ;"}
{"commit_tokens": ["Set", "ActivityInfo", ".", "resizeMode", "to", "RESIZE_MODE_RESIZEABLE", "by", "default"], "add_tokens": "public int resizeMode = RESIZE_MODE_RESIZEABLE ;", "del_tokens": "public int resizeMode ;"}
{"commit_tokens": ["OpenGL", "GLSurfaceView", "apps", "don", "t", "draw", "status", "bar", "drop", "shadow", "correctly"], "add_tokens": "requestLayout ( ) ;", "del_tokens": ""}
{"commit_tokens": ["remove", "uneccessary", "whitespace", "."], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "47852", "add", "override"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["fixed", "possible", "IllegalStateException"], "add_tokens": "( ( LibraryAdapter ) getListAdapter ( ) ) . notifyDataSetChanged ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Upgrade", "release", "name"], "add_tokens": "static String codeName = \" Spurgeon \" ;", "del_tokens": "static String codeName = \" Owen \" ;"}
{"commit_tokens": ["Fix", "the", "build"], "add_tokens": "/ * * * @ hide * /", "del_tokens": ""}
{"commit_tokens": ["Return", "this", "instead", "of", "null", "in", "TimeoutStream", "#", "resume"], "add_tokens": "return this ;", "del_tokens": "return null ;"}
{"commit_tokens": ["refactor", "find", "state", "and", "scrolling"], "add_tokens": "/ * *", "del_tokens": "/ *"}
{"commit_tokens": ["invalidate", "menu", "after", "backend", "connection", "."], "add_tokens": "invalidateOptionsMenu ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Don", "t", "destroy", "BaseObject3D", ".", "mChildren", "reference"], "add_tokens": "", "del_tokens": "mChildren = null ;"}
{"commit_tokens": ["Should", "reset", "visibleLimit", "on", "clear", "messages", "."], "add_tokens": "setVisibleLimit ( mAccount . getDisplayCount ( ) ) ;", "del_tokens": ""}
{"commit_tokens": ["JETTY", "-", "1331", "remove", "extra", "debug", "print"], "add_tokens": "", "del_tokens": "e . printStackTrace ( ) ;"}
{"commit_tokens": ["Ignore", "test", "with", "fixed", "port"], "add_tokens": "@ Ignore / / collides on ci server", "del_tokens": ""}
{"commit_tokens": ["Suppress", "some", "deprecation", "warnings"], "add_tokens": "@ SuppressWarnings ( \" deprecation \" )", "del_tokens": ""}
{"commit_tokens": ["Fix", "the", "missing", "break", "statement", "."], "add_tokens": "break ;", "del_tokens": ""}
{"commit_tokens": ["Removed", "an", "extraneous", "Log", "statement"], "add_tokens": "", "del_tokens": "Log . d ( \" debug \" , \" - - > viewportY \" + viewPortY ) ;"}
{"commit_tokens": ["Remove", "useless", "assignment", "."], "add_tokens": "", "del_tokens": "mSavedListState = null ;"}
{"commit_tokens": ["fix", "the", "architect", "table", "sometimes", "modifiying", "the", "world", "when", "creating", "blueprints", "fixes", "#", "2424"], "add_tokens": "tileNBT = ( NBTTagCompound ) tileNBT . copy ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Don", "t", "clear", "Global", "Proxy", "on", "boot", "."], "add_tokens": "", "del_tokens": "} else { setGlobalProxy ( null ) ;"}
{"commit_tokens": ["LPS", "-", "17841", "Fix", "source", "formatting", "error"], "add_tokens": "else { actionIdsLong | = resourcePermission . getActionIds ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["Reinstate", "deleted", "@", "author", "tag"], "add_tokens": "* @ author Sam Brannen", "del_tokens": ""}
{"commit_tokens": ["Do", "not", "perform", "forceVolumeControlStream", "in", "master", "volume", "mode"], "add_tokens": "if ( mUseMasterVolume ) { return ; }", "del_tokens": ""}
{"commit_tokens": ["Add", "callback", "for", "add", "(", "Android", ")"], "add_tokens": "command . success ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "broken", "constructor", "."], "add_tokens": "", "del_tokens": "public VoldemortConfig ( ) { this ( new Props ( ) ) ; }"}
{"commit_tokens": ["undo", "pressed", "animation", "when", "losing", "focus"], "add_tokens": "mStylist . onAnimateItemPressed ( avh . mStylistViewHolder , false ) ;", "del_tokens": ""}
{"commit_tokens": ["help", "ID", "(", "PY", "-", "4116", ")"], "add_tokens": "@ Override public String getHelpID ( PsiElement element ) { return \" python . reference . rename \" ; }", "del_tokens": ""}
{"commit_tokens": ["Added", "TODO"], "add_tokens": "/ / TODO : replace fest - assertions with javaslang . Assertions using Match API in a future release of Javaslang", "del_tokens": ""}
{"commit_tokens": ["replaced", "print", "with", "logging"], "add_tokens": "LOG . error ( e ) ;", "del_tokens": "e . printStackTrace ( ) ;"}
{"commit_tokens": ["change", "help", "ID", "(", "IDEADEV", "-", "22220", ")"], "add_tokens": "@ NonNls String COMPILER = \" reference . toolWindows . messages \" ;", "del_tokens": "@ NonNls String COMPILER = \" compiling \" ;"}
{"commit_tokens": ["add", "new", "renderer", "to", "the", "top", "of", "the", "renderers", "list"], "add_tokens": "myRepresentationNodes . add ( 0 , renderer ) ;", "del_tokens": "myRepresentationNodes . add ( renderer ) ;"}
{"commit_tokens": ["Catch", "all", "errors", "preventing", "stopping", "processing", "messages", "."], "add_tokens": "catch ( Throwable ex )", "del_tokens": "catch ( Exception ex )"}
{"commit_tokens": ["removed", "empty", "migrate", "call", "in", "sample", "preference"], "add_tokens": "", "del_tokens": "migrate ( ) ;"}
{"commit_tokens": ["make", "Preconditions", "package", "private"], "add_tokens": "final class Preconditions {", "del_tokens": "public final class Preconditions {"}
{"commit_tokens": ["Changed", "signature", "of", "ODatabaseThreadLocalFactory", "due", "to", "obvious", "implementation", "name", "problems", "."], "add_tokens": "public ODatabaseRecord getThreadDatabase ( ) ;", "del_tokens": "public ODatabaseRecord getDb ( ) ;"}
{"commit_tokens": ["Added", "an", "empty", "line", "."], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Reversing", "immediately", "after", "starting", "animator", "ends", "it"], "add_tokens": "} else if ( mStarted ) { end ( ) ;", "del_tokens": ""}
{"commit_tokens": ["comment", "broken", "test", "+", "getting", "project"], "add_tokens": "public Project getProject ( ) { return myProject ; }", "del_tokens": ""}
{"commit_tokens": ["add", "function", "with", "zero", "arguments"], "add_tokens": "public interface Function0 < R > { R run ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "38542", "enabled", "deep", "serialization", "so", "that", "Map", "values", "are", "properly", "serialized"], "add_tokens": "return jsonSerializer . serializeDeep ( returnObj ) ;", "del_tokens": "return jsonSerializer . serialize ( returnObj ) ;"}
{"commit_tokens": ["Don", "t", "throw", "exception", "if", "daemon", "isn", "t", "running", "just", "return", "false", "for", "isRPCServerRunning", "(", ")"], "add_tokens": "return false ;", "del_tokens": "throw new IllegalStateException ( \" No configured RPC daemon \" ) ;"}
{"commit_tokens": ["Make", "the", "inclusion", "strategy", "for", "deps", "generation", "public"], "add_tokens": "public static enum InclusionStrategy {", "del_tokens": "enum InclusionStrategy {"}
{"commit_tokens": ["to", "java", "1", ".", "5"], "add_tokens": "Vector < point > point_list = new Vector < point > ( ) ;", "del_tokens": "Vector point_list = new Vector ( ) ;"}
{"commit_tokens": ["The", "orthographic", "camera", "had", "a", "-", "z", "default", "value", "."], "add_tokens": "setZ ( 4 . 0f ) ;", "del_tokens": "setZ ( - 4 . 0f ) ;"}
{"commit_tokens": ["collect", "statistics", "from", "created", "field", "types", "as", "well", "as", "variables"], "add_tokens": "myTypeSelectorManager . typeSelected ( getFieldType ( ) ) ;", "del_tokens": ""}
{"commit_tokens": ["Removing", "trailing", "comma", "in", "initializer", ";", "fails", "on", "some", "javac", "versions"], "add_tokens": "FOCUSABLES_TOUCH_MODE", "del_tokens": "FOCUSABLES_TOUCH_MODE ,"}
{"commit_tokens": ["LPS", "-", "3461", "read", "long", "groupId", "as", "long", "instead", "of", "string", "otherwise", "it", "will", "break", "in", "JPA"], "add_tokens": "}", "del_tokens": "}"}
{"commit_tokens": ["missing", "method", "from", "desktop", "version"], "add_tokens": "public void setSubsetting ( ) { subsetting = true ; }", "del_tokens": ""}
{"commit_tokens": ["Added", "a", "nls"], "add_tokens": "@ SuppressWarnings ( \" nls \" )", "del_tokens": ""}
{"commit_tokens": ["Added", "empty", "line"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Add", "mnemonic", "to", "Delete", "button", "in", "Branch", "Is", "Not", "Fully", "Merge", "dialog", "appearing", "on", "branch", "deletion", "."], "add_tokens": "setOKButtonMnemonic ( ' D ' ) ;", "del_tokens": ""}
{"commit_tokens": ["Overload", "Methods", "Declaration", "Order", "Check", "compilable", "UT", "input"], "add_tokens": "", "del_tokens": "import test . OverloadInput ;"}
{"commit_tokens": ["Removed", "extra", "latch", "countdown", "that", "can", "caused", "non", "deterministic", "test", "failures"], "add_tokens": "", "del_tokens": "regLatch . countDown ( ) ;"}
{"commit_tokens": ["LPS", "-", "35992", "Fix", "minor", "warning"], "add_tokens": "return ServiceMonitorAdvice . isActive ( ) ;", "del_tokens": "return _serviceMonitorAdvice . isActive ( ) ;"}
{"commit_tokens": ["fix", "some", "bug"], "add_tokens": "t . recycle ( ) ;", "del_tokens": ""}
{"commit_tokens": ["reduce", "log", "severity", "(", "no", "such", "field", "in", "JDK6", ")"], "add_tokens": "LOG . info ( e ) ;", "del_tokens": "LOG . error ( e ) ;"}
{"commit_tokens": ["Fix", "test", "name", "inacuraccy", "."], "add_tokens": "public void testReloadUpdatesListObjects ( ) {", "del_tokens": "public void testReloadAllUpdatesListObjects ( ) {"}
{"commit_tokens": ["Fix", "comment"], "add_tokens": "* Main method and entry point when starting Tomcat via the provided * scripts .", "del_tokens": "* Main method , used for testing only ."}
{"commit_tokens": ["LPS", "-", "55518", "Fix", "warning"], "add_tokens": "", "del_tokens": "@ SuppressWarnings ( \" unused \" )"}
{"commit_tokens": ["Fix", "comments"], "add_tokens": "", "del_tokens": "/ * * Remove redundant initialization * /"}
{"commit_tokens": ["Fix", "comment"], "add_tokens": "* These methods are intended to be overridden to provide custom implementations .", "del_tokens": "* These methods are intended to be overriden to provide DSE specific implementations"}
{"commit_tokens": ["missing", "break"], "add_tokens": "break ;", "del_tokens": ""}
{"commit_tokens": ["add", "todo"], "add_tokens": "/ / todo : delete after proper formatter implementation", "del_tokens": ""}
{"commit_tokens": ["Fix", "the", "build", "."], "add_tokens": "", "del_tokens": "/ / These are protected with a read permission private static final String [ ] READ_PROFILE_PROTECTED_SETTINGS = MIGRATE_SETTINGS_PER_USER ;"}
{"commit_tokens": ["Properly", "handle", "quick", "switch", "between", "Home", "button", "and", "Gallery", "app"], "add_tokens": "if ( visible & & mSurface . isValid ( ) ) {", "del_tokens": "if ( visible ) {"}
{"commit_tokens": ["Fix", "an", "issue", "with", "missing", "parameter", "annotations", "in", "methods", "without", "a", "body"], "add_tokens": "writeParameters ( writer , codeItem , parameterAnnotations ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixing", "up", "tests"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Fix", "copy", "/", "paste", "error"], "add_tokens": "return Thread . currentThread ( ) . getContextClassLoader ( ) ;", "del_tokens": "Thread . currentThread ( ) . getContextClassLoader ( ) ; return null ;"}
{"commit_tokens": ["added", "use", "-", "idea", "-", "classpath"], "add_tokens": "GenericAttributeValue < Boolean > getUseIdeaClassloader ( ) ; @ NotNull", "del_tokens": ""}
{"commit_tokens": ["Remove", "redundant", "modifier"], "add_tokens": "boolean createNativeQueryTyped ( ) ;", "del_tokens": "public boolean createNativeQueryTyped ( ) ;"}
{"commit_tokens": ["Removed", "debug", "logging", "added", "with", "r1061929", "."], "add_tokens": "", "del_tokens": "e . printStackTrace ( ) ;"}
{"commit_tokens": ["Fix", "test", "resource", "number", "."], "add_tokens": "public static final int animation_list = 0x10701 ;", "del_tokens": "public static final int animation_list = 0x10700 ;"}
{"commit_tokens": ["Ignoring", "FreemarkerRendererTest", "for", "now", "."], "add_tokens": "@ org . junit . Ignore", "del_tokens": ""}
{"commit_tokens": ["lowering", "max", "FUL", "failed", "attempts", "to", "3"], "add_tokens": "private static final int FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP = 3 ;", "del_tokens": "private static final int FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP = 5 ;"}
{"commit_tokens": ["Removed", "some", "testing", "code"], "add_tokens": "private static final int SIZE = 100 ;", "del_tokens": "private static final int SIZE = 1000 ;"}
{"commit_tokens": ["Fix", "FindBugs", "issues", "in", "this", "class"], "add_tokens": "private transient HttpServletRequest request ;", "del_tokens": "HttpServletRequest request ;"}
{"commit_tokens": ["Allow", "null", "values", "for", "json", "in", "CollectionMetainfo"], "add_tokens": "", "del_tokens": "@ Nonnull"}
{"commit_tokens": ["When", "person", "details", "change", "update", "the", "UI"], "add_tokens": "refreshPersonDetails ( ) ;", "del_tokens": ""}
{"commit_tokens": ["build", "number", "13"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["fix", "grace", "time", "calculation", "."], "add_tokens": "return lastAlertSecondsAgo < ( grace * 60 ) - 2 ;", "del_tokens": "return lastAlertSecondsAgo < grace * 60 ;"}
{"commit_tokens": ["Released", "0", ".", "3", ".", "4", "to", "update", "the", "database"], "add_tokens": "return \" 0 . 3 . 4 \" ;", "del_tokens": "return \" 0 . 3 . 3 \" ;"}
{"commit_tokens": ["increase", "sample", "linking", "distance", "so", "things", "are", "not", "left", "unlinked", "now", "that", "we", "look", "for", "nodes", "not", "edges", "."], "add_tokens": "this . setSearchRadiusM ( 500 ) ;", "del_tokens": "this . setSearchRadiusM ( 200 ) ;"}
{"commit_tokens": ["Remove", "potential", "race", "condition"], "add_tokens": "cluster . await ( ClusterManager . allSeesAllAsAvailable ( ) ) ;", "del_tokens": "cluster . await ( masterSeesAllSlavesAsAvailable ( ) ) ;"}
{"commit_tokens": ["Don", "t", "send", "error", "in", "ReadyForQueryListener"], "add_tokens": "", "del_tokens": "Messages . sendErrorResponse ( channel , Exceptions . messageOf ( t ) ) ;"}
{"commit_tokens": ["Set", "activity", "state", "correctly", "when", "ending", "activity", "."], "add_tokens": "this . activityState = ACTIVITY_EXITING ;", "del_tokens": ""}
{"commit_tokens": ["Made", "Location", ".", "clone", "(", ")", "public", "."], "add_tokens": "public Location clone ( ) {", "del_tokens": "protected Location clone ( ) {"}
{"commit_tokens": ["fixed", "possible", "problem", "with", "closed", "DB"], "add_tokens": "} catch ( SQLException e ) {", "del_tokens": "} catch ( SQLiteDoneException e ) {"}
{"commit_tokens": ["Removed", "stupid", "typo", "that", "I", "accidentally", "committed", "."], "add_tokens": "return true ;", "del_tokens": "return true ; F"}
{"commit_tokens": ["make", "dashboard", "permissions", "editable", "for", "users"], "add_tokens": "", "del_tokens": "DASHBOARDS_CREATE , DASHBOARDS_EDIT , DASHBOARDS_READ ,"}
{"commit_tokens": ["Fixed", "failing", "integration", "tests"], "add_tokens": "return getOrDefaultConfiguration ( dependencyConfiguration ) ;", "del_tokens": "return dependencyConfiguration ;"}
{"commit_tokens": ["Updated", "test", "for", "LINEAR", "technique"], "add_tokens": "testRandomAligns ( VectAlign . Mode . LINEAR ) ;", "del_tokens": "testRandomAligns ( VectAlign . Mode . LINEAR_INTERPOLATE ) ;"}
{"commit_tokens": ["do", "not", "log", "runtimeexception"], "add_tokens": "catch ( RuntimeException e ) {", "del_tokens": "catch ( ProcessCanceledException e ) {"}
{"commit_tokens": ["Expose", "field"], "add_tokens": "return filters ;", "del_tokens": "return filters ( ) ;"}
{"commit_tokens": ["Remove", "unused", "import"], "add_tokens": "", "del_tokens": "import android . net . Uri ;"}
{"commit_tokens": ["Pass", "editor", "to", "release", "when", "releasing", "deferred", "(", "missing", "editor", "purge", ")"], "add_tokens": "myEditor = null ;", "del_tokens": ""}
{"commit_tokens": ["When", "instantiating", "an", "account", "set", "the", "default", "color", "to", "something"], "add_tokens": "mChipColor = ( new Random ( ) ) . nextInt ( 0xffffff ) + 0xff000000 ;", "del_tokens": "mChipColor = 0 ;"}
{"commit_tokens": ["also", "register", "token", "set", "contributor", "manually"], "add_tokens": "registerExtension ( PythonDialectsTokenSetContributor . EP_NAME , new PythonTokenSetContributor ( ) ) ;", "del_tokens": ""}
{"commit_tokens": ["remove", "txMap", "put", "line"], "add_tokens": "", "del_tokens": "txMap . put ( item . getItemId ( ) , new TxQueueItem ( item ) . setTransactionId ( transactionId ) ) ;"}
{"commit_tokens": ["resolved", "conflicts", "for", "merge", "of", "fb2e3c8d", "to", "master"], "add_tokens": "", "del_tokens": "public void showAssistant ( ) { } @ Override"}
{"commit_tokens": ["Prevented", "resetting", "the", "delay", "from", "throwing", "an", "exception", "when", "running", "in", "a", "war"], "add_tokens": "/ / Do nothing", "del_tokens": "throw new UnsupportedOperationException ( \" Socket control isn ' t available in this configuration \" ) ;"}
{"commit_tokens": ["Add", "annotation", "@", "Nullable", "for", "target", "revision", "argument"], "add_tokens": "public void setTargetRevision ( @ Nullable HgRevisionNumber target ) {", "del_tokens": "public void setTargetRevision ( HgRevisionNumber target ) {"}
{"commit_tokens": ["ignore", "long", "time", "test"], "add_tokens": "@ Ignore", "del_tokens": ""}
{"commit_tokens": ["add", "note", "on", "probable", "bug"], "add_tokens": "/ / TODO shouldn ' t we increase reportsSentCount here ?", "del_tokens": ""}
{"commit_tokens": ["Fix", "PGraphicsOpenGL", ".", "surface", "field", "not", "getting", "initialized"], "add_tokens": "return surface = new PSurfaceJOGL ( this ) ;", "del_tokens": "return new PSurfaceJOGL ( this ) ;"}
{"commit_tokens": ["Check", "all", "weak", "references"], "add_tokens": "", "del_tokens": "break ;"}
{"commit_tokens": ["Reduce", "full", "screen", "button", "panel", "size", "."], "add_tokens": "", "del_tokens": "fullScreenButtonBar . setPreferredSize ( new Dimension ( 500 , 100 ) ) ;"}
{"commit_tokens": ["Add", "finish", "(", ")", "after", "timeout", "of", "Reqeust", "Arc", "operations", "."], "add_tokens": "finish ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Closes", "completely", "the", "master", "password", "dialog", "when", "finished", "instead", "of", "just", "hiding", "it", "."], "add_tokens": "dialog . dispose ( ) ;", "del_tokens": "dialog . setVisible ( false ) ;"}
{"commit_tokens": ["Set", "AWT", "as", "headless", "when", "ZAP", "is", "in", "a", "headless", "mode"], "add_tokens": "System . setProperty ( \" java . awt . headless \" , \" true \" ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "single", "test"], "add_tokens": "@ Test ( expected = IOError . class )", "del_tokens": ""}
{"commit_tokens": ["forgot", "a", "piece"], "add_tokens": "response . performQuit ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "build", "break", "due", "to", "misuse", "of", "git", "add", "-", "i", "command"], "add_tokens": "", "del_tokens": "mDevicePropDb . close ( ) ;"}
{"commit_tokens": ["Bump", "mms", "whitelist", "time", "up", "to", "1", "minute", "."], "add_tokens": "KEY_MMS_TEMP_APP_WHITELIST_DURATION , 60 * 1000L ) ;", "del_tokens": "KEY_MMS_TEMP_APP_WHITELIST_DURATION , 30 * 1000L ) ;"}
{"commit_tokens": ["Don", "t", "strip", "NativeRunnable", "constructor", "."], "add_tokens": "@ DoNotStrip", "del_tokens": ""}
{"commit_tokens": ["Removed", "unnecessary", "return", "statement"], "add_tokens": "", "del_tokens": "return ;"}
{"commit_tokens": ["LPS", "-", "43918", "Add", "SuppressWarnig"], "add_tokens": "@ SuppressWarnings ( \" deprecation \" )", "del_tokens": ""}
{"commit_tokens": ["assert", "renew", "memtable", "is", "only", "used", "when", "durable", "writes", "=", "false"], "add_tokens": "assert ! cfstore . keyspace . metadata . durableWrites ;", "del_tokens": ""}
{"commit_tokens": ["RBucket", "should", "implements", "RExpirable"], "add_tokens": "public interface RBucket < V > extends RExpirable {", "del_tokens": "public interface RBucket < V > extends RObject {"}
{"commit_tokens": ["Don", "t", "reset", "signature", "when", "restoring", "state"], "add_tokens": "", "del_tokens": "updateSignature ( ) ;"}
{"commit_tokens": ["Help", "id", "corrected", "."], "add_tokens": "return \" preferences . intentionPowerPack \" ;", "del_tokens": "return \" preferences . errorHighlight \" ;"}
{"commit_tokens": ["Fix", "copy", "&", "paste", "error", "in", "isKeyguardLocked", "(", ")"], "add_tokens": "return mWM . isKeyguardLocked ( ) ;", "del_tokens": "return mWM . isKeyguardSecure ( ) ;"}
{"commit_tokens": ["Fix", "checkstyle"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Fix", "copy", "&", "paste", "error", "in", "isKeyguardLocked", "(", ")"], "add_tokens": "return mWM . isKeyguardLocked ( ) ;", "del_tokens": "return mWM . isKeyguardSecure ( ) ;"}
{"commit_tokens": ["Remove", "pointless", "Javadoc", "block"], "add_tokens": "", "del_tokens": "/ * * * * /"}
{"commit_tokens": ["Added", "serialVersionUID", "to", "MongoInterruptedException"], "add_tokens": "private static final long serialVersionUID = - 4110417867718417860L ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "tests", "by", "running", "super", ".", "tearDown", "(", ")"], "add_tokens": "super . tearDown ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "test", "case"], "add_tokens": "db . activateOnCurrentThread ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "focus", "issues", "with", "dialpad", "in", "the", "call", "dialog", "."], "add_tokens": "dialpadDialog . requestFocus ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Don", "t", "ignore", "index", "expressions", "in", "get_indexed_slices"], "add_tokens": "index_clause . expressions ,", "del_tokens": ""}
{"commit_tokens": ["added", "a", "method", "to", "identify", "a", "classnode", "as", "interface"], "add_tokens": "public boolean isInterface ( ) { return ( getModifiers ( ) & Opcodes . ACC_INTERFACE ) > 0 ; }", "del_tokens": ""}
{"commit_tokens": ["Remove", "rotate", "(", "angle", "x", "y", "z", ")", "from", "reference"], "add_tokens": "* @ nowebref", "del_tokens": ""}
{"commit_tokens": ["Fix", "another", "Java", "-", "6ism"], "add_tokens": "pool . awaitTermination ( 3600 * 24 , TimeUnit . SECONDS ) ; / / 1 Day", "del_tokens": "pool . awaitTermination ( 1 , TimeUnit . DAYS ) ;"}
{"commit_tokens": ["Removed", "package"], "add_tokens": "", "del_tokens": "package net . betzel . bytedeco . javacv . pca ;"}
{"commit_tokens": ["Prevent", "TextureView", "from", "ever", "setting", "a", "null", "layer", "paint"], "add_tokens": "mLayerPaint = paint = = null ? new Paint ( ) : paint ;", "del_tokens": "mLayerPaint = paint ;"}
{"commit_tokens": ["Remove", "checkThread", "(", ")", "from", "findAddress"], "add_tokens": "", "del_tokens": "checkThread ( ) ;"}
{"commit_tokens": ["Increasing", "visibility", "for", "Ben"], "add_tokens": "public Main ( ) throws IOException", "del_tokens": "Main ( ) throws IOException"}
{"commit_tokens": ["Remove", "unneeded", "AutoClosable", "interface", "from", "PublicationImage", "."], "add_tokens": "implements NakMessageSender , DriverManagedResource", "del_tokens": "implements AutoCloseable , NakMessageSender , DriverManagedResource"}
{"commit_tokens": ["Fix", "quality", "flaw"], "add_tokens": "return decorations ; / / NOSONAR expose internal representation", "del_tokens": "return decorations ;"}
{"commit_tokens": ["add", "sleep", "to", "ColumnFamilyStoreTest", "to", "workaround", "waitForFlush", "bug", "."], "add_tokens": "Thread . sleep ( 1000 ) ;", "del_tokens": ""}
{"commit_tokens": ["set", "pool", "size", "to", "1"], "add_tokens": "static final int executorPoolSize = 1 ;", "del_tokens": "static final int executorPoolSize = 2 ;"}
{"commit_tokens": ["Added", "some", "inspections", "to", "PythonAllTestsSuite"], "add_tokens": "PyAttributeOutsideInitInspectionTest . class , PyClassHasNoInitInspectionTest . class ,", "del_tokens": ""}
{"commit_tokens": ["Ignore", "incomplete", "tests"], "add_tokens": "@ Ignore", "del_tokens": ""}
{"commit_tokens": ["Fix", "switch", "fall", "-", "through"], "add_tokens": "break ;", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "18364", "AssetRenderer", "fails", "when", "embbeded", "in", "custom", "portlet", "due", "to", "incorrect", "class", "loader"], "add_tokens": "PortalClassLoaderUtil . getClassLoader ( ) ,", "del_tokens": ""}
{"commit_tokens": ["Started", "new", "demo", "."], "add_tokens": "/ / Test", "del_tokens": ""}
{"commit_tokens": ["calling", "setText", "(", "null", ")", "on", "a", "TextView", "should", "actually", "set", "the", "text", "to", "be", "empty", "string", "(", "this", "is", "what", "the", "real", "android", "library", "call", "does", ")"], "add_tokens": "if ( text = = null ) { text = \" \" ; }", "del_tokens": ""}
{"commit_tokens": ["removed", "@", "author", "tag", "from", "JSONPointerException"], "add_tokens": "", "del_tokens": "* * @ author erosb *"}
{"commit_tokens": ["update", "JmeSystem", "version", "number"], "add_tokens": "return \" jMonkeyEngine 3 . 0 . 0 Beta \" ;", "del_tokens": "return \" jMonkey Engine 3 Alpha 0 . 6 \" ;"}
{"commit_tokens": ["add", "gc", "(", ")"], "add_tokens": "System . gc ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Set", "log", "level", "to", "trace", "for", "package", "action", ".", "support", ".", "broadcast", "in", "the", "RecoveryPercolatorTests", "#", "testSinglePercolator_recovery", "test", "."], "add_tokens": "@ TestLogging ( \" action . support . broadcast : TRACE \" )", "del_tokens": ""}
{"commit_tokens": ["GRAILS", "-", "6047", "GRAILS", "-", "6089", "-", "improve", "handling", "of", "calls", "to", "local", "closures", "in", "Bootstrap"], "add_tokens": "", "del_tokens": "closure . setResolveStrategy ( Closure . DELEGATE_FIRST ) ;"}
{"commit_tokens": ["Fix", "returning", "wrong", "field"], "add_tokens": "return requires ;", "del_tokens": "return alternatives ;"}
{"commit_tokens": ["destroy", "NEWT", "window", "on", "exit"], "add_tokens": "PSurfaceNEWT . this . sketch . exit ( ) ; window . destroy ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Make", "version", "final", "."], "add_tokens": "private final VectorClock version ;", "del_tokens": "private VectorClock version ;"}
{"commit_tokens": ["Servlets", "do", "not", "support", "async", "by", "default"], "add_tokens": "protected boolean asyncSupported = false ;", "del_tokens": "protected boolean asyncSupported = true ;"}
{"commit_tokens": ["Adds", "more", "code", "on", "dispatching", "audio", "level", "events", "."], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Fix", "executor", "propagation", "in", "CallOptions", "."], "add_tokens": "executor = other . executor ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "odd", "looking", "code"], "add_tokens": "if ( ok ) {", "del_tokens": "if ( ! false ) {"}
{"commit_tokens": ["Remove", "unnecessary", "import"], "add_tokens": "", "del_tokens": "import org . apache . commons . lang . ArrayUtils ;"}
{"commit_tokens": ["Fix", "the", "comment"], "add_tokens": "* One deque method to print tree in spiral order", "del_tokens": "* One deque method to print the matrix"}
{"commit_tokens": ["disable", "broken", "inspection", "by", "default"], "add_tokens": "return false ;", "del_tokens": "return true ;"}
{"commit_tokens": ["Remove", "printStackTrace", "(", ")", "to", "fix", "cast", "exception", "."], "add_tokens": "", "del_tokens": "e . printStackTrace ( ) ;"}
{"commit_tokens": ["Use", "the", "resolved", "Context", "in", "ContentResolver", "."], "add_tokens": "mPackageName = mContext . getBasePackageName ( ) ;", "del_tokens": "mPackageName = context . getBasePackageName ( ) ;"}
{"commit_tokens": ["Null", "restart", "strategy", "field", "in", "ExecutionGraph", "when", "archiving"], "add_tokens": "restartStrategy = null ;", "del_tokens": ""}
{"commit_tokens": ["Removed", "dup", "check", "(", "keeping", "the", "more", "explicit", "one", ")", "per", "cketti", "recommendation"], "add_tokens": "return mStartIntegratedInbox ;", "del_tokens": "return ! mHideSpecialAccounts & & mStartIntegratedInbox ;"}
{"commit_tokens": ["LPS", "-", "21249", "Fix", "source", "formatting", "NPE"], "add_tokens": "else if ( fileEntry ! = null ) {", "del_tokens": "else {"}
{"commit_tokens": ["fixed", "a", "bug", "causing", "drawable", "bounds", "being", "invalid", "after", "changing", "the", "image"], "add_tokens": "mLastDrawableBounds = new RectF ( drawableBounds ) ;", "del_tokens": "mLastDrawableBounds = drawableBounds ;"}
{"commit_tokens": ["Remove", "unnecessary", "initialization"], "add_tokens": "protected UnderFileSystemCluster mUfsCluster ;", "del_tokens": "protected UnderFileSystemCluster mUfsCluster = null ;"}
{"commit_tokens": ["Remove", "stray", "import", "."], "add_tokens": "", "del_tokens": "import com . sun . tools . internal . ws . wsdl . document . Output ;"}
{"commit_tokens": ["IDEA", "-", "126585", "Evaluate", "Code", "Fragment", "dialog", "uses", "some", "strange", "proportional", "font", "in", "editor"], "add_tokens": "myEditorTextField . setFontInheritedFromLAF ( false ) ;", "del_tokens": ""}
{"commit_tokens": ["Add", "reset", "(", ")", "method", "to", "DatabaseObjectFactory"], "add_tokens": "public void reset ( ) { this . standardTypes = null ; }", "del_tokens": ""}
{"commit_tokens": ["publish", "feed", "with", "dialog"], "add_tokens": "public void publish ( final Feed feed , boolean withDialog , final OnPublishListener onPublishListener ) { }", "del_tokens": ""}
{"commit_tokens": ["Make", "MetricsRegistry", "#", "getMetrics", "(", ")", "return", "an", "unmodifiable", "map"], "add_tokens": "return Collections . unmodifiableMap ( metrics ) ;", "del_tokens": "return metrics ;"}
{"commit_tokens": ["oops", "remove", "debug", "message"], "add_tokens": "", "del_tokens": "System . out . println ( caretTimer ) ;"}
{"commit_tokens": ["Removed", "unnecessary", "return", "statement", "in", "LineageFileOutStream"], "add_tokens": "", "del_tokens": "return ;"}
{"commit_tokens": ["Change", "the", "visibility", "of", "refreshPosts", "back", "to", "private", "."], "add_tokens": "private void refreshPosts ( ) {", "del_tokens": "protected void refreshPosts ( ) {"}
{"commit_tokens": ["Add", "missing", "ap", "threshold", "config", "for", "hotlists"], "add_tokens": "settings . apLostThreshold = apLostThreshold ;", "del_tokens": ""}
{"commit_tokens": ["fix", "a", "typo", "."], "add_tokens": "throw new BootstrapFailureException ( \" No available bootstrap servers found ! \" ) ;", "del_tokens": "throw new BootstrapFailureException ( \" No available boostrap servers found ! \" ) ;"}
{"commit_tokens": ["removed", "@", "Override", "from", "interface", "method"], "add_tokens": "", "del_tokens": "@ Override"}
{"commit_tokens": ["When", "closing", "the", "stream", "for", "the", "host", "s", "web", ".", "xml", "if", "an", "exception", "occur", "then", "hostTimeStamp", "must", "be", "set", "to", "-", "1", "and", "not", "the", "globalTimeStamp", "."], "add_tokens": "hostTimeStamp = - 1 ;", "del_tokens": "globalTimeStamp = - 1 ;"}
{"commit_tokens": ["damn", "optimize", "imports", "on", "commit"], "add_tokens": "import org . jetbrains . annotations . * ;", "del_tokens": ""}
{"commit_tokens": ["CLJ", "-", "1329", "-", "remove", "unused", "local", "in", "PersistentVector", ".", "cons", "(", ")"], "add_tokens": "", "del_tokens": "int i = cnt ;"}
{"commit_tokens": ["In", "onKeyUp", "for", "DPAD_CENTER", "show", "the", "IME", "for", "text", "input", "."], "add_tokens": "displaySoftKeyboard ( true ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "a", "crash", "in", "TelephonyManager", "while", "calling", "getDeviceID", "(", ")"], "add_tokens": "} catch ( NullPointerException ex ) { return null ;", "del_tokens": ""}
{"commit_tokens": ["corrected", "PImage", ".", "setModified", "(", ")", "so", "mx2", "and", "my2", "are", "width", "-", "1", "and", "height", "-", "1"], "add_tokens": "mx2 = width - 1 ; my2 = height - 1 ;", "del_tokens": "mx2 = width ; my2 = height ;"}
{"commit_tokens": ["remove", "provider", "cursor", "refresh", "on", "resume", "(", "not", "needed", ")"], "add_tokens": "", "del_tokens": "initProviderCursor ( ) ;"}
{"commit_tokens": ["Ignore", "NeuronsTest", "(", "pure", "benchmark", ")", "."], "add_tokens": "@ Ignore", "del_tokens": ""}
{"commit_tokens": ["Removed", "@", "author", "tag", "."], "add_tokens": "", "del_tokens": "* * @ author afeinberg"}
{"commit_tokens": ["Whoops", "add", "a", "line", "separator", "."], "add_tokens": "pw . println ( ) ;", "del_tokens": ""}
{"commit_tokens": ["remove", "extra", "call", "to", "getDataProvider", "(", ")"], "add_tokens": "", "del_tokens": "getDataProvider ( ) ;"}
{"commit_tokens": ["Fixing", "null", "values", "in", "first", "domain", "trust", "array", "entry"], "add_tokens": "read ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Make", "InstallCommand", "s", "constructor", "public"], "add_tokens": "public InstallCommand ( CommandRunnerParams params ) {", "del_tokens": "protected InstallCommand ( CommandRunnerParams params ) {"}
{"commit_tokens": ["Add", "postSync", "so", "that", "the", "chrome", "stack", "has", "access", "."], "add_tokens": "postSync ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Added", "fix", "for", "webViewClient", "."], "add_tokens": "webViewClient = appView . viewClient ;", "del_tokens": ""}
{"commit_tokens": ["Missing", "close", "cursor", "call"], "add_tokens": "evens . close ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Removed", "public", "modifier", "from", "getSessionController", "(", ")", "method", "on", "ProviderManager", "."], "add_tokens": "ConcurrentSessionController getSessionController ( ) {", "del_tokens": "public ConcurrentSessionController getSessionController ( ) {"}
{"commit_tokens": ["Remove", "unnecessary", "semicolon", "in", "TwoWayView"], "add_tokens": "VERTICAL }", "del_tokens": "VERTICAL ; } ;"}
{"commit_tokens": ["LPS", "-", "12927", "Retry", "safe", "building", "logic", "on", "reflection", "invoking", "failure"], "add_tokens": "return toString ( false ) ;", "del_tokens": "return StringPool . BLANK ;"}
{"commit_tokens": ["Remove", "unused", "local", "variable"], "add_tokens": "", "del_tokens": "VariableScope scope = compileStack . getScope ( ) ;"}
{"commit_tokens": ["A", "better", "fix", "for", "race", "condition", "when", "starting", "USB", "accessory", "mode"], "add_tokens": "", "del_tokens": "mAccessoryModeRequestTime = 0 ;"}
{"commit_tokens": ["Copy", "opaque", "over", "shape", "in", "GradientDrawable", "copy", "constructor"], "add_tokens": "mOpaqueOverShape = state . mOpaqueOverShape ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "LDAP", "."], "add_tokens": "else {", "del_tokens": "if ( adminDN ! = null ) {"}
{"commit_tokens": ["Fix", "bug", "#", "70", "."], "add_tokens": "startAutoCycle ( mSliderDuration , mSliderDuration , mAutoRecover ) ;", "del_tokens": "startAutoCycle ( 1000 , mSliderDuration , mAutoRecover ) ;"}
{"commit_tokens": ["Restore", "SCREEN_CHECK_PERIOD", "constant", "."], "add_tokens": "private static final int SCREEN_CHECK_PERIOD = 1000 ;", "del_tokens": ""}
{"commit_tokens": ["remove", "empty", "line"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Yielding", "background", "flushing", "thread", "so", "it", "doesn", "t", "have", "a", "contention", "with", "readers", "."], "add_tokens": "Thread . yield ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "mcp", "mapping", "."], "add_tokens": "item . hoverStart = value ;", "del_tokens": "item . field_804_d = value ;"}
{"commit_tokens": ["don", "t", "escape", "HTML", "twice"], "add_tokens": "contextTools . setEscapeHtml ( false ) ;", "del_tokens": ""}
{"commit_tokens": ["reverted", "back", "templates", "folder", "setup", "in", "django"], "add_tokens": "templateDir ,", "del_tokens": ""}
{"commit_tokens": ["Remove", "constant", "TAG", "as", "it", "is", "not", "used", "."], "add_tokens": "", "del_tokens": "private static final String TAG = \" TermView \" ;"}
{"commit_tokens": ["Remove", "unused", "import"], "add_tokens": "", "del_tokens": "import android . util . Log ;"}
{"commit_tokens": ["Fix", "bug", "2544916", "-", "Fun", "with", "AbsListView", "touch", "mode"], "add_tokens": "} else { mTouchMode = TOUCH_MODE_REST ;", "del_tokens": ""}
{"commit_tokens": ["avoid", "fallthrough", "in", "ONMOUSEDOWN"], "add_tokens": "break ;", "del_tokens": ""}
{"commit_tokens": ["Missed", "required", "-", "type", "-", "id", "for", "a", "junit"], "add_tokens": "\" water . AutoSerialTest \" ,", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "30392", "Users", "do", "not", "have", "access", "to", "a", "site", "s", "private", "pages", "while", "on", "permissions", "algoritm", "1", "or", "2"], "add_tokens": "if ( _userGroups . contains ( group ) ) { return true ; }", "del_tokens": ""}
{"commit_tokens": ["remove", "dead", "code", "in", "Downloader"], "add_tokens": "", "del_tokens": "HttpURLConnection conn = createConnection ( url ) ; conn . connect ( ) ;"}
{"commit_tokens": ["Align", "default", "with", "Context", "default"], "add_tokens": "protected int maxInactiveInterval = 30 * 60 ;", "del_tokens": "protected int maxInactiveInterval = 60 ;"}
{"commit_tokens": ["Removed", "extra", "Whitespace", "in", "UrlMappingUtils"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Removed", "extra", "close", "(", ")", "method", "that", "threw", "errors"], "add_tokens": "", "del_tokens": "connection . close ( ) ;"}
{"commit_tokens": ["optimize", "imports"], "add_tokens": "", "del_tokens": "import java . util . logging . ConsoleHandler ;"}
{"commit_tokens": ["fix", "a", "bad", "merge"], "add_tokens": "", "del_tokens": "mAttached = false ;"}
{"commit_tokens": ["Fix", "the", "weird", "anchoring", "of", "the", "search", "dropdown", "when", "pivoting", "into", "an"], "add_tokens": "mSearchAutoComplete . showDropDown ( ) ;", "del_tokens": ""}
{"commit_tokens": ["update", "javadoc"], "add_tokens": "/ * * * Non - Android accessor . * * @ return the last loaded url * /", "del_tokens": ""}
{"commit_tokens": ["Removed", "a", "System", ".", "out"], "add_tokens": "", "del_tokens": "System . out . println ( \" Copied \" + file ) ;"}
{"commit_tokens": ["do", "not", "force", "everyone", "into", "the", "null", "checking"], "add_tokens": "", "del_tokens": "@ Nullable"}
{"commit_tokens": ["Fix", "miscalculation", "of", "grid", "section", "bottom", "most", "edge", "."], "add_tokens": "return bottomMostEdge ;", "del_tokens": "return endEdge ;"}
{"commit_tokens": ["Remove", "spurious", "@", "Override", "."], "add_tokens": "", "del_tokens": "* @ Override"}
{"commit_tokens": ["Don", "t", "allow", "manual", "sorting", "of", "featured", "lists"], "add_tokens": "return tagData ! = null & & ! tagData . getFlag ( TagData . FLAGS , TagData . FLAG_FEATURED ) ;", "del_tokens": "return true ;"}
{"commit_tokens": ["Fixing", "construction", "of", "handler", "in", "AppWidgetHost"], "add_tokens": "this ( context , hostId , null , context . getMainLooper ( ) ) ;", "del_tokens": "this ( context , hostId , null , Looper . getMainLooper ( ) ) ;"}
{"commit_tokens": ["added", "getRootUrl", "to", "test", "project"], "add_tokens": "String getRootUrl ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Allow", "the", "support", "library", "to", "work", "directly", "on", "Gingerbread", "."], "add_tokens": "System . loadLibrary ( \" RSSupport \" ) ;", "del_tokens": ""}
{"commit_tokens": ["Call", "super", ".", "onDestroy", "(", ")"], "add_tokens": "super . onDestroy ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Mark", "getConnection", "(", ")", "that", "takes", "a", "username", "/", "password", "as", "deprecated", "."], "add_tokens": "@ Deprecated", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "20338", "Enabling", "a", "page", "in", "staging", "sets", "a", "wrong", "parentLayoutRevisionId"], "add_tokens": "return parentLayoutRevision . getLayoutRevisionId ( ) ;", "del_tokens": "return parentLayoutRevision . getParentLayoutRevisionId ( ) ;"}
{"commit_tokens": ["Added", "missing", "annotation"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["Only", "set", "the", "readOnly", "(", ")", "flag", "at", "initial", "construction", "if", "it", "is", "set", "to", "true", "by", "default", "."], "add_tokens": "isReadOnlyDirty = defaultReadOnly ;", "del_tokens": "isReadOnlyDirty = true ;"}
{"commit_tokens": ["Restore", "Javadoc", "to", "the", "getCoyoteResponse", "(", ")", "method"], "add_tokens": "/ * * * Get the Coyote response . * /", "del_tokens": ""}
{"commit_tokens": ["Reset", "touch", "/", "scroll", "state", "on", "ACTION_UP", "while", "in", "overscroll"], "add_tokens": "case TOUCH_MODE_OVERSCROLL : mTouchMode = TOUCH_MODE_REST ; reportScrollStateChange ( OnScrollListener . SCROLL_STATE_IDLE ) ; break ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "redundant", "check", "."], "add_tokens": "", "del_tokens": "if ( servicesFound . contains ( line ) ) { continue ; }"}
{"commit_tokens": ["LPS", "-", "53447", "let", "the", "Group", "cleanup", "everything"], "add_tokens": "", "del_tokens": "@ DeleteAfterTestRun"}
{"commit_tokens": ["added", "method", "to", "create", "a", "subset", "of", "the", "orginal", "dataset"], "add_tokens": "/ * * create a subset of the original dataset * / public DataSet createView ( Closure criteria ) { return new DataSet ( this , criteria ) ; }", "del_tokens": ""}
{"commit_tokens": ["Fix", "nullptr", "exception", "."], "add_tokens": "return baseIterator . getLabels ( ) ;", "del_tokens": "return null ;"}
{"commit_tokens": ["Fixed", "unit", "tests", "for", "empty", "row", "key", "listeners"], "add_tokens": "private List < RowKeyListener > m_rowKeyListeners = Collections . EMPTY_LIST ;", "del_tokens": "private List < RowKeyListener > m_rowKeyListeners ;"}
{"commit_tokens": ["fixed", "updater", "tests", "."], "add_tokens": "Runner . initLogger ( System . getProperty ( \" java . io . tmpdir \" ) ) ;", "del_tokens": ""}
{"commit_tokens": ["Set", "default", "attachment", "preview", "image", "in", "the", "code", "(", "and", "not", "only", "in", "layout", ")", "so", "that", "whne", "moving", "from", "a", "message", "to", "another", "we", "get", "the", "right", "preview"], "add_tokens": "else { attachmentIcon . setImageResource ( R . drawable . attached_image_placeholder ) ; }", "del_tokens": ""}
{"commit_tokens": ["added", "System", ".", "exit", "(", "0", ")", "to", "exit", "main", "method", "on", "completion"], "add_tokens": "System . exit ( 0 ) ;", "del_tokens": ""}
{"commit_tokens": ["Include", "root", "cause", "exception", "into", "the", "one", "produced", "by", "ApplicationContextFacade", "#", "doPrivileged", "(", ")"], "add_tokens": "throw new RuntimeException ( t . getMessage ( ) , t ) ;", "del_tokens": "throw new RuntimeException ( t . getMessage ( ) ) ;"}
{"commit_tokens": ["Fix", "crash", "at", "boot", "."], "add_tokens": "", "del_tokens": "AccessibilityManager accessibilityManager = ( AccessibilityManager ) context . getSystemService ( Context . ACCESSIBILITY_SERVICE ) ;"}
{"commit_tokens": ["Fix", "typo", "in", "Javadoc"], "add_tokens": "* sets the default origin application stack", "del_tokens": "* sets the default origin applcation stack"}
{"commit_tokens": ["Removed", "errant", "AutoCloseable", "."], "add_tokens": "public interface MongoConnectionManager {", "del_tokens": "public interface MongoConnectionManager extends AutoCloseable {"}
{"commit_tokens": ["Oops", "forgot", "semi", "-", "colon", "."], "add_tokens": "return type . equals ( \" WIFI \" ) ;", "del_tokens": "return type . equals ( \" WIFI \" )"}
{"commit_tokens": ["completion", "invoked", "in", "empty", "autopopup", "phase", "=", "second"], "add_tokens": "return time + 1 ;", "del_tokens": "return time ;"}
{"commit_tokens": ["Populate", "TwoDimTable", "for", "CM", "in", "constructor", "."], "add_tokens": "table = toTable ( ) ;", "del_tokens": ""}
{"commit_tokens": ["When", "we", "connect", "to", "vold", "explicitly", "mount", "external", "storage", "."], "add_tokens": "mountMedia ( Environment . getExternalStorageDirectory ( ) . getAbsolutePath ( ) ) ;", "del_tokens": ""}
{"commit_tokens": ["Awaken", "ListView", "scroll", "bars", "for", "overscroll"], "add_tokens": "awakenScrollBars ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Removing", "author", "information", "from", "AuthErrorDialogFragment", ".", "java", "."], "add_tokens": "", "del_tokens": "* Created by @ roundhill on 2 / 17 / 14 ."}
{"commit_tokens": ["removed", "comment"], "add_tokens": "", "del_tokens": "/ / TODO : GzipUtils . checkAndWrap ?"}
{"commit_tokens": ["Fix", "FindBugs", "niggle"], "add_tokens": "req . getSession ( ) ;", "del_tokens": "session = req . getSession ( ) ;"}
{"commit_tokens": ["Fix", "test", "in", "eventsArePair", "(", ")", "."], "add_tokens": "if ( ! ( event instanceof LogEvent ) ) {", "del_tokens": "if ( ! ( event instanceof BuckEvent ) ) {"}
{"commit_tokens": ["Add", "support", "for", "HEAD", "OPTIONS", "TRACE", "and", "PATCH"], "add_tokens": "GET , POST , PUT , DELETE , HEAD , OPTIONS , TRACE , PATCH", "del_tokens": "GET , POST , PUT , DELETE"}
{"commit_tokens": ["Remove", "debug", "statement"], "add_tokens": "", "del_tokens": "System . err . print ( _csb . toString ( ) ) ;"}
{"commit_tokens": ["remove", "debug", "output"], "add_tokens": "", "del_tokens": "System . out . println ( getName ( ) ) ;"}
{"commit_tokens": ["Fixed", "a", "bug", "with", "how", "GCM", "service", "is", "constructed"], "add_tokens": "super ( SENDER_ID ) ;", "del_tokens": "super ( ) ;"}
{"commit_tokens": ["Remove", "useless", "TODO", "."], "add_tokens": "", "del_tokens": "/ / TODO maybe do this every time a show is added"}
{"commit_tokens": ["Allow", "loopback", "traffic", "in", "lockdown", "mode", "."], "add_tokens": "mNetd . setFirewallInterfaceRule ( \" lo \" , true ) ;", "del_tokens": ""}
{"commit_tokens": ["help", "ID", "(", "IDEADEV", "-", "34211", ")"], "add_tokens": "@ Override public String getHelpId ( ) { return \" plugin . configuration . wizard \" ; }", "del_tokens": ""}
{"commit_tokens": ["remove", "meaningless", "copyright", "comments"], "add_tokens": "", "del_tokens": "/ * * Copyright ( c ) 2005 , Your Corporation . All Rights Reserved . * /"}
{"commit_tokens": ["Make", "the", "dest", "dir"], "add_tokens": "outputPath . mkdirs ( ) ;", "del_tokens": ""}
{"commit_tokens": ["escalate", "visibility"], "add_tokens": "", "del_tokens": "@ Modifier"}
{"commit_tokens": ["removing", "unused", "var"], "add_tokens": "", "del_tokens": "int bigCount = 0 ;"}
{"commit_tokens": ["StreamCorruptedException", "when", "loading", "a", "cluster", "closes", "#", "300", "."], "add_tokens": "sb . setLength ( 0 ) ;", "del_tokens": ""}
{"commit_tokens": ["add", "@", "since"], "add_tokens": "* @ since 144", "del_tokens": ""}
{"commit_tokens": ["Fix", "build", "."], "add_tokens": "/ * * * @ hide * /", "del_tokens": ""}
{"commit_tokens": ["Don", "t", "show", "the", "Reader", "topics", "selector", "if", "our", "activity", "has", "finished", "."], "add_tokens": "if ( ! isFinishing ( ) ) showTopics ( ) ;", "del_tokens": "showTopics ( ) ;"}
{"commit_tokens": ["don", "t", "throw", "in", "Orchid", "sockets", "when", "attempting", "to", "set", "socket", "options", "just", "ignore", "the", "request", "instead"], "add_tokens": "/ / Ignored .", "del_tokens": "throw new UnsupportedOperationException ( ) ;"}
{"commit_tokens": ["Change", "quartz2", "endpoint", "to", "be", "a", "singleton"], "add_tokens": "return true ;", "del_tokens": "return false ;"}
{"commit_tokens": ["Adds", "timed", "wait", "on", "ResponseFuture", "so", "it", "is", "more", "frequently", "scheduled"], "add_tokens": "this . wait ( 50 ) ;", "del_tokens": "this . wait ( ) ;"}
{"commit_tokens": ["Fix", "DRF", "/", "GBM", "tests", "-", "Gaussian", "deviance", "now", "works", "."], "add_tokens": "return Double . NaN ;", "del_tokens": "throw new IllegalArgumentException ( ) ;"}
{"commit_tokens": ["Fix", "Cassandra", "cli", "to", "respect", "timeout", "if", "schema", "does", "not", "settle", "patch", "by", "goffinet", ";", "reviewed", "by", "jbellis", "for", "CASSANDRA", "-", "2187"], "add_tokens": "start = System . currentTimeMillis ( ) ;", "del_tokens": ""}
{"commit_tokens": ["fixed", "parameter", "name", "in", "default", "implementation", "of", "the"], "add_tokens": "public void onDiscoveredHost ( DatagramPacket datagramPacket , Kryo kryo ) {", "del_tokens": "public void onDiscoveredHost ( DatagramPacket packet , Kryo kryo ) {"}
{"commit_tokens": ["Improve", "the", "for", "-", "loop", "of", "method", "moveBlockMeta", "in", "BlockMetadataManager", ".", "java"], "add_tokens": "break ;", "del_tokens": ""}
{"commit_tokens": ["Make", "every", "language", "have", "its", "own", "preview", "page", "by", "default", "(", "no", "need", "to", "specify", "useSharedPreview", "(", ")", "for", "each", ")"], "add_tokens": "", "del_tokens": "public boolean usesSharedPreview ( ) { return false ; } @ Override"}
{"commit_tokens": ["Fix", "copy", "paste", "error", "in", "BZ", "52259", "fix"], "add_tokens": "Realm oldRealm = this . realm ;", "del_tokens": "Realm oldRealm = realm ;"}
{"commit_tokens": ["set", "network", "refresh", "mode", "as", "default"], "add_tokens": "/ / set network refresh mode as default setNetworkRefreshMode ( true ) ;", "del_tokens": ""}
{"commit_tokens": ["Added", "fix", "for", "webViewClient", "."], "add_tokens": "webViewClient = appView . viewClient ;", "del_tokens": ""}
{"commit_tokens": ["Add", "@", "Override"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["Disabling", "still", "broken", "test", "."], "add_tokens": "/ / @ Test", "del_tokens": "@ Test"}
{"commit_tokens": ["Kill", "ActivityView", "s", "background", "thread", "when", "it", "s", "destroyed"], "add_tokens": "mThread . quit ( ) ;", "del_tokens": ""}
{"commit_tokens": ["run", "fieldmappers", "on", "non", "-", "partial", "message", "view", "too"], "add_tokens": "message = FieldMapper . run ( message ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "extra", "blank", "line"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Remove", "a", "call", "which", "seems", "to", "serve", "no", "purpose", "and", "sometimes", "causes", "exceptions"], "add_tokens": "", "del_tokens": "addInsertToStream ( currentTimestamp , null ) ;"}
{"commit_tokens": ["Remove", "blank", "line", "."], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Fix", "an", "issue"], "add_tokens": "return app . getTargetPointsHelper ( ) ;", "del_tokens": "/ / TODO Auto - generated method stub return null ;"}
{"commit_tokens": ["Remove", "nfc"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["retrieve", "request", "object"], "add_tokens": "public HttpRequest getHttpRequest ( ) { return this . httpRequest ; }", "del_tokens": ""}
{"commit_tokens": ["undo", "part", "of", "the", "closure", "scopeing", "fix"], "add_tokens": "", "del_tokens": "pushState ( false ) ; popState ( ) ;"}
{"commit_tokens": ["debug", "printing"], "add_tokens": "", "del_tokens": "System . err . println ( \" AUTH URI XX = \" + f . URL ) ;"}
{"commit_tokens": ["fix", "test", "data"], "add_tokens": "< caret > string = \" \" ;", "del_tokens": "string = < caret > \" \" ;"}
{"commit_tokens": ["Made", "MongoException", "unchecked"], "add_tokens": "public class MongoException extends RuntimeException {", "del_tokens": "public class MongoException extends Exception {"}
{"commit_tokens": ["We", "sent", "a", "response", "the", "client", "which", "immediately", "sends", "a", "new", "request", "."], "add_tokens": "firstWrite ( data , close ) ;", "del_tokens": "firstWrite ( data , close ) ;"}
{"commit_tokens": ["Add", "ok", "button"], "add_tokens": "bld . setPositiveButton ( R . string . default_buttons_ok , null ) ;", "del_tokens": ""}
{"commit_tokens": ["Terminate", "instanceInfoReplicator", "with", "shutdownNow", "(", ")", "instead", "of", "shutdown", "(", ")"], "add_tokens": "scheduler . shutdownNow ( ) ;", "del_tokens": "scheduler . shutdown ( ) ;"}
{"commit_tokens": ["use", "proper", "CachedValue", "for", "caching", "of", "Django", "settings", "values"], "add_tokens": "public Set < PyFile > getVisitedFiles ( ) { return myVisitedFiles ; }", "del_tokens": ""}
{"commit_tokens": ["Added", "SubsequenceCounter", "class"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "44342", "Make", "class", "private"], "add_tokens": "private class ConfigurationPortletPortletConfig extends PortletConfigImpl {", "del_tokens": "class ConfigurationPortletPortletConfig extends PortletConfigImpl {"}
{"commit_tokens": ["Specify", "generic", "type", "parameter"], "add_tokens": "ParserRuleContext < ? > ctx )", "del_tokens": "ParserRuleContext ctx )"}
{"commit_tokens": ["Rename", "DiscoveryNodes", "#", "smallestNodeVersion", "to", "getSmallestNodeVersion"], "add_tokens": "public Version getSmallestVersion ( ) {", "del_tokens": "public Version smallestVersion ( ) {"}
{"commit_tokens": ["Fix", "a", "monkey", "bug", "with", "AbsListView", "data", "set", "observers"], "add_tokens": "if ( mAdapter ! = null & & mDataSetObserver ! = null ) {", "del_tokens": "if ( mAdapter ! = null ) {"}
{"commit_tokens": ["Also", "remove", "block", "from", "mLostBlocks", "for", "delete", "."], "add_tokens": "mLostBlocks . remove ( blockId ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "typo", "in", "typo", "fix"], "add_tokens": "if ( toRemove ! = null )", "del_tokens": "if ( toRemote ! = null )"}
{"commit_tokens": ["fix", "conflicting", "native", "library", "error", "message"], "add_tokens": "nativeLinkable . getBuildTarget ( ) ) ;", "del_tokens": "params . getBuildTarget ( ) ) ;"}
{"commit_tokens": ["correcting", "typo", "causing", "build", "failure"], "add_tokens": "/ * *", "del_tokens": "* *"}
{"commit_tokens": ["Allow", "null", "string", "input"], "add_tokens": "if ( value = = null ) { return null ; }", "del_tokens": ""}
{"commit_tokens": ["Fix", "swapped", "LAC", "/", "CID", "in", "card", "inflater"], "add_tokens": "*", "del_tokens": "*"}
{"commit_tokens": ["calling", "fillInStackTrace", "on", "exceptions", "returned", "from", "async", "callback", "to", "make", "it", "easier", "for", "users", "of", "synchronous", "methods", "that", "wrap", "the", "async", "methods", "to", "understand", "the", "stack", "traces", "."], "add_tokens": "e . getCause ( ) . fillInStackTrace ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Removed", "the", "exprRest", "from", "the", "NOT", "with", "parens", "since", "it", "should", "not", "expr", "the", "rest"], "add_tokens": "", "del_tokens": "notTarget = exprRest ( notTarget ) ;"}
{"commit_tokens": ["Added", "test", "case", "to", "K2JvmCliTest", "."], "add_tokens": "@ Test public void classpath ( ) throws Exception { executeCompilerCompareOutputJVM ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["removed", "debug", "statement"], "add_tokens": "", "del_tokens": "System . out . println ( \" mDetailsFile = \" + mDetailsFile ) ;"}
{"commit_tokens": ["Remove", "extra", "newline"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Fix", "silly", "error"], "add_tokens": "read + = last ;", "del_tokens": ""}
{"commit_tokens": ["Recycle", "original", "screenshot", "after", "rotation", "."], "add_tokens": "screenShot . recycle ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Actually", "use", "shows", "id", "to", "sync", "."], "add_tokens": "String . valueOf ( showTvdbId )", "del_tokens": "String . valueOf ( type )"}
{"commit_tokens": ["Fixed", "an", "issue", "where", "the", "tx", "log", "wasn", "t", "closed", "properly", "leaving", "transactions", "not", "marked", "as", "finished", "."], "add_tokens": "logBuffer . force ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "license"], "add_tokens": "* Copyright 2013 Niek Haarman", "del_tokens": ""}
{"commit_tokens": ["Add", "STEM_1", "STEM_2", "and", "STEM_3", "key", "as", "wakeup", "keys"], "add_tokens": "case KeyEvent . KEYCODE_STEM_1 : case KeyEvent . KEYCODE_STEM_2 : case KeyEvent . KEYCODE_STEM_3 :", "del_tokens": ""}
{"commit_tokens": ["Fixing", "standalone", "again"], "add_tokens": "import java . lang . reflect . Field ;", "del_tokens": ""}
{"commit_tokens": ["Minor", "optimisation", "-", "remove", "unnecessary", "call", "."], "add_tokens": "", "del_tokens": "socketBufferHandler . configureReadBufferForRead ( ) ;"}
{"commit_tokens": ["Expose", "field"], "add_tokens": "public LinkedList < AsyncIOInterceptor > filters ( ) { return filters ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["Fixed", "the", "bug", "for", "real", "."], "add_tokens": "inShutdown = true ;", "del_tokens": ""}
{"commit_tokens": ["Removed", "unused", "import", "from", "AnimatorSet", "."], "add_tokens": "", "del_tokens": "import java . util . Iterator ;"}
{"commit_tokens": ["Now", "render", "the", "correct", "texture", "for", "sub", "-", "mod", "pipes"], "add_tokens": "renderState . setTextureFile ( pipe . getTextureFile ( ) ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "empty", "line"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Skips", "adding", "a", "listener", "if", "already", "exists", "."], "add_tokens": "if ( ! progressListeners . contains ( listener ) ) progressListeners . add ( listener ) ;", "del_tokens": "progressListeners . add ( listener ) ;"}
{"commit_tokens": ["Corrected", "db", "upgrade", "logic", "so", "that", "comment", "table", "isn", "t", "reset", "twice"], "add_tokens": "", "del_tokens": "CommentTable . reset ( db ) ;"}
{"commit_tokens": ["Suppress", "unchecked", "warning"], "add_tokens": "@ SuppressWarnings ( \" unchecked \" )", "del_tokens": ""}
{"commit_tokens": ["Removed", "leftover", "name", "field"], "add_tokens": "", "del_tokens": "private String name ;"}
{"commit_tokens": ["Remove", "unused", "views", "when", "we", "return", "to", "keyguard"], "add_tokens": "mKeyguardHost . removeAllViews ( ) ;", "del_tokens": ""}
{"commit_tokens": ["EA", "-", "28312", "don", "t", "recursively", "hide", "lookup"], "add_tokens": "return myChangeGuard | | myDisposed ;", "del_tokens": "return myChangeGuard ;"}
{"commit_tokens": ["HeadlessMaterial", "doesn", "t", "correctly", "set", "material", "data", "field"], "add_tokens": "this . data = newData ;", "del_tokens": "this . data = data ;"}
{"commit_tokens": ["Resolved", "#", "1144", "hopefully"], "add_tokens": "mBuilder . adapter . notifyItemChanged ( position ) ;", "del_tokens": ""}
{"commit_tokens": ["renaming", "a", "testfile"], "add_tokens": "public class SQLiteStatementTest extends AndroidTestCase {", "del_tokens": "public class SQLiteGeneralTest extends AndroidTestCase {"}
{"commit_tokens": ["Fix", "ShadowIntentTest"], "add_tokens": "@ Implementation", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "27577", "DMD", "portlet", "only", "shows", "deleted", "items", "."], "add_tokens": "sql = replaceExcludeStatus ( sql , queryDefinition ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "an", "NPE", "if", "available", "(", ")", "is", "called", "before", "the", "input", "buffer", "is", "created", "."], "add_tokens": "if ( inBuffer = = null ) { return 0 ; }", "del_tokens": ""}
{"commit_tokens": ["Remove", "comment", "on", "private", "serialization", "constant"], "add_tokens": "", "del_tokens": "/ * * serialVersionUID * /"}
{"commit_tokens": ["Fix", "-", "-", "filter", "documentation"], "add_tokens": "return \" TEST - SELECTOR \" ;", "del_tokens": "return \" LIST < TEST - SELECTORS > \" ;"}
{"commit_tokens": ["Return", "the", "empty", "string"], "add_tokens": "return \" \" ;", "del_tokens": "return null ;"}
{"commit_tokens": ["Fix", "loading", "theme", "color", "for", "non", "first", "webview", "load"], "add_tokens": "mThemeColor = null ;", "del_tokens": ""}
{"commit_tokens": ["added", "code", "to", "visit", "sibling", "nodes"], "add_tokens": "acceptSiblings ( currentNode , followSiblings ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "dead", "method", "native_get_session_id", "(", ")"], "add_tokens": "", "del_tokens": "private native final int native_get_session_id ( ) ;"}
{"commit_tokens": ["added", "missing", "network", "update", "call", "after", "removing", "blueprint"], "add_tokens": "sendNetworkUpdate ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Dialog", "should", "update", "status", "if", "Apply", "is", "pressed"], "add_tokens": "updateStatus ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Reload", "the", "EndNowButton", "label"], "add_tokens": "Util . setText ( mEndNowButton , mContext . getString ( R . string . volume_zen_end_now ) ) ;", "del_tokens": ""}
{"commit_tokens": ["Re", "throw", "the", "exception"], "add_tokens": "throw new RuntimeException ( ex ) ;", "del_tokens": ""}
{"commit_tokens": ["fixed", "ArraySeq", ".", "count"], "add_tokens": "return oa . length - i ;", "del_tokens": "return oa . length ;"}
{"commit_tokens": ["Don", "t", "recycle", "accessibility", "event", "after", "sending", "."], "add_tokens": "", "del_tokens": "event . recycle ( ) ;"}
{"commit_tokens": ["Added", "synchronization", "block", "to", "avoid", "race", "condition"], "add_tokens": "synchronized ( mService ) { resumeTopActivityLocked ( null ) ; }", "del_tokens": "resumeTopActivityLocked ( null ) ;"}
{"commit_tokens": ["Remove", "fall", "through", "for", "KEYCODE_VOICE_ASSIST"], "add_tokens": "break ;", "del_tokens": ""}
{"commit_tokens": ["remove", "repeat", "annotation"], "add_tokens": "", "del_tokens": "@ Repeat ( 100 )"}
{"commit_tokens": ["Remove", "tracking", "of", "all", "drawables", "in", "ViewOverlay", ".", "clear", "(", ")"], "add_tokens": "for ( Drawable drawable : mDrawables ) { drawable . setCallback ( null ) ; }", "del_tokens": ""}
{"commit_tokens": ["Fix", "unbounded", "expansion", "of", "cumulative", "buffer", "in", "SslHandler"], "add_tokens": "super . channelReadComplete ( ctx ) ;", "del_tokens": "ctx . fireChannelReadComplete ( ) ;"}
{"commit_tokens": ["Avoid", "NPE", "in", "GridSearch", "."], "add_tokens": "if ( jobs = = null ) return ;", "del_tokens": ""}
{"commit_tokens": ["HHH", "-", "11063", "-", "Fix", "long", "entity", "names", "for", "pgsql", "test", "failure", "."], "add_tokens": "@ Entity ( name = \" ComponentEntity \" )", "del_tokens": "@ Entity"}
{"commit_tokens": ["Fix", "comment", "typo"], "add_tokens": "/ *", "del_tokens": "/ * Patrick Lundquist"}
{"commit_tokens": ["Fix", "height", "measure", "state", "."], "add_tokens": "", "del_tokens": "} else if ( measuredHeight < heightSize ) {"}
{"commit_tokens": ["Add", "private", "constructor", "for", "Trees"], "add_tokens": "private Trees ( ) { }", "del_tokens": ""}
{"commit_tokens": ["Removed", "@", "Repeat", "(", "100", ")", "from", "BasicCacheTest"], "add_tokens": "", "del_tokens": "@ Repeat ( 100 )"}
{"commit_tokens": ["throw", "exception", "if", "via", "count", "is", "uninitialized"], "add_tokens": "if ( viaPosition < 0 ) throw new IllegalStateException ( \" Uninitialized via count in instruction \" + getName ( ) ) ;", "del_tokens": ""}
{"commit_tokens": ["correctly", "stop", "history", "refresh", "when", "history", "pane", "is", "closed", "(", "IDEADEV", "-", "22794", ")"], "add_tokens": "myUpdateAlarm . dispose ( ) ;", "del_tokens": "myUpdateAlarm . cancelAllRequests ( ) ;"}
{"commit_tokens": ["Removed", "broken", "link", "to", "non", "-", "existent", "method", "."], "add_tokens": "", "del_tokens": "* @ see MediaBrowserService # onLoadIcon"}
{"commit_tokens": ["fixed", "race", "condition"], "add_tokens": "", "del_tokens": "executorService = null ;"}
{"commit_tokens": ["using", "right", "separators", "on", "windows"], "add_tokens": "return project . getLocation ( ) . replace ( ' / ' , File . separatorChar ) ;", "del_tokens": "return project . getLocation ( ) ;"}
{"commit_tokens": ["Add", "icon", "mapping", "for", "NETWORK_TYPE_IWLAN"], "add_tokens": "mNetworkToIconLookup . put ( TelephonyManager . NETWORK_TYPE_IWLAN , TelephonyIcons . FOUR_G ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "report", "issue"], "add_tokens": "adapter . notifyLiveUpdatesChanged ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Added", "missing", "break"], "add_tokens": "break ;", "del_tokens": ""}
{"commit_tokens": ["revert", "change", "preventing", "NULL", "SSID", "in", "a", "WifiConfiguration"], "add_tokens": "", "del_tokens": "if ( SSID = = null ) return false ;"}
{"commit_tokens": ["Remove", "Support", "from", "settings", "name", "."], "add_tokens": "return \" Buildout \" ;", "del_tokens": "return \" Buildout Support \" ;"}
{"commit_tokens": ["always", "hide", "pgp", "snackbar", "after", "decrypting", "a", "message", "."], "add_tokens": "askForPassphraseIntent = null ;", "del_tokens": ""}
{"commit_tokens": ["Tweak", "formatting", "in", "Android", "template"], "add_tokens": "new MainReactPackage ( ) ) ;", "del_tokens": "new MainReactPackage ( ) ) ;"}
{"commit_tokens": ["Make", "the", "dest", "dir"], "add_tokens": "outputPath . mkdirs ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Add", "some", "TODO"], "add_tokens": "/ / TODO : What todo if the add return false ?", "del_tokens": ""}
{"commit_tokens": ["Previous", "cleanup", "missed", "one", "string"], "add_tokens": "\" ApplicationHttpRequest $ AttributeNamesEnumerator \" ) ;", "del_tokens": "\" core . ApplicationHttpRequest $ AttributeNamesEnumerator \" ) ;"}
{"commit_tokens": ["Updated", "sample"], "add_tokens": ". exitAnimation ( android . R . anim . fade_out )", "del_tokens": ""}
{"commit_tokens": ["Added", "render", "distance", "hook"], "add_tokens": "public double getRenderDistance ( ) { return 24 ; }", "del_tokens": ""}
{"commit_tokens": ["have", "own", "user", "field", "name", "for", "transports"], "add_tokens": "public String getUserFieldName ( ) ;", "del_tokens": ""}
{"commit_tokens": ["add", "noinspection", "simplifiable", "for", "more", "readable", "in", "BaseDownloadTask"], "add_tokens": "/ / noinspection SimplifiableIfStatement", "del_tokens": ""}
{"commit_tokens": ["Added", "property", "as", "a", "keyword", "identifier", "."], "add_tokens": "case KEYWORD_PROPERTY :", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "56566", "Fix", "PropsKeys"], "add_tokens": "PropsKeys . PORTLET_DISPLAY_TEMPLATES_ERROR , true ) ;", "del_tokens": "PropsKeys . DYNAMIC_DATA_LISTS_ERROR_TEMPLATE , true ) ;"}
{"commit_tokens": ["Added", "invalidateMaster", "method", "to", "control", "that", "behaviour", "from", "outside"], "add_tokens": "void invalidateMaster ( ) ;", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "51810", "Shorten", "call", "stack", "."], "add_tokens": "dispatch ( renderRequest , renderResponse , false , true ) ;", "del_tokens": "include ( ( PortletRequest ) renderRequest , ( PortletResponse ) renderResponse ) ;"}
{"commit_tokens": ["Add", "missing", "@", "param", "javadoc"], "add_tokens": "* @ param context lineage context", "del_tokens": ""}
{"commit_tokens": ["don", "t", "highlight", "empty", "headless", "-", "implementation", "-", "class", "as", "error"], "add_tokens": "@ ExtendClass ( allowEmpty = true )", "del_tokens": ""}
{"commit_tokens": ["Added", "@", "Override", "to", "the", "supportsVariableLimit", "method"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["Added", "needed", "support", "to", "exclude", "certain", "databases", "from", "support", "for", "allowGeneratedIdInsert", "."], "add_tokens": "", "del_tokens": "@ Override"}
{"commit_tokens": ["Removed", "requestLayout", "call", "since", "it", "s", "run", "via", "DynamicHeightTextView"], "add_tokens": "", "del_tokens": "vh . txtLineOne . requestLayout ( ) ;"}
{"commit_tokens": ["PreferenceActivity", "should", "not", "leave", "message", "in", "looper", "when", "destroyed"], "add_tokens": "mHandler . removeMessages ( MSG_BIND_PREFERENCES ) ; mHandler . removeMessages ( MSG_BUILD_HEADERS ) ;", "del_tokens": ""}
{"commit_tokens": ["Ignoring", "failing", "test"], "add_tokens": "@ Ignore", "del_tokens": ""}
{"commit_tokens": ["Set", "daemon", "flag", "on", "poller", "threads", "."], "add_tokens": "worker . setDaemon ( true ) ;", "del_tokens": ""}
{"commit_tokens": ["Do", "not", "throw", "on", "quick", "-", "fix", "creation", "just", "return", "null"], "add_tokens": "return null ;", "del_tokens": "throw new UnsupportedOperationException ( ) ;"}
{"commit_tokens": ["Fix", "context", "menu", "landscape", "layout"], "add_tokens": "return ! portraitMode ;", "del_tokens": "return ! portraitMode & & ! largeDevice ;"}
{"commit_tokens": ["add", "getter", "for", "GenericVertex", "max", "index"], "add_tokens": "public static int getMaxIndex ( ) { return maxIndex ; }", "del_tokens": ""}
{"commit_tokens": ["Don", "t", "allow", "resize", "of", "param", "dialog", "."], "add_tokens": "setResizable ( false ) ;", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "6072", "Add", "one", "method"], "add_tokens": "public int capacity ( ) { return _array . length ; }", "del_tokens": ""}
{"commit_tokens": ["CORE", "-", "1506", "updateSQL", "generates", "invalid", "SQL", "for", "oracle"], "add_tokens": "return \" \" ;", "del_tokens": "return \" ; \" ;"}
{"commit_tokens": ["Deprecate", "unused", "protected", "field"], "add_tokens": "* @ deprecated Unused", "del_tokens": ""}
{"commit_tokens": ["Don", "t", "show", "K9mail", "-", "errors", "as", "move", "/", "copy", "destination", "folder", "."], "add_tokens": "else if ( ! K9 . ERROR_FOLDER_NAME . equals ( name ) )", "del_tokens": "else"}
{"commit_tokens": ["we", "should", "split", "path", "by", "\\", "as", "path", "separator", "Show", "splitted", "path", "in", "case", "of", "windows"], "add_tokens": "}", "del_tokens": "}"}
{"commit_tokens": ["Make", "sure", "to", "resume", "writes", "when", "closing", "SSE", "connection"], "add_tokens": "sink . resumeWrites ( ) ;", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "54076", "Use", "SaxReader", "again", "since", "SaxReaderUtil", "doesn", "t", "have", "a", "read", "method"], "add_tokens": "\" saxReader \" ,", "del_tokens": "\" saxReaderUtil \" ,"}
{"commit_tokens": ["Remove", "extra", "newlines"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Add", "bytesReceived", "to", "tomcat", "metrics"], "add_tokens": "\" bytesReceived \" ,", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "34446", "Fix", "typo"], "add_tokens": "public void testSortByAssetVocabulary ( ) throws Exception {", "del_tokens": "public void testSortyByAssetVocabulary ( ) throws Exception {"}
{"commit_tokens": ["Show", "the", "keyboard", "when", "opening", "Find", "from", "the", "menu", "."], "add_tokens": "mInput . startGettingWindowFocus ( mEditText . getRootView ( ) ) ; mInput . focusIn ( mEditText ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "#", "202"], "add_tokens": "return mAttacher . getDisplayMatrix ( ) ;", "del_tokens": "return mAttacher . getDrawMatrix ( ) ;"}
{"commit_tokens": ["Stops", "late", "provide", "errors", "in", "ES6", "circular", "imports", "."], "add_tokens": "DiagnosticGroups . registerGroup ( \" lateProvide \" , ProcessClosurePrimitives . LATE_PROVIDE_ERROR ) ;", "del_tokens": ""}
{"commit_tokens": ["Add", "method", "that", "already", "existed", "on", "DefaultExecHandle", "that", "exposes", "the", "process", "state", "on", "the", "corresponding", "interface", "."], "add_tokens": "ExecHandleState getState ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Add", "marker", "for", "code", "improvement", "w", ".", "r", ".", "t", ".", "IRCApi", "instance", "."], "add_tokens": "* * FIXME : Put this in a AtomicReference instance ?", "del_tokens": ""}
{"commit_tokens": ["allow", "private", "constraints", "to", "be", "retrieved", "as", "a", "read", "only", "property"], "add_tokens": "public Object getConstraints ( ) { return constraints ; }", "del_tokens": ""}
{"commit_tokens": ["Use", "RingBuffer", ".", "INITIAL_CURSOR_VALUE", "constant", "rather", "than", "-", "1L", ";"], "add_tokens": "super ( RingBuffer . INITIAL_CURSOR_VALUE ) ;", "del_tokens": "super ( - 1L ) ;"}
{"commit_tokens": ["Remove", "warning", "suppression", "that", "Eclipse", "doesn", "t", "like"], "add_tokens": "", "del_tokens": "@ SuppressWarnings ( { \" EqualsWhichDoesntCheckParameterClass \" } )"}
{"commit_tokens": ["Remove", "some", "debug", "code"], "add_tokens": "", "del_tokens": "System . out . println ( new File ( dataDir , name + \" . dat \" ) ) ;"}
{"commit_tokens": ["LPS", "-", "18595", "Fix", "comparison", "to", "prevent", "control", "panel", "access", "from", "guests"], "add_tokens": "if ( Validator . isNotNull ( controlPanelCategory ) ) {", "del_tokens": "if ( controlPanelCategory ! = null ) {"}
{"commit_tokens": ["Add", "COCOA_TREE", "to", "list", "of", "possible", "tree", "types", "."], "add_tokens": "* Jungle tree with cocoa plants ; 1 block wide * / COCOA_TREE , / * *", "del_tokens": ""}
{"commit_tokens": ["Make", "getByName", "actually", "return", "values", "."], "add_tokens": "lookup . put ( type . name , type ) ;", "del_tokens": "lookup . put ( type . getName ( ) , type ) ;"}
{"commit_tokens": ["fix", "a", "copy", "paste", "misprint"], "add_tokens": "return shortcutsById ( IdeActions . ACTION_EDITOR_MOVE_LINE_END ) ;", "del_tokens": "return shortcutsById ( IdeActions . ACTION_EDITOR_MOVE_LINE_START ) ;"}
{"commit_tokens": ["Prevent", "double", "wrapping", "directories", "in", "MockDirectoryWrapper"], "add_tokens": "return delegateService . build ( ) ;", "del_tokens": "return helper . wrapAllInplace ( delegateService . build ( ) ) ;"}
{"commit_tokens": ["Remove", "debug", "output"], "add_tokens": "", "del_tokens": "System . out . println ( \" SEARCH \" ) ;"}
{"commit_tokens": ["tear", "down", "the", "custom", "injector", "when", "done"], "add_tokens": "/ / Don ' t forget to tear down our custom injector to avoid polluting other test classes", "del_tokens": ""}
{"commit_tokens": ["Set", "time", "when", "creating", "a", "new", "location"], "add_tokens": "time = System . currentTimeMillis ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Ensure", "item", "loading", "threads", "have", "background", "priority"], "add_tokens": "Process . setThreadPriority ( Process . THREAD_PRIORITY_BACKGROUND ) ;", "del_tokens": ""}
{"commit_tokens": ["Don", "t", "initialize", "JMF"], "add_tokens": "", "del_tokens": "setupJMF ( ) ;"}
{"commit_tokens": ["When", "marking", "a", "message", "as", "read", "as", "we", "re", "opening", "it", "from", "the", "message"], "add_tokens": "", "del_tokens": "mHandler . sortMessages ( ) ;"}
{"commit_tokens": ["make", "class", "non", "-", "public"], "add_tokens": "class Main {", "del_tokens": "public class Main {"}
{"commit_tokens": ["Fix", "missing", "break", "statement", "found", "by", "Motorola", "."], "add_tokens": "break ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "unused", "imports", "from", "webapps"], "add_tokens": "", "del_tokens": "import java . util . Enumeration ;"}
{"commit_tokens": ["fixL", "add", "listener", "to", "avd", "combo"], "add_tokens": "myAvdCombo . addActionListener ( listener ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "NPE", "in", "PackageParser"], "add_tokens": "writePermission = writePermission . intern ( ) ;", "del_tokens": "writePermission = readPermission . intern ( ) ;"}
{"commit_tokens": ["Add", "deprecation", "warning", "to", "parser", "API"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Fixed", "nullability", "assertion", "that", "was", "accidentally", "made", "too", "strong"], "add_tokens": "@ Nullable PsiElement object ,", "del_tokens": "@ NotNull PsiElement object ,"}
{"commit_tokens": ["update", "installed", "plugin", "version", "after", "filtering", "(", "IDEADEV", "-", "20263", ")"], "add_tokens": "installedPluginsModel . modifyData ( pluginsList ) ;", "del_tokens": ""}
{"commit_tokens": ["Don", "t", "show", "progress", "bar", "on", "Image", "Viewer", "for", "now"], "add_tokens": "/ / TODO Fix this setProgressBarIndeterminateVisibility ( ! finished ) ;", "del_tokens": "setProgressBarIndeterminateVisibility ( ! finished ) ;"}
{"commit_tokens": ["Dismiss", "system", "windows", "when", "search", "is", "launched", "."], "add_tokens": "sendCloseSystemWindows ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "test", "data"], "add_tokens": "", "del_tokens": "e = new E ( ) ;"}
{"commit_tokens": ["CB", "-", "8764", "Save", "instanceState", "before", "calling", "super"], "add_tokens": "super . onSaveInstanceState ( outState ) ;", "del_tokens": "super . onSaveInstanceState ( outState ) ;"}
{"commit_tokens": ["Fixed", "bug", "that", "issued", "warnings", "on", "registered", "activities", "when", "their", "package", "was", "not", "the", "application", "package", "."], "add_tokens": "activityQualifiedNames . add ( activityName ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "PreferenceActivity", "RuntimeException", "with", "@", "PreferenceScreen"], "add_tokens": "return getOnCreate ( ) . body ( ) ;", "del_tokens": "return getInitBody ( ) ;"}
{"commit_tokens": ["this", "should", "not", "contain", "anything", "unused"], "add_tokens": "", "del_tokens": "@ SuppressWarnings ( \" unused \" )"}
{"commit_tokens": ["fix", "author", "filtering", "in", "SVN", "browse", "changes", "(", "IDEADEV", "-", "5990", ")"], "add_tokens": "myUseAuthorFilter . addActionListener ( filterListener ) ;", "del_tokens": ""}
{"commit_tokens": ["add", "csiro", ".", "au", "as", "TLD", "since", "is", "not", "listed", "on", "Mozilla", "PSL"], "add_tokens": "\" cw \" , \" csiro . au \"", "del_tokens": "\" cw \""}
{"commit_tokens": ["Don", "t", "loop", "through", "extra", "prefixes", "when", "inflating", "prefs"], "add_tokens": "break ;", "del_tokens": ""}
{"commit_tokens": ["Added", "missing", "star"], "add_tokens": "* Reload ListView with new database values", "del_tokens": "Reload ListView with new database values"}
{"commit_tokens": ["Added", "symmetric", "sslAvailable", "=", "false", "in", "terminateAPR", "."], "add_tokens": "sslAvailable = false ; / / Well we cleaned the pool in terminate .", "del_tokens": ""}
{"commit_tokens": ["fix", "usages", "may", "break", "code", "if", "conflicts", "were", "ignored"], "add_tokens": "LOG . info ( e ) ;", "del_tokens": "LOG . error ( e ) ;"}
{"commit_tokens": ["Omit", "JNA", "+", "AWT", "load", "test", "on", "headless", "systems"], "add_tokens": "if ( GraphicsEnvironment . isHeadless ( ) ) return ;", "del_tokens": ""}
{"commit_tokens": ["Make", "Message", "inner", "exception", "class", "static", "for", "efficiency", "."], "add_tokens": "public static class LazyParseException extends RuntimeException {", "del_tokens": "public class LazyParseException extends RuntimeException {"}
{"commit_tokens": ["Make", "MarkupBuilder", ".", "getMkp", "(", ")", "return", "MarkupBuilderHelper", "instead", "of", "Object"], "add_tokens": "public MarkupBuilderHelper getMkp ( ) {", "del_tokens": "public Object getMkp ( ) {"}
{"commit_tokens": ["Revert", "Remove", "whitespace"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Fix", "NPE", "introduced", "in", "340d6e0522b7cb03349e6f60ee169e8b7452fbcb"], "add_tokens": "mThemeContext = this ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "templates", "field"], "add_tokens": "", "del_tokens": "protected SQLTemplates templates = configuration . getTemplates ( ) ;"}
{"commit_tokens": ["Deprecating", "ExternalResources", "."], "add_tokens": "@ Deprecated", "del_tokens": ""}
{"commit_tokens": ["Deprecate", "CommandFailureException", ".", "getCommandResult"], "add_tokens": "* @ deprecated there is no replacement for this method @ Deprecated", "del_tokens": ""}
{"commit_tokens": ["Fix", "type"], "add_tokens": "public Developer getDeveloper ( ) {", "del_tokens": "public Developer getDevelope ( ) {"}
{"commit_tokens": ["Added", "support", "for", "using", "a", "transaction", "to", "perform", "batch", "tasks", "."], "add_tokens": "@ Override public boolean isBatchUseTransaction ( ) { return true ; }", "del_tokens": ""}
{"commit_tokens": ["Fix", "misleading", "parameter", "name", "in", "ExecStarter", "."], "add_tokens": "void start ( Action < ? super Execution > action ) ;", "del_tokens": "void start ( Action < ? super Execution > onError ) ;"}
{"commit_tokens": ["Shows", "contacts", "information", "if", "available", "even", "if", "they", "are", "offline", "like", "telephone", "numbers", "and", "web", "links", "."], "add_tokens": "OFFLINE_OPERATION_SETS . add ( OperationSetServerStoredContactInfo . class ) ;", "del_tokens": ""}
{"commit_tokens": ["Check", "system", "ready", "only", "for", "Android"], "add_tokens": "if ( uid = = cAndroidUid & & ! XActivityManagerService . isSystemReady ( ) )", "del_tokens": "if ( ! XActivityManagerService . isSystemReady ( ) )"}
{"commit_tokens": ["Made", "QuasarURLClassLoaderHelper", "final"], "add_tokens": "public final class QuasarURLClassLoaderHelper {", "del_tokens": "public class QuasarURLClassLoaderHelper {"}
{"commit_tokens": ["Fix", "task", "leak", "in", "coordinator"], "add_tokens": "task . abort ( ) ;", "del_tokens": "task . cancel ( ) ;"}
{"commit_tokens": ["Don", "t", "log", "message", "for", "undefined", "EXIF", "rotation"], "add_tokens": "case ExifInterface . ORIENTATION_UNDEFINED :", "del_tokens": ""}
{"commit_tokens": ["Remove", "a", "debug", "line"], "add_tokens": "", "del_tokens": "System . err . println ( transitionIndex ) ;"}
{"commit_tokens": ["Doesn", "t", "re", "-", "sort", "app", "windows", "when", "move", "task", "to", "top"], "add_tokens": "moveStackWindowsLocked ( stack . getDisplayContent ( ) ) ;", "del_tokens": ""}
{"commit_tokens": ["added", "deprecated", "annotation", "to", "deprecated", "methods", "."], "add_tokens": "@ Deprecated", "del_tokens": ""}
{"commit_tokens": ["Added", "#", "toString", "(", ")", "."], "add_tokens": "public String toString ( ) { return super . toString ( ) + \" presence : \" + presence ; }", "del_tokens": ""}
{"commit_tokens": ["Add", "DSLContext", ".", "fetchFromCSV", "(", "boolean", ")", "to", "allow", "for", "fetching", "header", "-", "less", "CSV", "data"], "add_tokens": "return fetchFromStringData ( list , header ) ;", "del_tokens": "return fetchFromStringData ( header , list ) ;"}
{"commit_tokens": ["NPE", "on", "stop", "(", "only", "threadStop", "should", "set", "thread", "to", "null", "or", "it", "needs", "a", "sync", ")", "."], "add_tokens": "", "del_tokens": "thread = null ;"}
{"commit_tokens": ["Added", "TODO", "for", "416", "truncated", "LIST", "command", "."], "add_tokens": "/ / TODO Add support for REPLY 416 : LIST : output too large , truncated", "del_tokens": ""}
{"commit_tokens": ["send", "invite", "on", "usernames", "editbox", "empty", "as", "well"], "add_tokens": "} else { checkAndSend ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "indent"], "add_tokens": "if ( ! started ) {", "del_tokens": "if ( ! started ) {"}
{"commit_tokens": ["cleaned", "javadoc"], "add_tokens": "", "del_tokens": "/ / TODO : Serializable ( readObject , writeObject ("}
{"commit_tokens": ["Added", "SQLDialect"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Fix", "mobile", "sites", "viewport", "in", "fixed", "viewport", "mode", "."], "add_tokens": "} else if ( mSettings . getUseFixedViewport ( ) ) { width = mWebView . getViewWidth ( ) ;", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "51081", "Move", "stuff", "out"], "add_tokens": "", "del_tokens": "private Map < String , String > _newDependencyNames ;"}
{"commit_tokens": ["remove", "unused", "import", "of", "Java", "7", "+", "class"], "add_tokens": "", "del_tokens": "import java . nio . file . Path ;"}
{"commit_tokens": ["show", "hand", "over", "gutter", "apply", "icon"], "add_tokens": "public boolean isNavigateAction ( ) { return true ; }", "del_tokens": ""}
{"commit_tokens": ["added", "TODO"], "add_tokens": "/ / TODO after 1 . 7 print warning when trying to mock a final class", "del_tokens": ""}
{"commit_tokens": ["IDEA", "-", "43728", "Provide", "a", "way", "to", "step", "in", "a", "chosen", "thread", "while", "others", "remain", "suspended", "-", "remove", "dupliacted", "SUSPEND_ALL", "contexts"], "add_tokens": "( ( SuspendManagerImpl ) getSuspendManager ( ) ) . popContext ( context ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "old", "comment"], "add_tokens": "", "del_tokens": "/ / Protected so unit tests can use it"}
{"commit_tokens": ["Remove", "redundant", "import"], "add_tokens": "", "del_tokens": "import java . util . Locale ;"}
{"commit_tokens": ["The", "emojicon", "size", "was", "not", "consistently", "taking", "effect", "when", "it", "was", "set", "after", "the", "text", "was", "set", "."], "add_tokens": "super . setText ( getText ( ) ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "setting", "of", "title", "in", "GraphView", "constructor"], "add_tokens": "this . title = \" \" ;", "del_tokens": "title = \" \" ;"}
{"commit_tokens": ["Revert", "default", "behavior", "of", "Back", "Key", "to", "exiting", "application", "."], "add_tokens": "private int mBackKeyAction = BACK_KEY_STOPS_SERVICE ;", "del_tokens": "private int mBackKeyAction = BACK_KEY_SENDS_ESC ;"}
{"commit_tokens": ["Added", "John", "tug", "Wilson", "in", "the", "@", "author", "tag", "of", "the", "javadoc"], "add_tokens": "* @ author John Wilson", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "68920", "Let", "s", "return", "a", "different", "list", "to", "prevent", "adding", "elements", "to", "the", "real", "routes"], "add_tokens": "return new ArrayList < > ( _routes ) ;", "del_tokens": "return _routes ;"}
{"commit_tokens": ["change", "version", "num", "and", "year", "for", "the", "release", "of", "libsvm", "3", ".", "15"], "add_tokens": "public static final int LIBSVM_VERSION = 315 ;", "del_tokens": "public static final int LIBSVM_VERSION = 314 ;"}
{"commit_tokens": ["LRDOCS", "-", "927", "Add", "missing", "period", "in", "Javadoc", "."], "add_tokens": "* Returns the current internationalization language ' s code .", "del_tokens": "* Returns the current internationalization language ' s code"}
{"commit_tokens": ["Added", "support", "for", "automatic", "legend", "generation", "for", "Wheelchair", "renderer"], "add_tokens": "@ Override public String getName ( ) { return \" Wheelchair access \" ; }", "del_tokens": ""}
{"commit_tokens": ["Fixed", "syntax", "error", "in", "previous", "pull", "request", "."], "add_tokens": "", "del_tokens": "private static final long serialVersionUID = - 8742448824652078965L"}
{"commit_tokens": ["Fix", "#", "2686"], "add_tokens": "needLinks = false ;", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "45043", "Remove", "unthrown", "exception"], "add_tokens": "throws SystemException {", "del_tokens": "throws PortalException , SystemException {"}
{"commit_tokens": ["Suppress", "warning", "."], "add_tokens": "/ / noinspection ConstantConditions", "del_tokens": ""}
{"commit_tokens": ["Add", "main", "method"], "add_tokens": "public static void main ( String [ ] args ) throws Exception { new OneToThreeDiamondSequencedThroughputTest ( ) . testImplementations ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["Dropped", "erroneous", "test", "for", "faulty", "multicast", "channels", "."], "add_tokens": "/ / @ Test", "del_tokens": "@ Test"}
{"commit_tokens": ["added", "a", "note", "about", "ignored", "test"], "add_tokens": "/ / See # 3262", "del_tokens": ""}
{"commit_tokens": ["Fix", "warning"], "add_tokens": "", "del_tokens": "import android . os . Binder ;"}
{"commit_tokens": ["Prevent", "possible", "duplicate", "deregistering"], "add_tokens": "isDisposeRegistered = false ;", "del_tokens": ""}
{"commit_tokens": ["Provide", "argument", "for", "@", "GwtIncompatible", "."], "add_tokens": "@ GwtIncompatible ( \" Paths . get , Path . toAbsolutePath \" )", "del_tokens": "@ GwtIncompatible / / Paths . get , Path . toRealPath"}
{"commit_tokens": ["Add", "getter", "for", "fully", "-", "qualified", "name", "."], "add_tokens": "public String getFullyQualifiedName ( ) { return fqname ; }", "del_tokens": ""}
{"commit_tokens": ["Undo", "the", "change", "from", "-", "-", "that", "change", "was", "unnecessary", "because", "we", "already", "set", "options", ".", "renamePrefixNamespace", "in", "CommandLineRunner", "at", "line", "1108"], "add_tokens": "", "del_tokens": "options . renamePrefixNamespace = config . renamePrefixNamespace ;"}
{"commit_tokens": ["Found", "the", "corresponding", "Unity", "class"], "add_tokens": "* @ unity StreamingInfo", "del_tokens": ""}
{"commit_tokens": ["Try", "breakout", "threshold", "10m"], "add_tokens": "double channelThres = 10 ;", "del_tokens": "double channelThres = 5 ;"}
{"commit_tokens": ["IDEA", "-", "100983", "Mercurial", "merge", "dialog", "should", "save", "its", "dimensions"], "add_tokens": "@ Override protected String getDimensionServiceKey ( ) { return getClass ( ) . getName ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["Fix", "build"], "add_tokens": "return mColorState . mTint ! = null & & mColorState . mTint . isStateful ( ) ;", "del_tokens": "return mTint ! = null & & mTint . isStateful ( ) ;"}
{"commit_tokens": ["Don", "t", "load", "AST", "in", "toString"], "add_tokens": "return getElementType ( ) . toString ( ) ;", "del_tokens": "return getNode ( ) . getElementType ( ) . toString ( ) ;"}
{"commit_tokens": ["Add", "missing", "break", "to", "switch", "statement"], "add_tokens": "break ;", "del_tokens": ""}
{"commit_tokens": ["Allow", "the", "shift", "key", "to", "be", "passed", "to", "plugin", "."], "add_tokens": "", "del_tokens": "return true ;"}
{"commit_tokens": ["added", "getCollection", "(", "Class", ")", "to", "interface"], "add_tokens": "DBCollection getCollection ( Class c ) ;", "del_tokens": ""}
{"commit_tokens": ["Cleanup", "working", "directory", "on", "succesful", "runs", "of", "the", "backup", "stress", "test"], "add_tokens": "FileUtils . deleteRecursively ( new File ( directory ) ) ;", "del_tokens": ""}
{"commit_tokens": ["enable", "test"], "add_tokens": "public void testMethodParams ( ) throws Exception {", "del_tokens": "public void _testMethodParams ( ) throws Exception {"}
{"commit_tokens": ["Adds", "missing", "copy", "of", "ipv6"], "add_tokens": "this . ipv6 = source . ipv6 ;", "del_tokens": ""}
{"commit_tokens": ["Fixes", "duplicate", "file", "transfer", "appearance", "in", "chat", "window", "."], "add_tokens": "return ;", "del_tokens": ""}
{"commit_tokens": ["add", "missing", "import"], "add_tokens": "import org . junit . Ignore ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "an", "unused", "import", "preventing", "compile", "with", "OpenJDK", "."], "add_tokens": "", "del_tokens": "import com . sun . xml . internal . ws . util . QNameMap ;"}
{"commit_tokens": ["Turn", "off", "EXPANDED_ACTIVITY_DEBUG"], "add_tokens": "} else { rootView . setWillNotDraw ( true ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "unused", "import", "in", "BufferUtils"], "add_tokens": "", "del_tokens": "import java . io . File ;"}
{"commit_tokens": ["ensure", "key", "provider", "returns", "unique", "key", "for", "each", "item"], "add_tokens": "return item . hashCode ( ) ;", "del_tokens": "return item . getName ( ) ;"}
{"commit_tokens": ["Do", "not", "advance", "mLastEventTime", "when", "enabling", "or", "disabling", "user", "activity", "."], "add_tokens": "", "del_tokens": "mLastEventTime = SystemClock . uptimeMillis ( ) ; / / we might need to pass this in"}
{"commit_tokens": ["Fix", "#", "1862"], "add_tokens": "mGranularityEnabled = enabled ;", "del_tokens": "mGranularityEnabled = true ;"}
{"commit_tokens": ["made", "baseLoader", "public"], "add_tokens": "static public ClassLoader baseLoader ( ) {", "del_tokens": "static ClassLoader baseLoader ( ) {"}
{"commit_tokens": ["avoid", "NPE", "on", "initial", "remap", "(", "it", "was", "masked", "anyway", "but", "better", "to", "check", "explicitly", ")"], "add_tokens": "if ( buffer = = null ) return true ;", "del_tokens": ""}
{"commit_tokens": ["made", "the", "compiler", "and", "the", "build", "happy"], "add_tokens": "", "del_tokens": "@ Override"}
{"commit_tokens": ["Removed", "an", "infinite", "recursive", "loop", "in", "Log4JLogger", ".", "error", "(", "String", "Throwable", ")"], "add_tokens": "LOGGER . error ( message , th ) ;", "del_tokens": "error ( message , th ) ;"}
{"commit_tokens": ["Gracefully", "handle", "apps", "without", "native", "libraries", "."], "add_tokens": "if ( nativeLibraryPath = = null ) return false ;", "del_tokens": ""}
{"commit_tokens": ["Missed", "import"], "add_tokens": "import android . widget . ScrollView ;", "del_tokens": ""}
{"commit_tokens": ["made", "final"], "add_tokens": "public final class Var implements IFn {", "del_tokens": "public class Var implements IFn {"}
{"commit_tokens": ["bumped", "up", "test", "timeouts", "since", "Hudson", "seems", "slower", "than", "local", "machine", "for", "contention", "experiments", "."], "add_tokens": "protected static long TIMEOUT_MS = 200 ;", "del_tokens": "protected static long TIMEOUT_MS = 100 ;"}
{"commit_tokens": ["LPS", "-", "43621", "Delete", "group", "configurations", "before", "the", "group", "gets", "deleted"], "add_tokens": "exportImportConfigurationLocalService . deleteGroupExportImportConfigurations ( group . getGroupId ( ) ) ;", "del_tokens": ""}
{"commit_tokens": ["File", "consumer", "should", "use", "exception", "handler", "to", "handle", "all", "component", "specific", "exceptions", "."], "add_tokens": "/ / END SNIPPET : e2", "del_tokens": "/ / END SNIPPET : e1"}
{"commit_tokens": ["Add", "NOT_SUPPORTED", "error", "code"], "add_tokens": "NOT_SUPPORTED ( 0x0000_000D ) ,", "del_tokens": ""}
{"commit_tokens": ["Added", "comment", "."], "add_tokens": "/ / If user uses custom locale this is right place to apply it to activity .", "del_tokens": ""}
{"commit_tokens": ["Fix", "issue", "with", "opcodes", "that", "have", "a", "max", "api"], "add_tokens": "return api < < 16 ;", "del_tokens": "return 0xFFFF | ( api < < 16 ) ;"}
{"commit_tokens": ["Made", "exception", "public", "to", "allow", "reflective", "use", "."], "add_tokens": "public static class StartupFailureException extends Exception", "del_tokens": "private static class StartupFailureException extends Exception"}
{"commit_tokens": ["Fixed", "a", "bug", "where", "subtasks", "data", "could", "become", "corrupt", "after", "migration"], "add_tokens": "initializeTaskListMetadata ( ) ;", "del_tokens": ""}
{"commit_tokens": ["IndexRangesMigrationPeriodical", "should", "use", "a", "daemon", "thread"], "add_tokens": "return true ;", "del_tokens": "return false ;"}
{"commit_tokens": ["Added", "ShadowRemoteCallbackList", ".", "class", "to", "Robolectric", ".", "java"], "add_tokens": "ShadowRemoteCallbackList . class ,", "del_tokens": ""}
{"commit_tokens": ["Changed", "the", "description", "for", "the", "Quit", "app", "."], "add_tokens": "return \" Exits the client \" ;", "del_tokens": "return \" Built - in command . Exits the client \" ;"}
{"commit_tokens": ["fixed", "checkstyle", "error", "(", "empty", "exception", "handler", ")", "."], "add_tokens": "catch ( IOException ex ) { ex . printStackTrace ( ) ;", "del_tokens": "catch ( IOException ignored ) {"}
{"commit_tokens": ["Add", "missing", "line"], "add_tokens": "this . objectFactory . configure ( config ) ;", "del_tokens": ""}
{"commit_tokens": ["added", "file", "referesh", "before", "showing", "merge", "dialog"], "add_tokens": "f . refresh ( false , false ) ;", "del_tokens": ""}
{"commit_tokens": ["Enables", "the", "QTKit", "CaptureDevice", "on", "Mac", "OS", "X", "regardless", "of", "CIVIL", "i", ".", "e", ".", "it", "can", "be", "used", "as", "an", "alternative", "running", "alongside", "CIVIL", "."], "add_tokens": "if ( OSUtils . IS_MAC )", "del_tokens": "if ( ! fmjVideoAvailable & & OSUtils . IS_MAC )"}
{"commit_tokens": ["Allow", "the", "global", "naming", "context", "to", "be", "reset", "."], "add_tokens": "", "del_tokens": "if ( globalContext ! = null ) return ;"}
{"commit_tokens": ["Made", "getTimeWritten", "(", ")", "public"], "add_tokens": "public long getTimeWritten ( )", "del_tokens": "long getTimeWritten ( )"}
{"commit_tokens": ["delete", "an", "unused", "flag", "in", "IncrementalIndexSegment"], "add_tokens": "", "del_tokens": "private boolean nullStorage = false ;"}
{"commit_tokens": ["Removed", "size"], "add_tokens": "", "del_tokens": "this . setSize ( 450 , 200 ) ;"}
{"commit_tokens": ["Removed", "unused", "DB", "reference", "in", "DBObjectCodec"], "add_tokens": "", "del_tokens": "private final DB db ;"}
{"commit_tokens": ["LPS", "-", "56015", "We", "only", "want", "the", "regular", "parameters", "see", "getParameterValues", "and", "other", "methods", "in", "the", "class", "."], "add_tokens": "", "del_tokens": "parameterNames . addAll ( _fileParameters . keySet ( ) ) ;"}
{"commit_tokens": ["added", "flag", "isDescriptorOptional", "(", ")", "to", "DeploymentDescriptorMetaData"], "add_tokens": "public boolean isDescriptorOptional ( ) { return false ; }", "del_tokens": ""}
{"commit_tokens": ["only", "show", "interlineWithPreviousLeg", "where", "true"], "add_tokens": "public Boolean interlineWithPreviousLeg ;", "del_tokens": "public boolean interlineWithPreviousLeg = false ;"}
{"commit_tokens": ["Fixing", "a", "potential", "NPE", "in", "AsyncOperationStatus", "."], "add_tokens": "private String status = \" initializing \" ;", "del_tokens": "private String status ;"}
{"commit_tokens": ["Delay", "camera", "autofocus", "till", "surfaceChanged", "callback"], "add_tokens": "", "del_tokens": "showCameraPreview ( ) ;"}
{"commit_tokens": ["fix", "travis", "-", "ci", "build", "error"], "add_tokens": "", "del_tokens": "}"}
{"commit_tokens": ["Fix", "reentrancy", "bug", "in", "ServerImpl", "during", "shutdown"], "add_tokens": "transportServer . shutdown ( ) ;", "del_tokens": "transportServer . shutdown ( ) ;"}
{"commit_tokens": ["correctly", "handle", "several", "class", "filters", "remove"], "add_tokens": "fireTableRowsDeleted ( idx , idx ) ;", "del_tokens": "fireTableDataChanged ( ) ;"}
{"commit_tokens": ["Remove", "obsolete", "comment", "."], "add_tokens": "", "del_tokens": "* Currently , this is always the same as { @ link # languageIn } ."}
{"commit_tokens": ["Remove", "untrue", "comment", "."], "add_tokens": "", "del_tokens": "/ * * * There should only be one { @ link ProjectFilesystem } created per process . * /"}
{"commit_tokens": ["added", "InputStreamReader", "closing"], "add_tokens": "streamReader . close ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "build", "due", "to", "added", "API"], "add_tokens": "static class SubscriptionCallbackApi21 extends SubscriptionCallback {", "del_tokens": "public static class SubscriptionCallbackApi21 extends SubscriptionCallback {"}
{"commit_tokens": ["Add", "support", "for", "interceptorsgd"], "add_tokens": "", "del_tokens": "notifyBroadcastListener ( ) ;"}
{"commit_tokens": ["Break", "loop", "on", "finding", "the", "first", "non", "-", "printable", "character"], "add_tokens": "break ;", "del_tokens": ""}
{"commit_tokens": ["Back", "up", "/", "restore", "the", "mono", "audio", "setting"], "add_tokens": "MASTER_MONO ,", "del_tokens": ""}
{"commit_tokens": ["Added", "missing", "break", "in", "case"], "add_tokens": "break ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "bad", "commit", "."], "add_tokens": "", "del_tokens": "res = null ;"}
{"commit_tokens": ["Remove", "redundant", "comment", "(", "trigger", "another", "CI", "run", ")", "."], "add_tokens": "", "del_tokens": "/ / Process the connection"}
{"commit_tokens": ["Don", "t", "close", "the", "stream", "immediately", "after", "reading", "the", "first", "line", ".", ".", "."], "add_tokens": "br . close ( ) ;", "del_tokens": "br . close ( ) ;"}
{"commit_tokens": ["Break", "loop", "fast", "when", "one", "of", "connection", "seems", "to", "broken"], "add_tokens": "break ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "forgotten", "delegation"], "add_tokens": "in . accessed ( accessTime ) ;", "del_tokens": "accessed ( accessTime ) ;"}
{"commit_tokens": ["UNDERTOW", "-", "941", "Fixed", "method", "return", "type", "."], "add_tokens": "public Class < ? extends EventListener > getListenerClass ( ) {", "del_tokens": "public Class < ? > getListenerClass ( ) {"}
{"commit_tokens": ["set", "focus", "to", "html", "preview", "frame", "on", "load"], "add_tokens": "getWindow ( ) . focus ( ) ;", "del_tokens": ""}
{"commit_tokens": ["enable", "iiner", "class", "creation"], "add_tokens": "myInnerClassNameTextField . getDocument ( ) . addDocumentListener ( docListener ) ;", "del_tokens": ""}
{"commit_tokens": ["Removed", "new", "line", "at", "the", "end", "of", "the", "file"], "add_tokens": "}", "del_tokens": "}"}
{"commit_tokens": ["removed", "purge", "-", "on", "-", "auth", "behaviour"], "add_tokens": "", "del_tokens": "jedis . flushAll ( ) ;"}
{"commit_tokens": ["Fixed", "deadlock", "in", "getBitmapWithFilterApplied"], "add_tokens": "requestRender ( ) ;", "del_tokens": "requestRender ( ) ;"}
{"commit_tokens": ["Increase", "SchedulingPolicyService", ".", "PRIORITY_MAX", "to", "3"], "add_tokens": "private static final int PRIORITY_MAX = 3 ;", "del_tokens": "private static final int PRIORITY_MAX = 2 ;"}
{"commit_tokens": ["LPS", "-", "47045", "Add", "@", "Override"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["Changed", "openID", "filter", "to", "use", "its", "owen", "ordering", "value", "as", "it", "may", "be", "used", "together", "with", "form", "login", "."], "add_tokens": "return FilterChainOrder . OPENID_PROCESSING_FILTER ;", "del_tokens": "return FilterChainOrder . AUTHENTICATION_PROCESSING_FILTER ;"}
{"commit_tokens": ["Show", "hide", "dialog", "automatically"], "add_tokens": "hideDialog ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Removed", "method", "used", "for", "debugging", "purpouses"], "add_tokens": "", "del_tokens": "public static void unlink ( View view ) { ANIMATORS . remove ( view ) ; }"}
{"commit_tokens": ["Fix", "bug", "introduced", "in", "Change", "I856118d8", "."], "add_tokens": "", "del_tokens": "handleRemoveListLocked ( ) ;"}
{"commit_tokens": ["Prevent", "unnecessary", "clearing", "of", "cache", "by", "not", "doing", "it", "when", "a", "PortetPreference", "is", "created", "."], "add_tokens": "", "del_tokens": "clearCache ( model ) ;"}
{"commit_tokens": ["only", "handle", "early", "EOF", "if", "exchange", "is", "not", "done"], "add_tokens": "", "del_tokens": "LOG . setDebugEnabled ( true ) ;"}
{"commit_tokens": ["check", "restricted", "for", "file", "name", "instead", "of", "method", "name"], "add_tokens": "if ( isRestricted ( param , mFileName ) )", "del_tokens": "if ( isRestricted ( param ) )"}
{"commit_tokens": ["e9c5ade", "46ab5e1"], "add_tokens": "super . setFixedSize ( width , height ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "errant", "System", ".", "exit", "from", "stress", "so", "it", "can", "reuse", "keyspaces", "."], "add_tokens": "", "del_tokens": "System . exit ( 1 ) ;"}
{"commit_tokens": ["fixed", "download", "complete", "message", "button"], "add_tokens": "mMessageView . downloadRemainderButton ( ) . setOnClickListener ( this ) ;", "del_tokens": ""}
{"commit_tokens": ["Removed", "test", "seed", "."], "add_tokens": "/ / seed = 4139368480425561099l ;", "del_tokens": "seed = 4139368480425561099l ;"}
{"commit_tokens": ["Use", "correct", "param", "for", "heightMode", "in", "RelativeLayout", "horizontal", "measure"], "add_tokens": "if ( params . height = = LayoutParams . MATCH_PARENT ) {", "del_tokens": "if ( params . width = = LayoutParams . MATCH_PARENT ) {"}
{"commit_tokens": ["build", "number", "9"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Integrating", "removal", "of", "FocusTrackback", "for", "Linux", "since", "it", "brings", "more", "troubles", "than", "fixes", "."], "add_tokens": "return ! SystemInfo . isMac ;", "del_tokens": "return SystemInfo . isWindows ;"}
{"commit_tokens": ["send", "non", "-", "physical", "change", "event", "+", "track", "invalidation", "of", "elements", "in", "JavaResolveCache"], "add_tokens": "if ( event . isGenericChildrenChange ( ) ) return ;", "del_tokens": ""}
{"commit_tokens": ["Give", "ErrorReporter", "a", "reference", "to", "the", "application", "Context", "instead", "of", "Application", "object", "."], "add_tokens": "errorReporter . init ( getApplicationContext ( ) ) ;", "del_tokens": "errorReporter . init ( this ) ;"}
{"commit_tokens": ["Activity", "share", "has", "no", "text", "input"], "add_tokens": "", "del_tokens": "getWindow ( ) . setSoftInputMode ( WindowManager . LayoutParams . SOFT_INPUT_STATE_ALWAYS_HIDDEN ) ;"}
{"commit_tokens": ["Fix", "typo", "in", "JSSE", "name"], "add_tokens": "new String [ ] { \" SSL_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5 \" } ,", "del_tokens": "new String [ ] { \" SSL_RSA_EXPORT1024_WITH_RC2_CBC_56_MD \" } ,"}
{"commit_tokens": ["Fix", "a", "constructor"], "add_tokens": "private RecoverySystem ( ) { } / / Do not instantiate", "del_tokens": "private void RecoverySystem ( ) { } / / Do not instantiate"}
{"commit_tokens": ["method", "handle", "of", "TemplateViewRoute", "can", "throw", "Exceptions"], "add_tokens": "ModelAndView handle ( Request request , Response response ) throws Exception ;", "del_tokens": "ModelAndView handle ( Request request , Response response ) ;"}
{"commit_tokens": ["Don", "t", "back", "up", "/", "restore", "the", "automatically", "restore", "app", "data", "setting"], "add_tokens": "", "del_tokens": "BACKUP_AUTO_RESTORE ,"}
{"commit_tokens": ["Removed", "@", "PrivateApi", "annotation", ";", "not", "needed", "since", "PacketTransceiver", "is", "in", "the", "impl", "package", "and", "therefor", "should", "not", "be", "accessed", "by", "the", "outside", "world"], "add_tokens": "", "del_tokens": "@ PrivateApi"}
{"commit_tokens": ["Fix", "typo", "."], "add_tokens": "* @ return ClientConfig", "del_tokens": "* @ return modified ClientConfig"}
{"commit_tokens": ["Introduce", "a", "way", "to", "close", "cleanly", "raft", "log", "segments"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Removed", "unused", "imports"], "add_tokens": "", "del_tokens": "import org . graylog2 . Tools ;"}
{"commit_tokens": ["Bluetooth", "wasn", "t", "being", "included", "in", "usage", "list"], "add_tokens": "mUsageList . add ( bs ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "DrawerLayout", "to", "ignore", "non", "-", "drawers", "in", "drag", "operations", "."], "add_tokens": "return isDrawerView ( child ) ? child . getWidth ( ) : 0 ;", "del_tokens": "return child . getWidth ( ) ;"}
{"commit_tokens": ["do", "not", "lock", "files"], "add_tokens": "maker . fileLockDisable ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Hack", "Jetty", "/", "Websocket", "Session"], "add_tokens": "return getSession ( false ) ;", "del_tokens": "return b . request . getSession ( false ) ;"}
{"commit_tokens": ["Remove", "Tracer", "thread", "local", "storage", "when", "cleaning", "up", "."], "add_tokens": "traces . remove ( ) ;", "del_tokens": "traces . set ( null ) ;"}
{"commit_tokens": ["Fix", "StackOverflow", "when", "calling", "getLayoutInflater", "(", ")", "in", "DialogFragment"], "add_tokens": "return mActivity . getLayoutInflater ( ) ;", "del_tokens": "return getLayoutInflater ( null ) ;"}
{"commit_tokens": ["set", "current", "thread"], "add_tokens": "glThread = pgl . glThread ;", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "47071", "add", "line", "break", "to", "show", "the", "order", "matters"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Fixes", "a", "bug", "when", "layouts", "are", "changed", "since", "the"], "add_tokens": "v . setAlpha ( 1f ) ;", "del_tokens": ""}
{"commit_tokens": ["It", "makes", "sense", "to", "set", "connectionStartMs", "when", "the", "connection", "state", "changes", "."], "add_tokens": "connectionStartMs = System . currentTimeMillis ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "label", "drawing", "on", "screenshot", "."], "add_tokens": "textManager . initRenderer ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Adds", "static", "final", "TYPE_CANCEL"], "add_tokens": "public static final String TYPE_CANCEL = \" cancel \" ;", "del_tokens": ""}
{"commit_tokens": ["make", "RestorableEWMA", "a", "static", "inner", "class"], "add_tokens": "static class RestorableEWMA {", "del_tokens": "class RestorableEWMA {"}
{"commit_tokens": ["Adding", "missing", "default", "return"], "add_tokens": "return null ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "path", "to", "the", "apk", "from", "the", "permittedPath"], "add_tokens": "String libraryPermittedPath = mDataDir ;", "del_tokens": "String libraryPermittedPath = mAppDir + File . pathSeparator + mDataDir ;"}
{"commit_tokens": ["added", "coverage", "to", "test", "interfaces"], "add_tokens": "interface NothingHidden { public static int notHidden = 0 ; / / not an error public void noShadow ( int notHidden ) ; }", "del_tokens": ""}
{"commit_tokens": ["Tell", "IDEA", "to", "shutup", "about", "static", "access", "to", "instances"], "add_tokens": "* * @ noinspection AccessStaticViaInstance", "del_tokens": ""}
{"commit_tokens": ["Fix", "build"], "add_tokens": "@ Deprecated", "del_tokens": "* * @ Deprecated"}
{"commit_tokens": ["Invalid", "constructor", "call", "in", "a", "test", "causes", "all", "CI", "failure"], "add_tokens": "\" replName \" ,", "del_tokens": ""}
{"commit_tokens": ["reset", "version", "string", "in", "SdkModificator", "only", "if", "real", "changes", "in", "roots", "were", "detected"], "add_tokens": "resetVersionString ( ) ;", "del_tokens": ""}
{"commit_tokens": ["evaluate", "the", "injected", "javascript"], "add_tokens": "webView . evaluateJavaScript ( injectJavaScript ) ;", "del_tokens": "webView . loadUrl ( injectJavaScript ) ;"}
{"commit_tokens": ["Make", "nodeidx", "public", "."], "add_tokens": "public int nodeidx ;", "del_tokens": "int nodeidx ;"}
{"commit_tokens": ["removed", "import"], "add_tokens": "", "del_tokens": "import static org . junit . Assert . assertFalse ;"}
{"commit_tokens": ["ReadonlyStatusHandler", "should", "show", "a", "confirmation", "dialog", "by", "default", "."], "add_tokens": "public boolean SHOW_DIALOG = true ;", "del_tokens": "public boolean SHOW_DIALOG ;"}
{"commit_tokens": ["use", "primitive", "type", "int", "instead", "of", "Integer"], "add_tokens": "private int messageBatchSize ;", "del_tokens": "private Integer messageBatchSize ;"}
{"commit_tokens": ["Add", "@", "SuppressWarnings", "(", "fallthrough", ")", "to", "method", "with", "intentional", "fallthrough"], "add_tokens": "@ SuppressWarnings ( \" fallthrough \" )", "del_tokens": ""}
{"commit_tokens": ["removed", "System", ".", "exit", "(", "0", ")", "from", "RunTests"], "add_tokens": "", "del_tokens": "finally { System . exit ( 0 ) ; }"}
{"commit_tokens": ["LPS", "-", "41410", "-", "Organization", "role", "will", "not", "receive", "control", "panel", "view", "permissions"], "add_tokens": "scope ! = ResourceConstants . SCOPE_GROUP_TEMPLATE & &", "del_tokens": ""}
{"commit_tokens": ["b", "/", "3350774", "Enforce", "clearing", "the", "flag", "mIsHandlingMultiTouch", "."], "add_tokens": "mIsHandlingMultiTouch = false ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "max", "stacksize", "on", "EnderPearls", "."], "add_tokens": "ENDER_PEARL ( 368 , 16 ) ,", "del_tokens": "ENDER_PEARL ( 368 ) ,"}
{"commit_tokens": ["firefox", "opens", "a", "new", "tab", "every", "time"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["fixed", "null", "pointer", "exception", "in", "PShader"], "add_tokens": "context = - 1 ;", "del_tokens": "context = pgl . createEmptyContext ( ) ;"}
{"commit_tokens": ["ordering", "tests"], "add_tokens": "public JList getList ( ) {", "del_tokens": "JList getList ( ) {"}
{"commit_tokens": ["HHH", "-", "7093", "-", "Oracle", "does", "not", "support", "row", "value", "constructor", "syntax"], "add_tokens": "", "del_tokens": "public boolean supportsRowValueConstructorSyntax ( ) { return true ; }"}
{"commit_tokens": ["Invalidate", "structure", "when", "adapter", "is", "changed"], "add_tokens": "mStructureChanged = true ; markKnownViewsInvalid ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Shut", "down", "thrift", "on", "decommission", "."], "add_tokens": "stopRPCServer ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Removed", "a", "System", ".", "out"], "add_tokens": "", "del_tokens": "System . out . println ( \" released some locks for \" + tx ) ;"}
{"commit_tokens": ["removing", "empty", "lines"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Remove", "unnecessary", "imported", "package", "."], "add_tokens": "", "del_tokens": "import org . asynchttpclient . channel . ChannelPoolPartitionSelector ;"}
{"commit_tokens": ["Always", "obtain", "connection", "ID", "from", "the", "handler", "(", "which", "will", "never", "be", "null", "-"], "add_tokens": "return handler . getConnectionId ( ) ;", "del_tokens": "return getParentStream ( ) . getConnectionId ( ) ;"}
{"commit_tokens": ["Add", "mobile", "Email", "type", "."], "add_tokens": "public static final int TYPE_MOBILE = 4 ;", "del_tokens": ""}
{"commit_tokens": ["Looping", "playing", "music"], "add_tokens": "mPlayer . setLooping ( true ) ;", "del_tokens": ""}
{"commit_tokens": ["Removed", "useless", "and", "illegal", "json", "object", "in", "the", "response", "."], "add_tokens": "", "del_tokens": "builder . startObject ( ) ; builder . endObject ( ) ;"}
{"commit_tokens": ["Fix", "double", "forge", "init", "on", "server"], "add_tokens": "", "del_tokens": "FMLCommonHandler . instance ( ) . beginLoading ( this ) ;"}
{"commit_tokens": ["Deleted", "deprecated", "method"], "add_tokens": "", "del_tokens": "public CommandResult getCommandResult ( ) { return new CommandResult ( commandResult ) ; }"}
{"commit_tokens": ["Fix", "build"], "add_tokens": "onDetachedFromWindow ( ) ;", "del_tokens": "onDetachedFromWindows ( ) ;"}
{"commit_tokens": ["Fixing", "license", "header", "in", "com", ".", "phonegap", ".", "api", ".", "PluginManager"], "add_tokens": "Licensed to the Apache Software Foundation ( ASF ) under one", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "38599", "Add", "@", "Override"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["Make", "the", "sign", "in", "button", "the", "default", "so", "that", "when", "user", "presses", "Enter", "it", "will", "be", "clicked", "automatically", "."], "add_tokens": "this . getRootPane ( ) . setDefaultButton ( signinButton ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "accidental", "conversion", "of", "copyright", "from", "Atlassian", "-", ">", "mongodb", "in", "a"], "add_tokens": "* Copyright 2008 Atlassian Pty Ltd", "del_tokens": "* Copyright 2008 mongodb Pty Ltd"}
{"commit_tokens": ["Updated", "version"], "add_tokens": "private static final String VERSION = \" 0 . 3 . 0 \" ;", "del_tokens": "private static final String VERSION = \" 0 . 2 . 2 \" ;"}
{"commit_tokens": ["LPS", "-", "56126", "Resource", "type", "changes", "should", "clear", "the", "cache"], "add_tokens": "PermissionCacheUtil . clearResourceCache ( ) ;", "del_tokens": "PermissionCacheUtil . clearResourceBlockCache ( companyId , groupId , name ) ;"}
{"commit_tokens": ["Fix", "infinite", "loop", "."], "add_tokens": "request . login ( username , password ) ;", "del_tokens": "login ( username , password ) ;"}
{"commit_tokens": ["LPS", "-", "48300", "add", "@", "override"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["expose", "self", "(", ")", "to", "subclass", "."], "add_tokens": "protected T self ( ) {", "del_tokens": "private T self ( ) {"}
{"commit_tokens": ["Fix", "NullPointerException", "when", "starting", "SC", "."], "add_tokens": "", "del_tokens": "LookAndFeel . installBorder ( menuBar , null ) ;"}
{"commit_tokens": ["adjust", "the", "MessageHistory", "to", "the", "new", "LocalUserChatRoomPresenceChangeEvent"], "add_tokens": "LocalUserChatRoomPresenceChangeEvent . LOCAL_USER_JOINED )", "del_tokens": "LocalUserChatRoomPresenceChangeEvent . CHAT_ROOM_JOINED )"}
{"commit_tokens": ["added", "accuracy", "checking", "to", "native", "accel", "implementation", "this", "way", "getCurrentAcceleration", "returns", "fairly", "accurate", "results"], "add_tokens": "Log . d ( \" ACCEL \" , \" accuracy is now \" + accuracy ) ;", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "46274", "Fix", "bug"], "add_tokens": "addPortletPreferences ( portletPreferencesRow ) ;", "del_tokens": "updatePortletPreferences ( portletPreferencesRow ) ;"}
{"commit_tokens": ["Fix", "NPE", "."], "add_tokens": "return ( password = = null ? 0 : password . hashCode ( ) ) ;", "del_tokens": "return password . hashCode ( ) ;"}
{"commit_tokens": ["Don", "t", "reference", "the", "enclosing", "type", "instance", "when", "it", "s", "not", "used", "(", "memory", "optimisation", ")"], "add_tokens": "private static class PreferenceChangeListener implements Preference . OnPreferenceChangeListener", "del_tokens": "private class PreferenceChangeListener implements Preference . OnPreferenceChangeListener"}
{"commit_tokens": ["wake", "-", "up", "sleeping", "reader", "when", "stop", "is", "called"], "add_tokens": "resumeReading ( ) ;", "del_tokens": ""}
{"commit_tokens": ["invoke", "later", "to", "show", "error", "message"], "add_tokens": "is = null ;", "del_tokens": "throw new RuntimeException ( e ) ;"}
{"commit_tokens": ["remove", "wrong", "@", "Override"], "add_tokens": "", "del_tokens": "@ Override"}
{"commit_tokens": ["Set", "action", "bar", "title", "for", "Accounts", "activity", "in", "onCreate", "(", ")"], "add_tokens": "mHandler . setViewTitle ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Cancel", "the", "date", "picker", "dialog", "when", "BUTTON_NEGATIVE", "is", "clicked"], "add_tokens": "case BUTTON_NEGATIVE : cancel ( ) ; break ;", "del_tokens": ""}
{"commit_tokens": ["Add", "exclusion"], "add_tokens": "@ NoEclipseLink ( HSQLDB )", "del_tokens": ""}
{"commit_tokens": ["Added", "getter", "for", "FloatTextureData", ".", "buffer"], "add_tokens": "public FloatBuffer getBuffer ( ) { return buffer ; }", "del_tokens": ""}
{"commit_tokens": ["Remove", "unnecessary", "viewType", "assignment", "in", "LayoutParams"], "add_tokens": "", "del_tokens": "lp . viewType = mAdapter . getItemViewType ( position ) ;"}
{"commit_tokens": ["Remove", "unused", "import", "alluxio", ".", "util", ".", "OSUtils", "to", "pass", "checkstyle"], "add_tokens": "", "del_tokens": "import alluxio . util . OSUtils ;"}
{"commit_tokens": ["LPS", "-", "25775", "Prevent", "unexpected", "change", "of", "display", "language", "when", "editing", "a", "user"], "add_tokens": "else { oldLanguageId = StringPool . BLANK ; }", "del_tokens": ""}
{"commit_tokens": ["Change", "Chunk", "<", "T", ">", "to", "be", "a", "static", "inner", "class"], "add_tokens": "private static class Chunk < T >", "del_tokens": "private class Chunk < T >"}
{"commit_tokens": ["Set", "default", "wait", "strategy", "back", "to", "BLOCKING", "."], "add_tokens": "WaitStrategy . Option . BLOCKING ) ;", "del_tokens": "WaitStrategy . Option . SLEEPING ) ;"}
{"commit_tokens": ["Fixing", "the", "synth", "function", "so", "that", "queue", "processing", "continues", "."], "add_tokens": "processSpeechQueue ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "inner", ".", "unsubscribe"], "add_tokens": "", "del_tokens": "inner . unsubscribe ( ) ;"}
{"commit_tokens": ["Made", "DeviceProfile", "constructor", "public"], "add_tokens": "public DeviceProfile ( ) {", "del_tokens": "private DeviceProfile ( ) {"}
{"commit_tokens": ["don", "t", "highlight", "unassigned", "vars", "in", "boolean", "checks", "by", "default"], "add_tokens": "public boolean myIgnoreBooleanExpressions = true ;", "del_tokens": "public boolean myIgnoreBooleanExpressions = false ;"}
{"commit_tokens": ["fixing", "minor", "rounding", "bug", "in", "Helper"], "add_tokens": "return Math . round ( value * 100 ) / 100d ;", "del_tokens": "return Math . round ( value * 100 ) / 100 ;"}
{"commit_tokens": ["added", "fabs", "to", "ufuncs"], "add_tokens": "UFUNC_LIST . add ( \" fabs \" ) ;", "del_tokens": ""}
{"commit_tokens": ["Make", "spark", ".", "Response", "s", "body", "method", "public", "(", "#", "8", ")"], "add_tokens": "public String body ( ) {", "del_tokens": "String body ( ) {"}
{"commit_tokens": ["print", "logged", "messages", "in", "correct", "order", "(", "closes", "#", "47", ")"], "add_tokens": "logs = logs . append ( log ) ;", "del_tokens": "logs = logs . cons ( log ) ;"}
{"commit_tokens": ["Remove", "incorrect", "assignment"], "add_tokens": "", "del_tokens": "this . gatingSequences = tempGatingSequences ;"}
{"commit_tokens": ["Remove", "@", "Nullable", "from", "AppCompatActivity", "#", "findViewById"], "add_tokens": "", "del_tokens": "@ Nullable"}
{"commit_tokens": ["Remove", "superfluous", "assignment"], "add_tokens": "", "del_tokens": "context = null ; / / Don ' t create Context until create 1st 0MQ socket"}
{"commit_tokens": ["Maybe", "I", "undo", "this", "so", "I", "can", "merge", "a", "pull", "request", "automatically", ".", ".", "."], "add_tokens": "", "del_tokens": "public Texture getTexture ( ) { return texture ; }"}
{"commit_tokens": ["Add", "the", "missing", "non", "-", "implemented", "method", "which", "is", "breaking", "trunk", "."], "add_tokens": "public boolean isDeprecated ( ) { return false ; }", "del_tokens": ""}
{"commit_tokens": ["Properly", "handle", "empty", "layout", "in", "getFirstVisiblePosition", "(", ")"], "add_tokens": "if ( getChildCount ( ) = = 0 ) { return RecyclerView . NO_POSITION ; }", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "34194", "Remove", "unthrown", "exception"], "add_tokens": "throws SystemException {", "del_tokens": "throws PortalException , SystemException {"}
{"commit_tokens": ["Removed", "public", "from", "WebElementCreator"], "add_tokens": "class WebElementCreator {", "del_tokens": "public class WebElementCreator {"}
{"commit_tokens": ["added", "license", "header"], "add_tokens": "/ * * Copyright ( c ) 2007 Mockito contributors * This program is made available under the terms of the MIT License . * /", "del_tokens": ""}
{"commit_tokens": ["Fix", "a", "typo", "in", "comment"], "add_tokens": "/ / For use only when validating queries", "del_tokens": "/ / For use only whenvalidating queries"}
{"commit_tokens": ["Do", "not", "display", "clear", "devices", "button", "if", "not", "online"], "add_tokens": "clearDevices . setVisible ( false ) ;", "del_tokens": ""}
{"commit_tokens": ["Organize", "imports"], "add_tokens": "", "del_tokens": "import org . joda . time . DateTime ;"}
{"commit_tokens": ["LPS", "-", "46156", "Remove", "early", "escaping"], "add_tokens": "", "del_tokens": "title = HtmlUtil . escape ( title ) ;"}
{"commit_tokens": ["Fix", "password", "obscuring", "in", "TextView", "accessibility", "node"], "add_tokens": "if ( ! isPassword | | shouldSpeakPasswordsForAccessibility ( ) ) {", "del_tokens": "if ( ! isPassword ) {"}
{"commit_tokens": ["need", "store", "refresh", "status", "thread", "to", "be", "daemon"], "add_tokens": "setDaemon ( true ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "SCI", "when", "there", "is", "more", "than", "one", "JAR", "on", "the", "classpath"], "add_tokens": "continue ;", "del_tokens": "break ;"}
{"commit_tokens": ["removed", "unnessary", "code", "in", "the", "raw", "table", "example", "."], "add_tokens": "", "del_tokens": "int id = sTachyonClient . getFileId ( sTablePath ) ; sTachyonClient . deleteFile ( id ) ;"}
{"commit_tokens": ["]", "Added", "TODO", "to", "determiningIndex", "for", "current", "term", "id", "."], "add_tokens": "/ / TODO : this needs to account for rotation", "del_tokens": "/ / this needs to account for rotation"}
{"commit_tokens": ["Changed", "the", "return", "type", "of", "UnresolvedDependencyResult", ".", "getFailure", "(", ")", "."], "add_tokens": "Throwable getFailure ( ) ;", "del_tokens": "Exception getFailure ( ) ;"}
{"commit_tokens": ["Remove", "spaces", "."], "add_tokens": "public Type getType ( ) {", "del_tokens": "public Type getType ( ) {"}
{"commit_tokens": ["Improve", "javadoc", "in", "BlockDoesNotExistException"], "add_tokens": "*", "del_tokens": ""}
{"commit_tokens": ["removed", "OBE", "comment"], "add_tokens": "", "del_tokens": "/ / TODO : replace FetchItemStack and Recharge with this implementation"}
{"commit_tokens": ["add", "alternative", "method", "to", "create", "Archive", "fix", "typo"], "add_tokens": "", "del_tokens": "Po"}
{"commit_tokens": ["Removes", "override", "notation", "for", "getSSLSocketFactory", "because", "of", "signature", "conflict"], "add_tokens": "", "del_tokens": "@ Override"}
{"commit_tokens": ["Don", "t", "auto", "-", "start", "the", "query"], "add_tokens": "", "del_tokens": "start ( ) ;"}
{"commit_tokens": ["added", "license", "header"], "add_tokens": "/ * * Copyright ( c ) 2007 Mockito contributors * This program is made available under the terms of the MIT License . * /", "del_tokens": ""}
{"commit_tokens": ["Correctly", "close", "the", "context", "action", "mode", "when", "deleting", "an", "account", "."], "add_tokens": "mActionMode . finish ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "oreientation", "bug", "causing", "levers", "not", "being", "able", "to", "place", "."], "add_tokens": "if ( id < Orientation . values ( ) . length )", "del_tokens": "if ( Orientation . values ( ) . length < id )"}
{"commit_tokens": ["Don", "t", "clear", "app", "profiles", "during", "system", "upgrades", "."], "add_tokens": "", "del_tokens": "clearAppProfilesLIF ( ps . pkg , UserHandle . USER_ALL ) ;"}
{"commit_tokens": ["Added", "multichat", "operation", "set", "definition", "and", "Gibberish", "protocol", "implementation", "."], "add_tokens": "ContactPresenceStatusChangeEvent evt ) ;", "del_tokens": "ContactPresenceStatusChangeEvent evt ) ;"}
{"commit_tokens": ["Fix", "ambiguity", "due", "to", "null", "-", "compilation", "error"], "add_tokens": "VoldemortIOUtils . closeQuietly ( ( HttpResponse ) null ) ;", "del_tokens": "VoldemortIOUtils . closeQuietly ( null ) ;"}
{"commit_tokens": ["Fix", "RecoveryManagerTruncateTest", "failing", "in", "test", "-", "compression"], "add_tokens": "sync ( true ) ;", "del_tokens": ""}
{"commit_tokens": ["responseContent", "to", "protected", "so", "something", "that", "extends", "can", "see", "it"], "add_tokens": "protected ByteArrayOutputStream _responseContent ;", "del_tokens": "ByteArrayOutputStream _responseContent ;"}
{"commit_tokens": ["Remove", "not", "-", "needed", "call", "of", "ByteBuffer", ".", "clear", "(", ")", "."], "add_tokens": "", "del_tokens": "buf . clear ( ) ;"}
{"commit_tokens": ["Don", "t", "update", "TextureView", "s", "surface", "if", "the", "Layer", "doesn", "t", "exist"], "add_tokens": "if ( mLayer ! = null ) { updateLayer ( ) ; }", "del_tokens": "updateLayer ( ) ;"}
{"commit_tokens": ["Fix", "inappropriate", "@", "SuppressWarnings", "."], "add_tokens": "@ SuppressWarnings ( { \" MoreThanOneScopeAnnotationOnClass \" , \" multiple - scope \" } )", "del_tokens": "@ SuppressWarnings ( { \" MoreThanOneScopeAnnotationOnClass , multiple - scope \" } )"}
{"commit_tokens": ["Fix", "a", "crash"], "add_tokens": "if ( mInitialMotionX = = null | | mInitialMotionX . length < = pointerId ) {", "del_tokens": "if ( mInitialMotionX = = null ) {"}
{"commit_tokens": ["remove", "typo"], "add_tokens": "", "del_tokens": "2814"}
{"commit_tokens": ["Remove", "a", "lie", "from", "a", "comment"], "add_tokens": "* after load .", "del_tokens": "* after load . It is set to null once the folder has been opened once ."}
{"commit_tokens": ["correct", "null", "+", "String", "to", "not", "throw", "an", "NPE"], "add_tokens": "public Object plus ( String s ) { return \" null \" + s ; }", "del_tokens": ""}
{"commit_tokens": ["Fix", "loosing", "default", "profile", "after", "change"], "add_tokens": "return new ArrayList < ApplicationMode > ( values ) ;", "del_tokens": "return values ;"}
{"commit_tokens": ["Fix", "checkstyle"], "add_tokens": "public static SystemPropertyRule sDisableHdfsCacheRule =", "del_tokens": "public static SystemPropertyRule mDisableHdfsCacheRule ="}
{"commit_tokens": ["Remove", "unused", "local", "variable"], "add_tokens": "", "del_tokens": "private int len ;"}
{"commit_tokens": ["Invalidate", "ActionMode", "content", "rect", "on", "scroll", "."], "add_tokens": "if ( mSelectionActionMode ! = null ) { mSelectionActionMode . invalidateContentRect ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["remove", "undefined", "methodcall", "in", "AfterClass"], "add_tokens": "", "del_tokens": "Spark . clearRoutes ( ) ;"}
{"commit_tokens": ["Updated", "ConsistencyCheck", ".", "java", "for", "new", "feature"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Deprecated", "com", ".", "mongodb", ".", "MongoServerSelectionException", "class"], "add_tokens": "* @ deprecated No longer thrown . Catch MongoTimeoutException instead @ Deprecated", "del_tokens": ""}
{"commit_tokens": ["Return", "an", "empty", "string", "if", "email", "is", "null", "."], "add_tokens": "return email = = null ? \" \" : email ;", "del_tokens": "return email ;"}
{"commit_tokens": ["fixed", "description"], "add_tokens": "@ Ignore ( \" i don ' t know how to implement it nicely . . . yet : ) \" )", "del_tokens": "@ Ignore ( \" TODO \" )"}
{"commit_tokens": ["Fix", "fileHasAnnotations", "for", "Repo"], "add_tokens": "return false ;", "del_tokens": "throw new UnsupportedOperationException ( \" Should never be called ! \" ) ;"}
{"commit_tokens": ["Fix", "Preview", "initialization", "."], "add_tokens": "refreshModel ( ) ;", "del_tokens": ""}
{"commit_tokens": ["add", "comment"], "add_tokens": "public File inputDirectory ; / / used by mvn plugin but not set by tool itself .", "del_tokens": "public File inputDirectory ;"}
{"commit_tokens": ["Fix", "a", "bug", "in", "canAddToLastInputMethod", "(", ")"], "add_tokens": "return ! subtype . containsExtraValueKey ( SUBTYPE_EXTRAVALUE_EXCLUDE_FROM_LAST_IME ) ;", "del_tokens": "return subtype . containsExtraValueKey ( SUBTYPE_EXTRAVALUE_EXCLUDE_FROM_LAST_IME ) ;"}
{"commit_tokens": ["fix", "a", "bug", "in", "commonutil", "."], "add_tokens": "buf . flip ( ) ;", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "53819", "SF", "-", "Remove", "blank", "line"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Fixing", "the", "build", "for", "real", "."], "add_tokens": "return mClient ;", "del_tokens": "return mClient"}
{"commit_tokens": ["remove", "assertion"], "add_tokens": "", "del_tokens": "assert isRefreshing ( ) ;"}
{"commit_tokens": ["Fixed", "Javadocs", "in", "LocalSession", "."], "add_tokens": "* @ param cuiVersion", "del_tokens": "* @ param CUIVersion"}
{"commit_tokens": ["Fix", "descriptor", "leak", "after", "accepting", "connections"], "add_tokens": "s . mFdCreatedInternally = true ;", "del_tokens": ""}
{"commit_tokens": ["conversation", "settings", "fix", "#", "368"], "add_tokens": "return mConversationPrefs ;", "del_tokens": "return mPrefs ;"}
{"commit_tokens": ["Call", "super", ".", "onCreate", "(", ")"], "add_tokens": "super . onCreate ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "#", "3134"], "add_tokens": "if ( pipe . container = = null ) return ;", "del_tokens": ""}
{"commit_tokens": ["Added", "SpawnReason", ".", "SLIME_SPLIT", "."], "add_tokens": "* When a slime splits * / SLIME_SPLIT , / * *", "del_tokens": ""}
{"commit_tokens": ["Fix", "Internal", ".", "inMilliseconds", "(", ")", "where", "the", "offset", "was", "a", "byte", "instead"], "add_tokens": "final int offset ) {", "del_tokens": "final byte offset ) {"}
{"commit_tokens": ["Voicemail", "number", "setting", "is", "throwing", "exception"], "add_tokens": "break ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "reading", "sleep", "policy"], "add_tokens": "readWifiSleepPolicy ( ) ;", "del_tokens": "readStayAwakeConditions ( ) ;"}
{"commit_tokens": ["Changed", "superclass", "of", "org", ".", "mongodb", ".", "BulkWriteException", "to", "com", ".", "mongodb", ".", "MongoException"], "add_tokens": "import com . mongodb . MongoException ;", "del_tokens": ""}
{"commit_tokens": ["update", "HttpUtils"], "add_tokens": "currRequestExpiry = HttpGetCache . getDefaultExpiryTime ( ) ;", "del_tokens": "currRequestExpiry = defaultExpiry ;"}
{"commit_tokens": ["Expose", "enum", "argument", "method", "."], "add_tokens": "public ConstantWriter addArgument ( Snippet snippet ) {", "del_tokens": "ConstantWriter addArgument ( Snippet snippet ) {"}
{"commit_tokens": ["Fix", "test", "failures", "for", "CASSANDRA", "-", "5175"], "add_tokens": "if ( isStopped )", "del_tokens": "if ( ! isStopped )"}
{"commit_tokens": ["ignore", "case", "when", "matching", "a", "rebase", "error", "message"], "add_tokens": "if ( StringUtil . containsIgnoreCase ( line , REBASE_NO_CHANGE_INDICATOR ) ) {", "del_tokens": "if ( line . contains ( REBASE_NO_CHANGE_INDICATOR ) ) {"}
{"commit_tokens": ["fixed", "missing", "javadoc"], "add_tokens": "* @ return the properties in aFile", "del_tokens": ""}
{"commit_tokens": ["Fix", "disable", "/", "enable", "upnp", "option", "in", "wizard", "."], "add_tokens": "return upnpBox . isSelected ( ) ;", "del_tokens": "return iceBox . isSelected ( ) ;"}
{"commit_tokens": ["Make", "APNS", ".", "java", "final"], "add_tokens": "public final class APNS {", "del_tokens": "public class APNS {"}
{"commit_tokens": ["Increased", "max", "number", "of", "items", "rendered", "from", "3", "to", "5", "."], "add_tokens": "final static private int numItemsToRender = 5 ;", "del_tokens": "final static private int numItemsToRender = 3 ;"}
{"commit_tokens": ["remove", "parentKey", "cruft"], "add_tokens": "", "del_tokens": "private String parentKey ;"}
{"commit_tokens": ["removed", "unused", "import"], "add_tokens": "", "del_tokens": "import rajawali . util . RajLog ;"}
{"commit_tokens": ["Add", "DIRECTORY_SEPARATOR", "constant"], "add_tokens": "public static String DIRECTORY_SEPARATOR = Constants . DIRECTORY_SEPARATOR ;", "del_tokens": ""}
{"commit_tokens": ["ignore", "comments"], "add_tokens": "if ( element instanceof PsiWhiteSpace | | element instanceof PsiErrorElement | | element instanceof PsiComment ) {", "del_tokens": "if ( element instanceof PsiWhiteSpace | | element instanceof PsiErrorElement ) {"}
{"commit_tokens": ["KeyDispatcher", "always", "has", "a", "non", "-", "null", "KeyChanger"], "add_tokens": "private final KeyChanger keyChanger ;", "del_tokens": "@ Nullable private KeyChanger keyChanger ;"}
{"commit_tokens": ["remove", "ugly", "focus", "highlight", "border"], "add_tokens": "scrollPane . setBorder ( BorderFactory . createEmptyBorder ( 0 , 0 , 0 , 0 ) ) ;", "del_tokens": ""}
{"commit_tokens": ["added", "buffer", "swap", "in", "Display", "(", ")", "to", "solve", "the", "garbage", "problem"], "add_tokens": "drawable . swapBuffers ( ) ;", "del_tokens": ""}
{"commit_tokens": ["don", "t", "throw", "IO", "exception", "at", "end", "of", "stream"], "add_tokens": "", "del_tokens": "throw new IOException ( \" reached end of stream . last tag was \" + nextTag ) ;"}
{"commit_tokens": ["added", "missing", "author", "tag"], "add_tokens": "* @ author Remy Maucherat", "del_tokens": ""}
{"commit_tokens": ["may", "as", "well", "make", "this", "by", "default"], "add_tokens": "getSketchbookTemplatesFolder ( ) . mkdirs ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Add", "missing", "Override", "annotation"], "add_tokens": "@ Override public String toString ( ) {", "del_tokens": "public String toString ( ) {"}
{"commit_tokens": ["just", "added", "author", "tag"], "add_tokens": "* @ author Jeremy Rayner", "del_tokens": ""}
{"commit_tokens": ["make", "final"], "add_tokens": "public final class HikariConfig implements HikariConfigMBean", "del_tokens": "public class HikariConfig implements HikariConfigMBean"}
{"commit_tokens": ["optimize", "imports"], "add_tokens": "", "del_tokens": "import com . intellij . openapi . progress . ProgressManager ;"}
{"commit_tokens": ["Renamed", "package", "name", "corresponding", "to", "the", "directory"], "add_tokens": "package com . fsck . k9 . activity ;", "del_tokens": "package com . fsck . k9 ;"}
{"commit_tokens": ["Fix", "check", "for", "same", "class", "in", "ArtifactCacheConnectEvent", "."], "add_tokens": "if ( ! ( event instanceof ArtifactCacheConnectEvent ) ) {", "del_tokens": "if ( ! ( event instanceof ArtifactCacheEvent ) ) {"}
{"commit_tokens": ["getLocalTableBlogId", "should", "return", "int", "instead", "of", "long"], "add_tokens": "public int getLocalTableBlogId ( ) {", "del_tokens": "public long getLocalTableBlogId ( ) {"}
{"commit_tokens": ["help", "ID", "(", "PY", "-", "4108", ")"], "add_tokens": "return \" python . reference . introduceConstant \" ;", "del_tokens": "return \" refactoring . introduceConstant \" ;"}
{"commit_tokens": ["Check", "mNativeClass", "!"], "add_tokens": "if ( mNativeClass = = 0 ) return null ;", "del_tokens": ""}
{"commit_tokens": ["LRDOCS", "-", "522", "No", "need", "for", "method", "hasComment"], "add_tokens": "", "del_tokens": "public boolean hasComment ( ) { return Validator . isNotNull ( _comment ) ; }"}
{"commit_tokens": ["Fix", "checkstyle", "violation", "-", "extra", "import", "."], "add_tokens": "", "del_tokens": "import dagger . ObjectGraph ;"}
{"commit_tokens": ["Added", "simple", "attributes", "to", "the", "Item", "."], "add_tokens": "String name ; int level ;", "del_tokens": ""}
{"commit_tokens": ["Add", "isClosed", "in", "DruidDataSource"], "add_tokens": "public boolean isClosed ( ) { return this . closed ; } }", "del_tokens": ""}
{"commit_tokens": ["Also", "update", "index", "ranges", "after", "retention", "cleaning"], "add_tokens": "server . getMongoBridge ( ) . removeIndexDateRange ( indexName ) ;", "del_tokens": ""}
{"commit_tokens": ["Adding", "notification", "for", "a", "disabled", "stream", "due", "to", "excessive", "runtime", "."], "add_tokens": "EMAIL_TRANSPORT_FAILED , STREAM_PROCESSING_DISABLED ;", "del_tokens": "EMAIL_TRANSPORT_FAILED ;"}
{"commit_tokens": ["add", "break", "statement", "so", "we", "don", "t", "fall", "through", "to", "adding", "too", "much", "to", "boarding", "time", "."], "add_tokens": "break ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "Mock", "provider", "after", "merge", "of", "#", "51"], "add_tokens": "@ Override public boolean isRegistrationRequiredForCalling ( ) { return false ; }", "del_tokens": ""}
{"commit_tokens": ["Ok", "so", "we", "need", "this", "."], "add_tokens": "SKY , OCEAN , RIVER , EXTREME_HILLS ,", "del_tokens": "SKY"}
{"commit_tokens": ["added", "missing", "status", "messages", "after", "message", "scroll"], "add_tokens": "updateStatusMessages ( ) ;", "del_tokens": ""}
{"commit_tokens": ["added", "notification"], "add_tokens": "getListAdapter ( ) . notifyDataSetChanged ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Image", "#", "setAlign", "should", "call", "invalidate", "."], "add_tokens": "invalidate ( ) ;", "del_tokens": ""}
{"commit_tokens": ["add", "Archive", "keyboard", "shortcut", "to", "MessageList", "refs", "issue", "3"], "add_tokens": "case KeyEvent . KEYCODE_V : { onArchive ( message ) ; return true ; }", "del_tokens": ""}
{"commit_tokens": ["Make", "convertToTranslucent", "a", "public", "method", "in", "Activity"], "add_tokens": "public void convertToTranslucent ( TranslucentConversionListener callback , ActivityOptions options ) {", "del_tokens": "void convertToTranslucent ( TranslucentConversionListener callback , ActivityOptions options ) {"}
{"commit_tokens": ["disable", "partial", "nashorn", "support", "while", "merging", "in", "recent", "bug", "fixes"], "add_tokens": "return false ;", "del_tokens": "return true ;"}
{"commit_tokens": ["Fix", "LabelAdjust", "set", "false", "to", "setConverged", "at", "init", "."], "add_tokens": "setConverged ( false ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "Initial", "Pull", "not", "displaying", "any", "text"], "add_tokens": "/ / FIXME : I do not like this call here onReset ( ) ;", "del_tokens": ""}
{"commit_tokens": ["remove", "redundant", "state"], "add_tokens": "", "del_tokens": "SILENT_SHUTDOWN_STATES . add ( VersionedValue . STATUS_LEFT ) ;"}
{"commit_tokens": ["don", "t", "flush", "root", "node", "if", "there", "is", "not", "much", "output", "(", "IDEA", "-", "157793", ")"], "add_tokens": "", "del_tokens": "root . flush ( ) ;"}
{"commit_tokens": ["Added", "getter", "for", "titleFormatter"], "add_tokens": "public TitleFormatter getTitleFormatter ( ) { return titleFormatter ; }", "del_tokens": ""}
{"commit_tokens": ["change", "default", "request", "connection", "timeout", "to", "3", "secs"], "add_tokens": "public static final int DEFAULT_TIMEOUT_MS = 3000 ;", "del_tokens": "public static final int DEFAULT_TIMEOUT_MS = 2500 ;"}
{"commit_tokens": ["Fixed", "a", "subtle", "bug", "I", "happened", "to", "introduce", "last", "night", "."], "add_tokens": "", "del_tokens": "return null ; return null ;"}
{"commit_tokens": ["disable", "xml", "rpc", "debug"], "add_tokens": "", "del_tokens": "/ / temp , IDEA - 91436 XmlRpc . setDebug ( true ) ;"}
{"commit_tokens": ["Remove", "the", "TAB", "key", "from", "<", "textarea", ">", "s", "."], "add_tokens": "inputType = EditorInfo . TYPE_TEXT_FLAG_MULTI_LINE | EditorInfo . TYPE_CLASS_TEXT", "del_tokens": "inputType | = EditorInfo . TYPE_TEXT_FLAG_MULTI_LINE"}
{"commit_tokens": ["Peek", "menu", "one", "time", "after", "adding", "blog", "to", "the", "app", "from", "the", "welcome", "screen", "."], "add_tokens": "mMenuDrawer . peekDrawer ( 0 ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "@", "Incubating", "from", "getProjectDirectory", "since", "this", "is", "not", "an", "experimental", "API"], "add_tokens": "", "del_tokens": "@ Incubating"}
{"commit_tokens": ["Removed", "unused", "import"], "add_tokens": "", "del_tokens": "import org . gradle . openapi . external . ui . CommandLineArgumentAlteringListenerVersion1 ;"}
{"commit_tokens": ["Correctly", "reset", "fragmentedOpCode", "on", "WS", "frame", "completion", "(", "@", "daviesian", ")"], "add_tokens": "fragmentedOpCode = - 1 ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "a", "bug", "where", "the", "lazy", "-", "initialized", "ActionBar", "object", "was", "being", "too", "lazy", "."], "add_tokens": "initActionBar ( ) ;", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "30109", "Remove", "usage", "of", "deprecated", "API"], "add_tokens": "mbCategoryPersistence . update ( curCategory ) ;", "del_tokens": "mbCategoryPersistence . update ( curCategory , false ) ;"}
{"commit_tokens": ["Turn", "off", "screenshot", "capturing", "for", "thumbnails", "."], "add_tokens": "/ / return mService . mWindowManager . screenshotApplications ( w , h ) ;", "del_tokens": "return mService . mWindowManager . screenshotApplications ( w , h ) ;"}
{"commit_tokens": ["Add", "getter", "method", "for", "line", "length", "field", "."], "add_tokens": "public int getLineLengthThreshold ( ) { return this . lineLengthThreshold ; }", "del_tokens": ""}
{"commit_tokens": ["Fixed", "checkstyle", "errors"], "add_tokens": "* @ param aAllowPackage whether to allow package visible data", "del_tokens": "* @ param aAllowProtected whether to allow package visible data"}
{"commit_tokens": ["return", "a", "blank", "plugin", "context", "path", "if", "it", "is", "null"], "add_tokens": "return pluginContextPath ! = null ? pluginContextPath : BLANK_STRING ;", "del_tokens": "return pluginContextPath ;"}
{"commit_tokens": ["Made", "exception", "public", "to", "allow", "reflective", "use", "."], "add_tokens": "public static class StartupFailureException extends Exception", "del_tokens": "private static class StartupFailureException extends Exception"}
{"commit_tokens": ["Remove", "an", "unused", "import", "."], "add_tokens": "", "del_tokens": "import android . util . Log ;"}
{"commit_tokens": ["Fix", "typo", "in", "ParserRunner", "which", "incorrectly", "maps", "the", "compiler", "s", "LanguageMode", "to", "the", "Parser", "s", "Mode", "."], "add_tokens": "return Mode . ES6_STRICT ;", "del_tokens": "return Mode . ES5_STRICT ;"}
{"commit_tokens": ["encode", "http", "params"], "add_tokens": "return HttpUtils . joinParasWithEncodedValue ( parasMap ) ;", "del_tokens": "return HttpUtils . joinParas ( parasMap ) ;"}
{"commit_tokens": ["Fix", "a", "crash", "."], "add_tokens": "if ( mMediaController ! = null ) { mMediaController . show ( 0 ) ; }", "del_tokens": "mMediaController . show ( 0 ) ;"}
{"commit_tokens": ["fixed", "problem", "when", "Xerces", "message", "is", "bound", "to", "doctype"], "add_tokens": "XmlMarkupDecl . class , XmlDoctype . class", "del_tokens": "XmlMarkupDecl . class"}
{"commit_tokens": ["StripedExecutor", "should", "interrupt", "worker", "threads", "during", "shutdown", "."], "add_tokens": "worker . interrupt ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Clear", "last", "paused", "activity", "."], "add_tokens": "mLastPausedActivity = null ;", "del_tokens": ""}
{"commit_tokens": ["Replace", "Throwables", ".", "propagate", "with", "equivalent", "throw", "e", "or", "throw", "new", "RuntimeException", "(", "e", ")", "."], "add_tokens": "throw new RuntimeException ( e ) ;", "del_tokens": "throw Throwables . propagate ( e ) ;"}
{"commit_tokens": ["AudioTrack", "will", "mark", "0", "-", "size", "buffers", "as", "consumed"], "add_tokens": "result | = RESULT_BUFFER_CONSUMED ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "inconsistent", "synchronization"], "add_tokens": "public synchronized Executor getChannelFactoryExecutor ( ) {", "del_tokens": "public Executor getChannelFactoryExecutor ( ) {"}
{"commit_tokens": ["Fix", "the", "build"], "add_tokens": "/ * * * @ hide * /", "del_tokens": ""}
{"commit_tokens": ["Fix", "issue", "that", "would", "keep", "showing", "the", "take", "over", "screen", "."], "add_tokens": "generatedUsername = null ;", "del_tokens": ""}
{"commit_tokens": ["Reset", "postsShouldRefresh"], "add_tokens": "WordPress . postsShouldRefresh = false ;", "del_tokens": ""}
{"commit_tokens": ["reduce", "delay", "prior", "to", "after", "quit", "session", "reload"], "add_tokens": "} . schedule ( 100 ) ;", "del_tokens": "} . schedule ( 200 ) ;"}
{"commit_tokens": ["Do", "not", "load", "gnustl", "in", "NativeMemoryChunk"], "add_tokens": "", "del_tokens": "SoLoaderShim . loadLibrary ( \" gnustl_shared \" ) ;"}
{"commit_tokens": ["Fixed", "the", "CS", "error", "of", "camel", "-", "lucene"], "add_tokens": "insert , query", "del_tokens": "insert , query"}
{"commit_tokens": ["JsTestDriver", "run", "configuration", "s", "layout"], "add_tokens": "revalidate ( ) ;", "del_tokens": "revalidate ( ) ;"}
{"commit_tokens": ["Fix", "routing"], "add_tokens": "return true ;", "del_tokens": ""}
{"commit_tokens": ["Move", "App", ".", "java", "to", "correct", "Package", "#", "324"], "add_tokens": "", "del_tokens": "import com . iluwatar . delegation . simple . printers . App ;"}
{"commit_tokens": ["Fixed", "issue", "where", "the", "start", "scan", "button", "would", "be", "enabled", "with", "no"], "add_tokens": "contextSelectBox . setSelectedIndex ( - 1 ) ;", "del_tokens": ""}
{"commit_tokens": ["Add", "SuppressWarnings", "annotation"], "add_tokens": "@ SuppressWarnings ( \" unchecked \" )", "del_tokens": ""}
{"commit_tokens": ["use", "the", "readonly", "buffer", "interface", "when", "you", "just", "need", "that"], "add_tokens": "fullReadOnlyBufferImplementation ,", "del_tokens": "fullMutableBufferImplementation ,"}
{"commit_tokens": ["Revert", "clear", "zombies", "after", "they", "are", "removed", "from", "timer", "list"], "add_tokens": "", "del_tokens": "zombies . clear ( ) ;"}
{"commit_tokens": ["Fix", "the", "seed", "for", "DRF", "JUnit", "."], "add_tokens": "parms . _seed = 11233 ;", "del_tokens": ""}
{"commit_tokens": ["Catch", "the", "IndexOutOfBoundsException", "thrown", "by", "AnsiColorDiagnosticListener", "."], "add_tokens": "} catch ( IndexOutOfBoundsException e ) { return null ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "transition", "not", "properly", "removing", "targets", "on", "completion", "."], "add_tokens": "", "del_tokens": "enterTransition . removeTarget ( nonExistingView ) ;"}
{"commit_tokens": ["Also", "closes", "the", "executor", "containing", "the", "connections"], "add_tokens": "executor . shutdownNow ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Register", "the", "UI", "Thread", "as", "a", "sensitive", "thread", "to", "the", "runtime"], "add_tokens": "/ / Register the UI Thread as a sensitive thread to the runtime . VMRuntime . registerSensitiveThread ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Restore", "saved", "fragment", "state"], "add_tokens": "f . mSavedFragmentState = fs . mSavedFragmentState ;", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "10836", "remove", "local", "address", "after", "do", "local", "method", "for", "Unitcast", "situation"], "add_tokens": "addresses . remove ( localControlAddress ) ;", "del_tokens": ""}
{"commit_tokens": ["removed", "badly", "placed", "finish", "(", ")", "call", "on", "error", "dialog"], "add_tokens": "", "del_tokens": "finish ( ) ;"}
{"commit_tokens": ["Fixes", "#", "208", "by", "returning", "back", "to", "posts", "list", "when", "a", "local", "draft", "is", "deleted", "."], "add_tokens": "popPostDetail ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Added", "methods", "on", "broker", "to", "integrate", "Zookeeper", "based", "broker", "."], "add_tokens": "void setLastCommittedTxId ( long txId ) ; boolean thisIsMaster ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "an", "serializable", "bug", "."], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Prevent", "infinite", "loop", "on", "exception"], "add_tokens": "return ;", "del_tokens": ""}
{"commit_tokens": ["Set", "preferred", "width", "of", "the", "author", "combobox"], "add_tokens": "myAuthor . setMinimumAndPreferredWidth ( 100 ) ;", "del_tokens": ""}
{"commit_tokens": ["CORE", "-", "2136", "Mysql", "must", "quote", "PARTITION", "as", "a", "keyword"], "add_tokens": "\" PARTITION \" ,", "del_tokens": ""}
{"commit_tokens": ["Add", "missing", "@", "Override", "."], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["Remove", "call", "that", "doesn", "t", "do", "anything", "."], "add_tokens": "", "del_tokens": "parameters . setHeaders ( headers ) ;"}
{"commit_tokens": ["Fix", "a", "trailing", "whitespace", "in", "CompilerExecutor", ".", "java"], "add_tokens": "}", "del_tokens": "}"}
{"commit_tokens": ["Deprecated", "annotation", "to", "methods", "."], "add_tokens": "@ Deprecated", "del_tokens": ""}
{"commit_tokens": ["Revert", "since", "it", "breaks", "a", "unit", "test"], "add_tokens": "protected OutputBuffer outputStreamOutputBuffer ;", "del_tokens": "protected final OutputBuffer outputStreamOutputBuffer ;"}
{"commit_tokens": ["suppress", "warning"], "add_tokens": "@ SuppressWarnings ( \" UnusedDeclaration \" )", "del_tokens": ""}
{"commit_tokens": ["Added", "parsing", "of", "Cython", "typedefs"], "add_tokens": "public void testTypedefs ( ) { doTest ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "31148", "Index", "search", "does", "not", "allow", "leading", "wildcard"], "add_tokens": "queryParser . setAllowLeadingWildcard ( true ) ;", "del_tokens": ""}
{"commit_tokens": ["build", "memory", "snaphost", "if", "a", "leak", "found"], "add_tokens": "catch ( AssertionError e ) { captureMemorySnapshot ( ) ; throw e ; }", "del_tokens": ""}
{"commit_tokens": ["Remove", "extra", "line", "break"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["disable", "legend", "when", "it", "is", "unappropriated", "(", "IDEADEV", "-", "14481", ")"], "add_tokens": "UIUtil . setEnabled ( myLegendPanel , ! DependencyUISettings . getInstance ( ) . UI_FILTER_LEGALS , true ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "memory", "leak", "."], "add_tokens": "Disposer . register ( myProject , myDockContainer ) ;", "del_tokens": ""}
{"commit_tokens": ["remove", "import", "hashmap", "statement", "since", "it", "s", "not", "been", "used", "."], "add_tokens": "", "del_tokens": "import java . util . HashMap ;"}
{"commit_tokens": ["Hide", "new", "interface", "to", "fix", "build", "."], "add_tokens": "* @ hide", "del_tokens": ""}
{"commit_tokens": ["Removed", "an", "accidental", "line", "break", "to", "retain", "the", "standard", "code", "formatting", "."], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Fix", "bug", "that", "meant", "test", "always", "hung", "until", "the", "background", "process", "count", "reached", "zero", "."], "add_tokens": "count + + ;", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "63182", "Do", "not", "disable", "permission", "check", "for", "any", "company", "admin", "trust", "only", "Omniadmin", "."], "add_tokens": "if ( permissionChecker . isOmniadmin ( ) ) {", "del_tokens": "if ( permissionChecker . isCompanyAdmin ( ) ) {"}
{"commit_tokens": ["WEB", "-", "9926", "remove", "0xhh", "postfix", "(", "property", "name", ")"], "add_tokens": "@ NotNull", "del_tokens": ""}
{"commit_tokens": ["fixed", "error", "."], "add_tokens": "", "del_tokens": "import static org . junit . Assert . assertTrue ;"}
{"commit_tokens": ["Fixed", "compatibility", "with", "new", "server", "."], "add_tokens": "hl [ ] itemArray = chest . getArray ( ) ;", "del_tokens": "hj [ ] itemArray = chest . getArray ( ) ;"}
{"commit_tokens": ["Don", "t", "check", "items", "on", "selected", "GridView"], "add_tokens": "", "del_tokens": "layout . setChecked ( true ) ;"}
{"commit_tokens": ["Fixed", "typo", "."], "add_tokens": "* events . Listeners are registered with XMPPConnection objects .", "del_tokens": "* events . Listeners are reigstered with XMPPConnection objects ."}
{"commit_tokens": ["added", "TRACE_TAG_REACT_APPS", "constants"], "add_tokens": "public static final long TRACE_TAG_REACT_APPS = 0L ;", "del_tokens": ""}
{"commit_tokens": ["reset", "picture", "orientation", "per", "issue", "#", "126"], "add_tokens": "lastPictureOrientation = - 1 ;", "del_tokens": ""}
{"commit_tokens": ["Added", "<", "icon", "in", "action", "bar"], "add_tokens": "getSupportActionBar ( ) . setDisplayHomeAsUpEnabled ( true ) ;", "del_tokens": ""}
{"commit_tokens": ["Don", "t", "backup", "night", "mode", "setting"], "add_tokens": "", "del_tokens": "UI_NIGHT_MODE ,"}
{"commit_tokens": ["LPS", "-", "68556", "Fix", "test", "failures", "."], "add_tokens": "clearCache ( ) ;", "del_tokens": "_values . put ( key , value ) ;"}
{"commit_tokens": ["Add", "C", "#", "files", "to", "the", "C", "analyzer", "for", "now"], "add_tokens": "\" CS \" , / / C #", "del_tokens": ""}
{"commit_tokens": ["Optimize", "PooledUnsafeDirectByteBuf", ".", "newInternalNioBuffer", "(", ")"], "add_tokens": "return memory ;", "del_tokens": "return memory . duplicate ( ) ;"}
{"commit_tokens": ["Removing", "callbacks", "in", "onDetachedFromWindow", "fixes", "b", "/", "7465673"], "add_tokens": "KeyguardUpdateMonitor . getInstance ( mContext ) . removeCallback ( mUpdateCallback ) ;", "del_tokens": ""}
{"commit_tokens": ["Very", "stupid", "coding", "mistake", "."], "add_tokens": "return first ;", "del_tokens": "return first ( ) ;"}
{"commit_tokens": ["make", "getVirtualFile", "public"], "add_tokens": "public VirtualFile getVirtualFile ( ) {", "del_tokens": "private VirtualFile getVirtualFile ( ) {"}
{"commit_tokens": ["Fixes", "issue", "732"], "add_tokens": "private volatile boolean running = true ;", "del_tokens": "private boolean running = true ;"}
{"commit_tokens": ["Drop", "all", "inners", "classes", "if", "sorting", "is", "needed"], "add_tokens": "delegateRunner = new JUnit38ClassRunner ( klass ) ;", "del_tokens": "initialize ( ) ;"}
{"commit_tokens": ["context", "Help", "mapping", "."], "add_tokens": "return \" project . scopes \" ;", "del_tokens": "return null ;"}
{"commit_tokens": ["Reduce", "visibility", "."], "add_tokens": "private class SocketInputBuffer implements InputBuffer {", "del_tokens": "protected class SocketInputBuffer implements InputBuffer {"}
{"commit_tokens": ["Removed", "unused", "import"], "add_tokens": "", "del_tokens": "import static org . junit . Assert . assertFalse ;"}
{"commit_tokens": ["setting", "right", "builder"], "add_tokens": "myContext . setProjectBuilder ( myModuleBuilder ) ;", "del_tokens": ""}
{"commit_tokens": ["added", "license", "header"], "add_tokens": "* Copyright ( c ) 2007 Mockito contributors", "del_tokens": "* Copyright ( c ) 2007 , Szczepan Faber ."}
{"commit_tokens": ["Don", "t", "call", "onAttach", "twice", "on", "v4", "fragments"], "add_tokens": "", "del_tokens": "fragment . onAttach ( mContext ) ;"}
{"commit_tokens": ["Remove", "accidential", "modification"], "add_tokens": "public class RecoveryFromGatewayTests extends ElasticsearchIntegrationTest {", "del_tokens": "public class RecoveryFromGatewayTesTermVectorsFields . javats extends ElasticsearchIntegrationTest {"}
{"commit_tokens": ["Fixed", "last", "fix"], "add_tokens": "if ( line < 0 )", "del_tokens": "if ( line < = 0 )"}
{"commit_tokens": ["LPS", "-", "57119", "Only", "strip", "fully", "qualified", "classname", "when", "it", "s", "NOT", "a", "literal", "string"], "add_tokens": "if ( isInsideQuotes ( content , x ) ) {", "del_tokens": "if ( ! isInsideQuotes ( content , x ) ) {"}
{"commit_tokens": ["Fix", "SearchView", "collapse", "on", "text", "input", "."], "add_tokens": "updateCloseButton ( ) ;", "del_tokens": "updateViewsVisibility ( mIconifiedByDefault ) ;"}
{"commit_tokens": ["Fix", "bug", "in", "HTTP2", "settings", "parsing"], "add_tokens": "", "del_tokens": "encoder . setMaxTableSize ( setting . getValue ( ) ) ;"}
{"commit_tokens": ["handle", "new", "nack", "packet", "in", "timeline"], "add_tokens": "case nack :", "del_tokens": ""}
{"commit_tokens": ["Fix", "mouse", "released", "."], "add_tokens": "vizEventManager . mouseReleased ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Renames", "occurrences", "of", "callParticipant", "to", "callPeer", "so", "that", "it", "would", "better", "reflect", "our", "new", "Call", "architecture", "that", "also", "includes", "conferencing", "and", "ConferenceMembers"], "add_tokens": "* @ param callPeer CallPeer", "del_tokens": "* @ param callPeer CallParticipant"}
{"commit_tokens": ["Remove", "unused", "class", "import"], "add_tokens": "", "del_tokens": "import java . io . ByteArrayInputStream ;"}
{"commit_tokens": ["Implemented", "getGL", "(", ")", "method", "in", "PLWJGL", "but", "LWJGL", "not", "tested", "after", "latest"], "add_tokens": "@ Override protected void getGL ( PGL pgl ) { }", "del_tokens": ""}
{"commit_tokens": ["Add", "TODO", "reminder", "to", "add", "support", "for", "unknown", "opcodes"], "add_tokens": "/ / TODO : handle unknown opcodes ( treat as nop )", "del_tokens": ""}
{"commit_tokens": ["Fix", "compiler", "warnings", "for", "unused", "imports"], "add_tokens": "", "del_tokens": "import data . media . Image ; import data . media . Media ;"}
{"commit_tokens": ["add", "parenthesis", "(", "PY", "-", "4542", ")"], "add_tokens": "return myElement . getText ( ) + \" ( ) \" ;", "del_tokens": "return myElement . getText ( ) ;"}
{"commit_tokens": ["Fix", "checkstyle"], "add_tokens": "*", "del_tokens": "*"}
{"commit_tokens": ["Set", "CursorWindow", "native", "pointer", "to", "null", "rather", "than", "0", "when", "disposing"], "add_tokens": "mWindowPtr = null ;", "del_tokens": "mWindowPtr = 0 ;"}
{"commit_tokens": ["Fix", "builder", "/", "filler", "work", "not", "rendering", "if", "player", "is", "far", "away"], "add_tokens": "@ Override public double getMaxRenderDistanceSquared ( ) { return Double . MAX_VALUE ; }", "del_tokens": ""}
{"commit_tokens": ["Fix", "test"], "add_tokens": "SSL_HANDSHAKE_COMPLETED_EVENT ,", "del_tokens": "SSL_HANDSHAKE_COMPLETED_EVENT ,"}
{"commit_tokens": ["remove", "stack", "trace"], "add_tokens": "", "del_tokens": "ignore . printStackTrace ( ) ;"}
{"commit_tokens": ["minimize", "memory", "used"], "add_tokens": "( ( THashSet ) visited ) . compact ( ) ; toVisit . trimToSize ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "unused", "lint", "check"], "add_tokens": "", "del_tokens": "@ SuppressLint ( \" NewApi \" )"}
{"commit_tokens": ["delete", "useless", "code"], "add_tokens": "", "del_tokens": "if ( a1 = = null & & a2 = = null ) return false ;"}
{"commit_tokens": ["enable", "apply", "button", "for", "top", "level", "configurables"], "add_tokens": "} else { result . add ( actual ) ;", "del_tokens": ""}
{"commit_tokens": ["Expose", "correct", "version", "message", "."], "add_tokens": "return conn . getVersionMessage ( ) ;", "del_tokens": "return versionMessage ;"}
{"commit_tokens": ["Remove", "defunct", "flag"], "add_tokens": "", "del_tokens": "public static final boolean TRACE_JAVASCRIPT_BRIDGE = false ;"}
{"commit_tokens": ["Fix", "typo", "from", "javadoc", "update", "in", "r1712993"], "add_tokens": "* @ return The language code for the language currently associated with this", "del_tokens": "* @ return The language code foe the language currently associated with this"}
{"commit_tokens": ["Prevent", "transparent", "region", "from", "getting", "out", "of", "sync", "with", "Surface", "Flinger"], "add_tokens": "mPreviousTransparentRegion . setEmpty ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Hiding", "DrawerLayout", "does", "not", "fire", "correct", "accessibility", "event", "."], "add_tokens": "getRootView ( ) . sendAccessibilityEvent ( AccessibilityEvent . TYPE_WINDOW_STATE_CHANGED ) ;", "del_tokens": "sendAccessibilityEvent ( AccessibilityEvent . TYPE_WINDOW_STATE_CHANGED ) ;"}
{"commit_tokens": ["Fix", "toString", "(", ")", "of", "Resources", ".", "asByteSource", "to", "match", "method", "name", "."], "add_tokens": "return \" Resources . asByteSource ( \" + url + \" ) \" ;", "del_tokens": "return \" Resources . newByteSource ( \" + url + \" ) \" ;"}
{"commit_tokens": ["added", "error", "handling"], "add_tokens": "onSearchResults ( getErrorResult ( throwable ) ) ;", "del_tokens": "/ / TODO"}
{"commit_tokens": ["Reduced", "too", "broad", "catch", "block"], "add_tokens": "} catch ( SecurityException e ) {", "del_tokens": "} catch ( Exception e ) {"}
{"commit_tokens": ["Removed", "unnecessary", "@", "SuppressWarnings"], "add_tokens": "", "del_tokens": "@ SuppressWarnings ( \" unused \" )"}
{"commit_tokens": ["use", "underlying", "type", "for", "builtins"], "add_tokens": "return spec . getSpecType ( ) . getType ( ) ; / / todo", "del_tokens": "return spec . getSpecType ( ) ; / / todo"}
{"commit_tokens": ["fixing", "#", "184"], "add_tokens": "chatMsg . setText ( \" \" ) ;", "del_tokens": ""}
{"commit_tokens": ["Recycle", "the", "comet", "flag", "(", "pretty", "large", "glitch", ".", ".", ".", ")", "."], "add_tokens": "comet = false ;", "del_tokens": ""}
{"commit_tokens": ["set", "feedfiletype", "in", "DownloadStatus", "contructor"], "add_tokens": "if ( feedfile ! = null ) { feedfileType = feedfile . getTypeAsInt ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["Missing", "import", "from", "pr", "#", "283", "."], "add_tokens": "import net . minecraft . src . CreativeTabs ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "the", "dock", "-", "insertion", "Dream", "entry", "codepath", "."], "add_tokens": "if ( mPolicy ! = null & & wasPowered ) {", "del_tokens": "if ( mPolicy ! = null ) {"}
{"commit_tokens": ["Harmonize", "null", "the", "SSL", "engine", "as", "well", "."], "add_tokens": "sslEngine = null ;", "del_tokens": ""}
{"commit_tokens": ["Log", "IOException"], "add_tokens": "LOGGER . log ( Level . FINE , \" IOException in query \" , ioe ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "empty", "line", "between", "javadoc", "and", "type"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "26283", "Add", "a", "line", "break"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["fixed", "NPE", "for", "#", "1513"], "add_tokens": "} else { return schematic ;", "del_tokens": "return schematic ; } else {"}
{"commit_tokens": ["Undo", "astrid", "lite", "constant"], "add_tokens": "public static final boolean ASTRID_LITE = false ;", "del_tokens": "public static final boolean ASTRID_LITE = true ;"}
{"commit_tokens": ["Add", "serialVersionUID", "to", "NotSupportedException"], "add_tokens": "private static final long serialVersionUID = 1L ;", "del_tokens": ""}
{"commit_tokens": ["Add", "iDEN", "to", "getNetworkTypeName", "."], "add_tokens": "case NETWORK_TYPE_IDEN : return \" iDEN \" ;", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "31184", "Fix", "SF"], "add_tokens": "classLoader =", "del_tokens": "ClassLoader classLoader ="}
{"commit_tokens": ["added", "TODO", "about", "malfunctioning", "of", "client", "port"], "add_tokens": "/ / TODO port malfunctioning", "del_tokens": ""}
{"commit_tokens": ["don", "t", "select", "default", "track", "if", "subtitle", "controller", "is", "not", "present"], "add_tokens": "if ( mSubtitleController ! = null ) { mSubtitleController . selectDefaultTrack ( ) ; }", "del_tokens": "mSubtitleController . selectDefaultTrack ( ) ;"}
{"commit_tokens": ["Do", "not", "configure", "Undertow", "listeners", "as", "reversed", "with", "the", "reverse", "proxy"], "add_tokens": "return false ;", "del_tokens": "return true ;"}
{"commit_tokens": ["Honor", "the", "Broadcaster", "manually", "set", "with", "Jersey"], "add_tokens": "isBroadcasterSpecified = true ;", "del_tokens": ""}
{"commit_tokens": ["Change", "the", "default", "compilation", "database", "format", "to", "clang", "."], "add_tokens": ". or ( CxxCompilationDatabaseFormat . CLANG ) ;", "del_tokens": ". or ( CxxCompilationDatabaseFormat . NUCLIDE ) ;"}
{"commit_tokens": ["Fix", "the", "-", "-", "dev_mode", "flag", "."], "add_tokens": "options . devMode = config . jscompDevMode ;", "del_tokens": ""}
{"commit_tokens": ["WEB", "-", "10017", "New", "Surround", "with", "emmet", "popup", "breaks", "usability"], "add_tokens": "field . selectText ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "whitespace"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Fix", "buffer", "leak", "in", "OutputChannel"], "add_tokens": "buffer . recycleBuffer ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "annotation", "of", "getBehavior"], "add_tokens": "@ Nullable", "del_tokens": "@ NonNull"}
{"commit_tokens": ["Fix", "ClipboardManager", "#", "hasText"], "add_tokens": "return getService ( ) . hasClipboardText ( ) ;", "del_tokens": "return getService ( ) . hasPrimaryClip ( ) ;"}
{"commit_tokens": ["Fix", "RLock", "s", "entries"], "add_tokens": "this . latch = new Semaphore ( 0 ) ;", "del_tokens": "this . latch = new Semaphore ( 1 ) ;"}
{"commit_tokens": ["Kill", "an", "insanely", "chatty", "log", "message"], "add_tokens": "", "del_tokens": "Log . i ( K9 . LOG_TAG , \" cursor closed \" ) ;"}
{"commit_tokens": ["removed", "author", "tag"], "add_tokens": "", "del_tokens": "/ * * * @ author Klaus Bayrhammer * /"}
{"commit_tokens": ["FlowManager", "should", "set", "mDatabaseHolder", "to", "null", "on", "destroy", "#", "251"], "add_tokens": "mDatabaseHolder = null ;", "del_tokens": ""}
{"commit_tokens": ["Adding", "types", "to", "backup", "to", "debug", "log"], "add_tokens": "\" , typesToBackup = \" + typesToBackup +", "del_tokens": ""}
{"commit_tokens": ["changed", "hardcoded", "group"], "add_tokens": "return GroupNames . VISIBILITY_GROUP_NAME ;", "del_tokens": "return GroupNames . CLASS_LAYOUT_GROUP_NAME ;"}
{"commit_tokens": ["Restored", "@", "since", "javadoc", "tag", "of", "Convertible"], "add_tokens": "* @ since 2 . 0 . 0", "del_tokens": "*"}
{"commit_tokens": ["Replicate", "text", "and", "sounds", "settings", "for", "managed", "profile", "."], "add_tokens": "HAPTIC_FEEDBACK_ENABLED , SOUND_EFFECTS_ENABLED , TEXT_SHOW_PASSWORD ,", "del_tokens": ""}
{"commit_tokens": ["declare", "location", "separately", "in", "class", "as", "is", "done", "in", "FavoritesListFragment"], "add_tokens": "private LatLon location ;", "del_tokens": ""}
{"commit_tokens": ["Add", "PBAP", "service", "start", "."], "add_tokens": "SystemService . start ( \" pbap \" ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixing", "failing", "tests", "."], "add_tokens": "return fileType instanceof LanguageFileType ;", "del_tokens": "return true ;"}
{"commit_tokens": ["compile", "pattern", "exception"], "add_tokens": "updateResults ( false ) ;", "del_tokens": "myLivePreviewController . updateInBackground ( myFindModel , false ) ;"}
{"commit_tokens": ["Should", "not", "be", "closing", "system", "dialogs", "when", "Recents", "is", "hidden", "."], "add_tokens": "", "del_tokens": "sendCloseSystemWindows ( mContext , SYSTEM_DIALOG_REASON_RECENT_APPS ) ;"}
{"commit_tokens": ["Fixed", "delete", "mapping", "to", "return", "acknowledged", "false", "when", "ack", "times", "out"], "add_tokens": "listener . onResponse ( new ClusterStateUpdateResponse ( false ) ) ;", "del_tokens": "listener . onResponse ( new ClusterStateUpdateResponse ( true ) ) ;"}
{"commit_tokens": ["Clear", "last", "paused", "activity", "."], "add_tokens": "mLastPausedActivity = null ;", "del_tokens": ""}
{"commit_tokens": ["Made", "lifetime", "available", "to", "inheritors", "of", "CoreModuleManager"], "add_tokens": "protected Disposable getLifetime ( ) { return myParentDisposable ; }", "del_tokens": ""}
{"commit_tokens": ["Fixed", "isUserConfigured"], "add_tokens": "return isUserConfigured ;", "del_tokens": "return false ;"}
{"commit_tokens": ["Make", "the", "test", "pass"], "add_tokens": "public final static class Filter implements BroadcastFilter {", "del_tokens": "private final static class Filter implements BroadcastFilter {"}
{"commit_tokens": ["Add", "transport", "route"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["add", "missing", "@", "Test", "annotation", "to", "unit", "test"], "add_tokens": "@ Test", "del_tokens": ""}
{"commit_tokens": ["add", "CamelHttpBaseUri", "header", "constant", "to", "Exchange", ".", "java"], "add_tokens": "String HTTP_BASE_URI = \" CamelHttpBaseUri \" ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "bug", "5121406", "-", "ActionBar", ".", "setLogo"], "add_tokens": "setLogo ( mContext . getResources ( ) . getDrawable ( resId ) ) ;", "del_tokens": "mContext . getResources ( ) . getDrawable ( resId ) ;"}
{"commit_tokens": ["Fix", "docs"], "add_tokens": "* Gets whether this node is visible to the user .", "del_tokens": "* Sets whether this node is visible to the user ."}
{"commit_tokens": ["implement", "enterTemp", "using", "another", "enterTemp"], "add_tokens": "return enterTemp ( 1 ) ;", "del_tokens": "return myMaxIndex + + ;"}
{"commit_tokens": ["Ignore", "elastic", "averaging", "DL", "JUnit", "for", "now", "."], "add_tokens": "@ Ignore", "del_tokens": ""}
{"commit_tokens": ["Handle", "context", "menu", "items", "as", "broadcasts", "and", "not", "activities"], "add_tokens": "sendBroadcast ( intent ) ;", "del_tokens": "AndroidUtilities . startExternalIntent ( this , intent , ACTIVITY_MENU_EXTERNAL ) ;"}
{"commit_tokens": ["Avoid", "multiple", "calls", "to", "writeInternal", "(", ")"], "add_tokens": "return ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "copyStringToBuffer", "row", "index", "calculation", "."], "add_tokens": "nativeCopyStringToBuffer ( mWindowPtr , row - mStartPos , column , buffer ) ;", "del_tokens": "nativeCopyStringToBuffer ( mWindowPtr , row , column , buffer ) ;"}
{"commit_tokens": ["add", "blockoutstream", "in", "blockinstream"], "add_tokens": "private BlockOutStream mBlockOutStream = null ;", "del_tokens": ""}
{"commit_tokens": ["only", "allow", "variable", "registration", "to", "have", "local", "names", "."], "add_tokens": "variables . put ( new QName ( name ) , value ) ;", "del_tokens": "variables . put ( QName . valueOf ( name ) , value ) ;"}
{"commit_tokens": ["Fixed", "blog", "display", "to", "show", "(", "No", "Blog", "Title", ")", "if", "the", "blog", "has", "an", "empty", "title", "."], "add_tokens": "blogNames [ blogCtr ] = \" ( No Blog Title ) \" ;", "del_tokens": "blogName = \" ( No Blog Title ) \" ;"}
{"commit_tokens": ["reverted", "content", "-", "dependent", "flag"], "add_tokens": "return false ;", "del_tokens": "return true ;"}
{"commit_tokens": ["Remove", "unused", "line", "in", "official", "plugins", "test", "."], "add_tokens": "", "del_tokens": "terminal . getOutput ( ) ;"}
{"commit_tokens": ["save", "storage", "format", "version", "after", "successful", "cleanup"], "add_tokens": "saveVersion ( ) ;", "del_tokens": ""}
{"commit_tokens": ["add", "emptyVersion", "comment"], "add_tokens": "/ / 59 adb24e - f3cd - 3e02 - 97f 0 - 5 b395827453f", "del_tokens": ""}
{"commit_tokens": ["add", "intention", "test", "to", "all", "tests", "suite"], "add_tokens": "PyIntentionTest . class ,", "del_tokens": ""}
{"commit_tokens": ["Remove", "vim", "command"], "add_tokens": "", "del_tokens": "x"}
{"commit_tokens": ["Fix", "bug", "#", "5017432", "NPE", "when", "mixing", "different", "spans", "with", "different", "font", "sizes"], "add_tokens": "ds . linkColor = mTextColorLink . getColorForState ( ds . drawableState , 0 ) ;", "del_tokens": "ds . linkColor = mTextColor . getColorForState ( ds . drawableState , 0 ) ;"}
{"commit_tokens": ["LPS", "-", "48288", "Set", "resourcePermissionMap", "to", "_resourcePermissions"], "add_tokens": "_resourcePermissions . set ( resourcePermissionMap ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "unused", "import"], "add_tokens": "", "del_tokens": "import javax . security . auth . login . LoginException ;"}
{"commit_tokens": ["Removed", "debug", "stacktrace", "in", "quarry", "arm", "."], "add_tokens": "", "del_tokens": "Thread . dumpStack ( ) ;"}
{"commit_tokens": ["LPS", "-", "57402", "Remove", "unused", "Portlet", "Key", "from", "portal"], "add_tokens": "", "del_tokens": "public static final String GROUP_STATISTICS = \" 181 \" ;"}
{"commit_tokens": ["Actually", "close", "the", "comment"], "add_tokens": "* /", "del_tokens": "/ *"}
{"commit_tokens": ["handle", "returning", "from", "camera", "without", "picture"], "add_tokens": "} else { mPendingImageUris . clear ( ) ; mPendingFileUris . clear ( ) ;", "del_tokens": ""}
{"commit_tokens": ["help", "ID", "(", "PY", "-", "4110", ")"], "add_tokens": "return \" python . reference . extractSuperclass \" ;", "del_tokens": "return \" refactoring . extract . superclass . dialog \" ;"}
{"commit_tokens": ["Sample", "only", "has", "two", "tabs", "rather", "than", "3"], "add_tokens": "private static final int NUM_PAGES = 2 ;", "del_tokens": "private static final int NUM_PAGES = 3 ;"}
{"commit_tokens": ["Prevents", "memory", "leaks", "by", "correctly", "detaching", "views", "in", "AbsListView", "."], "add_tokens": "removeDetachedView ( scrap , false ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "quality", "flaws"], "add_tokens": "public boolean isValid ( ) {", "del_tokens": "public boolean isValid ( ) {"}
{"commit_tokens": ["assign", "a", "serialVersionUID"], "add_tokens": "private static final long serialVersionUID = 1L ;", "del_tokens": ""}
{"commit_tokens": ["keep", "deprecated", "requestFBOLayer", "(", ")", "method", "for", "now", "."], "add_tokens": "@ Deprecated public void requestFBOLayer ( ) { enableFBOLayer ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["Added", "author", "."], "add_tokens": "* @ author Danny van Heumen", "del_tokens": ""}
{"commit_tokens": ["Rename", "branch"], "add_tokens": "/ / keep track of relative write position", "del_tokens": "/ / keep track of relative write position"}
{"commit_tokens": ["Fix", "NetworkRequestStatusSingleRoute", "uri", "matcher"], "add_tokens": "return tableName + \" / * \" ;", "del_tokens": "return tableName + \" / # \" ;"}
{"commit_tokens": ["Remove", "the", "static", "new", "dialog", "instance", "on", "cancel", "."], "add_tokens": "newAccountDialog = null ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "copy", "/", "paste", "error"], "add_tokens": "return ( ( NioEndpoint ) getEndpoint ( ) ) . getPollerThreadPriority ( ) ;", "del_tokens": "return ( ( NioEndpoint ) getEndpoint ( ) ) . getThreadPriority ( ) ;"}
{"commit_tokens": ["Adding", "missing", "newline"], "add_tokens": "}", "del_tokens": "}"}
{"commit_tokens": ["forgot", "the", "example"], "add_tokens": "void myButtonClicked ( ) {", "del_tokens": "void myButtonClicked ( ) throws Exception {"}
{"commit_tokens": ["Fix", "JavaDoc", "."], "add_tokens": "", "del_tokens": "* convert principal at SerializablePrincipal for backup nodes ."}
{"commit_tokens": ["enable", "antialiasing", "in", "todo", "view", "(", "IDEADEV", "-", "22461", ")"], "add_tokens": "UIUtil . applyRenderingHints ( g ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "possible", "NPE", "on", "response", "recycle", "."], "add_tokens": "} else if ( writer ! = null ) {", "del_tokens": "} else {"}
{"commit_tokens": ["Extend", "NPE", "protection"], "add_tokens": "if ( getPathInfo ( ) = = null | | getServletContext ( ) = = null ) {", "del_tokens": "if ( getPathInfo ( ) = = null ) {"}
{"commit_tokens": ["Fix", "fc", "that", "selecting", "package", "from", "updater", "when", "no", "sdcard", "."], "add_tokens": "", "del_tokens": "mActivity . getActionBar ( ) . setSelectedNavigationItem ( Util . CATEGORY_TAB_INDEX ) ;"}
{"commit_tokens": ["Add", "a", "test", "to", "verify", "that", "Hit", ".", "equals", "(", "Object", ")", "works"], "add_tokens": "assertFalse ( o1 . equals ( new Object ( ) ) ) ;", "del_tokens": ""}
{"commit_tokens": ["Set", "OTR", "session", "in", "ChatView", ".", "onBind", "."], "add_tokens": "mOtrChatSession = null ;", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "50343", "Follow", "order", "listed", "in", "constructor"], "add_tokens": "_generateThumbnail = generateThumbnail ;", "del_tokens": "_generateThumbnail = generateThumbnail ;"}
{"commit_tokens": ["Remove", "unused", "variable"], "add_tokens": "", "del_tokens": "boolean mExpanded = true ;"}
{"commit_tokens": ["Put", "the", "marker", "on", "the", "server", "ML", "file", "too"], "add_tokens": "public static final String fmlMarker = \" This is an FML marker \" ;", "del_tokens": ""}
{"commit_tokens": ["turn", "off", "cache", "saving", "nn", "system", "CFs"], "add_tokens": "0 , 0 ,", "del_tokens": "DEFAULT_ROW_CACHE_SAVE_PERIOD_IN_SECONDS , DEFAULT_KEY_CACHE_SAVE_PERIOD_IN_SECONDS ,"}
{"commit_tokens": ["LPS", "-", "12499", "Add", "ThreadLocal", "cache", "to", "GroupLocalServiceImpl", ".", "getGroup", "(", ")"], "add_tokens": "@ ThreadLocalCachable", "del_tokens": ""}
{"commit_tokens": ["Adding", "a", "semicolon", "to", "stop", "qdox", "s", "whining", "."], "add_tokens": "} ;", "del_tokens": "}"}
{"commit_tokens": ["Make", "force", "protected", "for", "sub", "-", "class", "access"], "add_tokens": "protected boolean force ;", "del_tokens": "private boolean force ;"}
{"commit_tokens": ["enable", "GL", "rendering", "of", "launch", "background"], "add_tokens": "static final boolean USE_OPENGL = true ;", "del_tokens": "static final boolean USE_OPENGL = false ;"}
{"commit_tokens": ["Fix", "driver", "stop", "handling"], "add_tokens": "case WifiMonitor . SUPPLICANT_STATE_CHANGE_EVENT :", "del_tokens": ""}
{"commit_tokens": ["Make", "View", "#", "setBackgroundDrawable", "a", "no", "-", "op", "if", "setting", "the", "same", "background", "."], "add_tokens": "if ( d = = mBGDrawable ) { return ; }", "del_tokens": ""}
{"commit_tokens": ["Fixed", "WorldEditPlayer", ".", "findFreePosition", "(", ")", "(", "/", "unstuck", ")", "moving", "players", "up", "when", "the", "player", "was", "not", "stuck", "."], "add_tokens": "return ;", "del_tokens": "return ;"}
{"commit_tokens": ["remove", "a", "space"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Fix", "default", "value", "for", "boolean", "AP", "option"], "add_tokens": "return false ;", "del_tokens": "return true ;"}
{"commit_tokens": ["Print", "newline", "when", "exiting", "CLI", "via", "ctrl", "-", "D"], "add_tokens": "System . out . println ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "bug", "where", "test", "status", "is", "not", "marked", "DONE", "when", "completed"], "add_tokens": "updateTestStatus ( TEST_DONE ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "wrong", "tint", "mode", "on", "airplane", "and", "vpn", "icons"], "add_tokens": "", "del_tokens": "v . setImageTintMode ( PorterDuff . Mode . SRC_ATOP ) ;"}
{"commit_tokens": ["Fixed", "a", "bug", "where", "HttpMessage", ".", "removeHeader", "(", ")", "leads", "to", "a", "dangling", "pointer", "in", "the", "internal", "data", "structure"], "add_tokens": "e . remove ( ) ;", "del_tokens": ""}
{"commit_tokens": ["restore", "the", "drawer", "state", "whether", "it", "is", "open", "or", "closed"], "add_tokens": "mDrawerState = menuOpen ? STATE_OPEN : STATE_CLOSED ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "bogus", "assignment", "(", "assigned", "parameter", "instead", "of", "member", ")"], "add_tokens": "this . date = null ;", "del_tokens": "date = null ;"}
{"commit_tokens": ["closure", "states", "have", "empty", "stack", "initially"], "add_tokens": "copy . emptyStack ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Make", "WebHistoryItem", "constructor", "public", "and", "hidden"], "add_tokens": "/ * * * @ hide * / public WebHistoryItem ( ) {", "del_tokens": "/ * package * / WebHistoryItem ( ) {"}
{"commit_tokens": ["LPS", "-", "8865", "Add", "comments"], "add_tokens": "/ / See LPS - 6029 and LPS - 8865", "del_tokens": ""}
{"commit_tokens": ["Remove", "java", "1", ".", "7", "method"], "add_tokens": "", "del_tokens": "fd . setMultipleMode ( false ) ;"}
{"commit_tokens": ["Fix", "dark", "text", "appearance", "by", "using", "the", "correct", "resource", "identifier"], "add_tokens": "return R . style . Bubble_TextAppearance_Dark ;", "del_tokens": "return R . drawable . bubble_white ;"}
{"commit_tokens": ["OK", "hide", "memory", "usage", "indicator", "by", "default"], "add_tokens": "SHOW_MEMORY_INDICATOR = false ;", "del_tokens": ""}
{"commit_tokens": ["removed", "typo", "in", "lwjglCanvas", "preventing", "the", "engine", "to", "build"], "add_tokens": "/ *", "del_tokens": "F / *"}
{"commit_tokens": ["introduce", "simpler", "API", "for", "symbol", "tree", "operations"], "add_tokens": "public static < T > List < T > dropTail ( List < T > items ) { return items . subList ( 0 , items . size ( ) - 1 ) ; }", "del_tokens": ""}
{"commit_tokens": ["Added", "newline", "to", "NoOutputException"], "add_tokens": "}", "del_tokens": "}"}
{"commit_tokens": ["don", "t", "clear", "disk", "cache", "on", "finish"], "add_tokens": "/ / clearDiskCache ( ) ;", "del_tokens": "clearDiskCache ( ) ;"}
{"commit_tokens": ["avoid", "UnsupportedOperationException"], "add_tokens": "return false ;", "del_tokens": "throw new UnsupportedOperationException ( ) ;"}
{"commit_tokens": ["Remove", "an", "obsolete", "comment"], "add_tokens": "", "del_tokens": "/ / TODO ( user ) : ProGuardObfuscateStep ' s final argument should be a Path"}
{"commit_tokens": ["Fix", "indent"], "add_tokens": "}", "del_tokens": "}"}
{"commit_tokens": ["LPS", "-", "53821", "Fix", "DS", "PortletKey", "in", "Portal"], "add_tokens": "\" com_liferay_document_selector_web_portlet_DocumentSelectorPortlet \" ;", "del_tokens": "\" com_liferay_documentselector_web_portlet_DocumentSelectorPortlet \" ;"}
{"commit_tokens": ["Improve", "cache", "-", "miss", "after", "config", "updated"], "add_tokens": "", "del_tokens": "mCacheTimer . update ( mTimer . currMillisecond ) ;"}
{"commit_tokens": ["Set", "node", "size", "to", "10", "in", "NodePencil", "."], "add_tokens": "size = 10f ;", "del_tokens": "size = 1f ;"}
{"commit_tokens": ["Add", "battery", "capacity", "property"], "add_tokens": "public static final int BATTERY_PROP_CAPACITY = 4 ;", "del_tokens": ""}
{"commit_tokens": ["replace", "Future", "<", "T", ">", "with", "T", "in", "EJB", "implementation"], "add_tokens": "@ NonNls String JAVA_UTIL_CONCURRENT_FUTURE = \" java . util . concurrent . Future \" ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "unused", "import"], "add_tokens": "", "del_tokens": "import java . util . ArrayList ;"}
{"commit_tokens": ["Added", "a", "ms", "tag", "to", "the", "debug", "time", "system", "out"], "add_tokens": "private static boolean debugTime = false ;", "del_tokens": "private static boolean debugTime = true ;"}
{"commit_tokens": ["fix", "bug"], "add_tokens": "checkUnreadInfo ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Changed", "debug", "statement", "for", "received", "jabber", "messages", "."], "add_tokens": "fromUserID \" the message \" + msg . toXML ( ) ) ;", "del_tokens": "+ msg . getBody ( ) ) ;"}
{"commit_tokens": ["Add", "TestsuiteSanityTestCase", "to", "check", "testsuite", "environment", "."], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Fix", "issue", "#", "1401"], "add_tokens": "public void setFloatValue ( float value ) {", "del_tokens": "public void setFloatValue ( Float value ) {"}
{"commit_tokens": ["Add", "a", "TODO"], "add_tokens": "/ / TODO : This might not be unique", "del_tokens": ""}
{"commit_tokens": ["Add", "logging", "for", "unknown", "state", "."], "add_tokens": "Log . d ( TAG , \" [ DrawerState ] Unknown : \" + state ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "typo", "for", "NETHER_WARTS"], "add_tokens": "NETHER_WARTS ( 115 ) ,", "del_tokens": "NETHER_WATER ( 115 ) ,"}
{"commit_tokens": ["Fix", "recent", "regression", "in", "DrawableContainer", "."], "add_tokens": "private Insets mInsets = Insets . NONE ;", "del_tokens": "private Insets mInsets ;"}
{"commit_tokens": ["Add", "unsubscribe", "to", "AbstractViewModel", "."], "add_tokens": "SubscriptionAnnotationUtils . unsubscribeAllAnnotated ( this ) ;", "del_tokens": ""}
{"commit_tokens": ["change", "autosave", "interval", "to", "5", "seconds"], "add_tokens": "private static final int AUTOSAVE_INTERVAL_MILLIS = 5000 ;", "del_tokens": "private static final int AUTOSAVE_INTERVAL_MILLIS = 30000 ;"}
{"commit_tokens": ["Interpreter", ".", "getProperty", "returns", "wrong", "value"], "add_tokens": "return p ;", "del_tokens": "return property ;"}
{"commit_tokens": ["TFJ", "-", "480", "renamed", "ConfigurationBuilder", "#", "setEntitiesEnabled", "to", "setIncludeEntitiesEnabled"], "add_tokens": "public ConfigurationBuilder setIncludeEntitiesEnabled ( boolean enabled ) {", "del_tokens": "public ConfigurationBuilder setEntitiesEnabled ( boolean enabled ) {"}
{"commit_tokens": ["Fix", "possible", "NPE", "while", "fail", "flush", "futures", "during", "close"], "add_tokens": "if ( closedChannelException = = null ) {", "del_tokens": "if ( closedChannelException ! = null ) {"}
{"commit_tokens": ["Added", "John", "tug", "Wilson", "in", "the", "@", "author", "tag", "of", "the", "javadoc"], "add_tokens": "* @ author John Wilson", "del_tokens": ""}
{"commit_tokens": ["Always", "invalidate", "TextView", "on", "checkForRelayout"], "add_tokens": "invalidate ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Made", "BSONReader", ".", "State", "to", "be", "public"], "add_tokens": "public enum State {", "del_tokens": "protected enum State {"}
{"commit_tokens": ["remove", "extra", "line", "break"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Renamed", "a", "method", "for", "better", "readability"], "add_tokens": "public void runEveryXSeconds ( int seconds )", "del_tokens": "public void runEvery_Seconds ( int seconds )"}
{"commit_tokens": ["Rogue", "line", "number", "for", "try", "/", "catch", "statement", "confuses", "IDE", "debuggers"], "add_tokens": "", "del_tokens": "onLineNumber ( statement , \" visitTryCatchFinally \" ) ;"}
{"commit_tokens": ["Execute", "migrations", "."], "add_tokens": "db . execSQL ( file ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "setting", "of", "media", "direction", "in", "conference", "-", "information", "."], "add_tokens": "return remoteDirection ;", "del_tokens": "return null ;"}
{"commit_tokens": ["Added", "Bucket", "volume", "constant", "to", "Liquid", "Man"], "add_tokens": "public static final int BUCKET_VOLUME = 1000 ;", "del_tokens": ""}
{"commit_tokens": ["Added", "TODO", "in", "AudioOptions", "."], "add_tokens": "/ * * * TODO Add Sound - > pMaxSimultaneousStreams *", "del_tokens": "/ * *"}
{"commit_tokens": ["Use", "the", "correct", "message", "key"], "add_tokens": "\" lambdaExpression . tooFewArgs \" ,", "del_tokens": "\" error . lambda . args . tooFew \" ,"}
{"commit_tokens": ["applied", "Stefan", "s", "patch"], "add_tokens": "out . print ( \" / > \" ) ;", "del_tokens": "out . print ( \" / > \" ) ;"}
{"commit_tokens": ["missing", "closing", "paren", "in", "code", "style", "example"], "add_tokens": "\" ' long_string_constant2 ' ) \" ;", "del_tokens": "\" ' long_string_constant2 ' \" ;"}
{"commit_tokens": ["help", "topics", "for", "plugin", "(", "PY", "-", "4087", "PY", "-", "4088", "PY", "-", "4089", ")"], "add_tokens": "@ Override public String getHelpTopic ( ) { return \" reference - python - buildout \" ; } }", "del_tokens": "}"}
{"commit_tokens": ["shiftreduce", "parser", "in", "corenlp", "requires", "pos"], "add_tokens": "return parser . requiresTags ( ) ? TOKENIZE_SSPLIT_POS : TOKENIZE_AND_SSPLIT ;", "del_tokens": "return TOKENIZE_AND_SSPLIT ;"}
{"commit_tokens": ["LPS", "-", "35241", "add", "the", "class", "that", "can", "be", "displayed", "in", "the", "UI", "to", "the", "references"], "add_tokens": "DLFileEntry . class ,", "del_tokens": "FileEntry . class ,"}
{"commit_tokens": ["Ignored", "failing", "test"], "add_tokens": "@ Ignore", "del_tokens": ""}
{"commit_tokens": ["Remove", "unused", "methods", "from", "signature"], "add_tokens": "", "del_tokens": "boolean isTransactionIsolationDirty ( ) ; boolean isAutoCommitDirty ( ) ;"}
{"commit_tokens": ["Remove", "unused", "field"], "add_tokens": "", "del_tokens": "private TachyonConf mClientConf ;"}
{"commit_tokens": ["Fix", "crash", "when", "disposing", "of", "IabHelper", "if", "service", "was", "never", "bound", "."], "add_tokens": "mServiceConn = null ;", "del_tokens": ""}
{"commit_tokens": ["removed", "unnecessary", "blank", "line"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["context", "Help", "working", "."], "add_tokens": "@ NonNls String EVALUATE = \" debugging . debugMenu . evaluate \" ;", "del_tokens": ""}
{"commit_tokens": ["remove", "debug", "println"], "add_tokens": "", "del_tokens": "System . out . println ( \" here \" ) ;"}
{"commit_tokens": ["Adds", "a", "synchronization", "point", "in", "order", "to", "wait", "for", "the", "Jingle", "node", "discovery"], "add_tokens": "synchronized ( jingleNodesSyncRoot ) { return jingleNodesServiceNode ; }", "del_tokens": "return jingleNodesServiceNode ;"}
{"commit_tokens": ["Added", "TODO", "for", "perf", "test"], "add_tokens": "/ / TODO : remove try / catch", "del_tokens": ""}
{"commit_tokens": ["make", "AccountTestSuite", "abstract"], "add_tokens": "public abstract class AccountTestSuite extends KillbillTestSuite {", "del_tokens": "public class AccountTestSuite extends KillbillTestSuite {"}
{"commit_tokens": ["Skip", "auth", "setup", "if", "AllowAllAuthenticator", "is", "used"], "add_tokens": "if ( DatabaseDescriptor . getAuthenticator ( ) instanceof AllowAllAuthenticator ) return ;", "del_tokens": ""}
{"commit_tokens": ["Initialize", "mShowWhen", "to", "true"], "add_tokens": "boolean mShowWhen = true ;", "del_tokens": "boolean mShowWhen ;"}
{"commit_tokens": ["Add", "the", "newline", "."], "add_tokens": "}", "del_tokens": "}"}
{"commit_tokens": ["Remove", "the", "divider", "in", "Upcoming", "and", "Recent", "lists", "."], "add_tokens": "list . setDivider ( null ) ;", "del_tokens": ""}
{"commit_tokens": ["update", "tree", "ui", "to", "avoid", "problems", "with", "cached", "background", "(", "BasicTreeUI", "sets", "bg", "to", "trees", ")"], "add_tokens": "myTree . updateUI ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Add", "a", "suppress", "warning"], "add_tokens": "@ SuppressWarnings ( \" cast \" )", "del_tokens": "*"}
{"commit_tokens": ["added", "RT", ".", "box", "(", "Object", ")"], "add_tokens": "static public Object box ( Object x ) { return x ; }", "del_tokens": ""}
{"commit_tokens": ["simplified", "return", "statement", "(", "and", "null", "check", ")"], "add_tokens": "return ( best ! = null ) ? best . _addr : null ;", "del_tokens": "if ( best = = null ) return null ; return best . _addr ;"}
{"commit_tokens": ["Make", "the", "Maps", "/", "Multimaps", "Iterator", "/", "Iterable", "accepting", "overloads", "package", "-", "private", "(", "MOE", "public", ")", "."], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["tcl", "/", "tk", "files", "should", "use", "the", "new", "specialized", "analyzer"], "add_tokens": "", "del_tokens": "\" TCL \" , \" TK \" ,"}
{"commit_tokens": ["Do", "not", "process", "grammars", "following", "an", "error", "during", "parsing", "(", "fixes", "#", "507", ")"], "add_tokens": "else if ( errMgr . getNumErrors ( ) = = 0 ) {", "del_tokens": "else {"}
{"commit_tokens": ["remove", "monitoring", "dead", "locks"], "add_tokens": "/ / monitorDeadlock ( ) ;", "del_tokens": "monitorDeadlock ( ) ;"}
{"commit_tokens": ["Fixed", "the", "bug", "for", "real", "."], "add_tokens": "inShutdown = true ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "a", "compilation", "error"], "add_tokens": "protected int doRead ( ChannelBufferHolder < Object > buf ) throws Exception {", "del_tokens": "protected int doRead ( ) throws Exception {"}
{"commit_tokens": ["Fixing", "failed", "tests"], "add_tokens": "super ( 123 ) ;", "del_tokens": "super ( ) ;"}
{"commit_tokens": ["Added", "get", "point", "method", "to", "Line3D", ".", "java"], "add_tokens": "public Vector3 getPoint ( int point ) { return mPoints . get ( point ) ; }", "del_tokens": ""}
{"commit_tokens": ["Add", "missing", "@", "Override", "annotation"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["SingleInspectionProfilePanel", "added", "updater", "on", "scope", "added", "from", "chooser"], "add_tokens": "myTreeTable . getTree ( ) . updateUI ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Revert", "Update", "HelloWorldEclipse", "/", "src", "/", "com", "/", "googlecode", "/", "androidannotations", "/", "helloworldeclipse", "/", "MyListActivity", ".", "java"], "add_tokens": "ListAdapter adapter ;", "del_tokens": "MyBaseAdapter adapter ;"}
{"commit_tokens": ["Removed", "@", "Ignore", "annotation", "to", "see", "if", "it", "is", "still", "failing", "#", "3691"], "add_tokens": "", "del_tokens": "@ Ignore"}
{"commit_tokens": ["actually", "call", "shutdown", "from", "async", "twitter"], "add_tokens": "super . shutdown ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "scrolling", "in", "completion", "lists", "etc", "."], "add_tokens": "", "del_tokens": "cellBounds . y = 0 ;"}
{"commit_tokens": ["Remove", "violation"], "add_tokens": "return groupId = = null ;", "del_tokens": "return groupId = = ANYONE_GROUP_ID ;"}
{"commit_tokens": ["Changing", "usage", "of", "carrier", "name", "field", "of", "SubInfoRecord"], "add_tokens": "* String that identifies SPN / PLMN * TODO : Add a new field that identifies only SPN for a sim", "del_tokens": "* The string displayed to the user that identifies Subscription Provider Name"}
{"commit_tokens": ["changing", "version", "number"], "add_tokens": "static final String VERSION = \" 0067 Alpha \" ;", "del_tokens": "static final String VERSION = \" 0065 Alpha \" ;"}
{"commit_tokens": ["Updated", "todo"], "add_tokens": "* - run HttpTest with HTTP2", "del_tokens": ""}
{"commit_tokens": ["Add", "missing", "directory", "to", "clearFilesAndCache", "(", ")"], "add_tokens": "clearFiles ( EXTERNAL_FILES_DIR ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "a", "bug", "where", "DefaultChannelFuture", ".", "isSuccess", "(", ")", "returns", "true", "even", "if", "the", "future", "is", "not", "done", "yet"], "add_tokens": "return done & & cause = = null ;", "del_tokens": "return cause = = null ;"}
{"commit_tokens": ["Remove", "cruft"], "add_tokens": "", "del_tokens": "if ( prev = = null ) { }"}
{"commit_tokens": ["Remove", "obsolete", "TODO"], "add_tokens": "", "del_tokens": "/ / TODO ( johnlenz ) : Add specialization support ."}
{"commit_tokens": ["formatting", "last", "line"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Trim", "sql", "statements", "."], "add_tokens": "return sql . trim ( ) ;", "del_tokens": "return sql ;"}
{"commit_tokens": ["Prevent", "duplicate", "loader", "onLoadFinished", "calls", "on", "config", "change"], "add_tokens": "if ( mHaveData & & ! mRetaining ) {", "del_tokens": "if ( mHaveData ) {"}
{"commit_tokens": ["Missing", "overwritten", "method"], "add_tokens": "@ Override public String getSystemSchema ( ) { return \" informix \" ; }", "del_tokens": ""}
{"commit_tokens": ["supress", "verbose", "warning", "of", "illegal", "cookie", "names"], "add_tokens": "", "del_tokens": "LOG . warn ( e . toString ( ) ) ;"}
{"commit_tokens": ["validate", "the", "topology"], "add_tokens": "topology . validate ( ) ;", "del_tokens": ""}
{"commit_tokens": ["icon", "/", ">", "tag", "generates", "HTML", "id", "containing", "dot", "when", "its", "message", "contains", "it", "(", "prevents", "url", "to", "be", "opened", "in", "dialog"], "add_tokens": "id = HtmlUtil . getAUICompatibleId ( id ) ;", "del_tokens": ""}
{"commit_tokens": ["suppress", "warnings"], "add_tokens": "@ SuppressWarnings ( \" unused \" )", "del_tokens": ""}
{"commit_tokens": ["Fix", "layout", "test", "failure", "with", "fast", "/", "events", "/", "touch", "/", "touch", "-", "stale", "-", "node", "-", "crash", "."], "add_tokens": "mPrivateHandler . removeMessages ( PREVENT_DEFAULT_TIMEOUT ) ;", "del_tokens": ""}
{"commit_tokens": ["fixes", "file", "date"], "add_tokens": "* @ version 2015 - 10 - 14", "del_tokens": "* @ version 2014 - 05 - 03"}
{"commit_tokens": ["Add", "missing", "@", "Override", "to", "LookupSource"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["Updating", "Tomcat", "s", "copy", "of", "BCEL", "as", "far", "as", "r1748500", "(", "more", "to", "come", ")"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Remove", "spurrious", "line", "clamping", "speed", "to", "average", "."], "add_tokens": "", "del_tokens": "speed = avgSpeed ;"}
{"commit_tokens": ["tried", "new", "postprocessing", "no", "luck", "yet"], "add_tokens": "/ / return PostprocessingMachine . rewrite ( consumer . asCharSequence ( ) ) ;", "del_tokens": ""}
{"commit_tokens": ["Changed", "the", "close", "method", "to", "be", "private"], "add_tokens": "private void close ( )", "del_tokens": "public void close ( )"}
{"commit_tokens": ["Fix", "RPC", "ID", "for", "ProfileRequest"], "add_tokens": "return Communication . Method . GET_PLAYER ;", "del_tokens": "return Communication . Method . GET_PLAYER_PROFILE ;"}
{"commit_tokens": ["Ignore", "intDef", "on", "pull", "from", "defaults", "."], "add_tokens": "/ / noinspection ResourceType", "del_tokens": ""}
{"commit_tokens": ["Fix", "build"], "add_tokens": "", "del_tokens": "addExpandedWindow ( ) ;"}
{"commit_tokens": ["fix", "handling", "of", "shortcuts", "with", "second", "stroke", "for", "local", "actions"], "add_tokens": "", "del_tokens": "myFoundComponent = null ;"}
{"commit_tokens": ["make", "Allocator", "a", "static", "inner", "class"], "add_tokens": "public static class Allocator extends MemtableBufferAllocator", "del_tokens": "public class Allocator extends MemtableBufferAllocator"}
{"commit_tokens": ["LPS", "-", "45869", "Fix", "warning"], "add_tokens": "@ SuppressWarnings ( \" rawtypes \" )", "del_tokens": ""}
{"commit_tokens": ["Fixed", "bug", "that", "gradle", "continued", "after", "printing", "out", "help", "message", "."], "add_tokens": "exitWithSuccess ( options ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "typo", "."], "add_tokens": "max = maxThreads ;", "del_tokens": "max = maxThreads ;"}
{"commit_tokens": ["fix", "test", "?", "!"], "add_tokens": "return JavaSdkImpl . getMockJdk15 ( \" java 1 . 5 \" ) ;", "del_tokens": "return JavaSdkImpl . getMockJdk ( \" java 1 . 5 \" ) ;"}
{"commit_tokens": ["build", "#", "2"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Add", "PageSink", "to", "SPI"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Fix", "NPE", "in", "IInputMethodSessionWrapper", ".", "executeMessage"], "add_tokens": "if ( mInputMethodSession = = null ) return ;", "del_tokens": ""}
{"commit_tokens": ["Add", "average", "current", "property"], "add_tokens": "public static final int BATTERY_PROP_CURRENT_AVG = 3 ;", "del_tokens": ""}
{"commit_tokens": ["Removed", "unnecessary", "static", "declaration"], "add_tokens": "private enum KeyParserState {", "del_tokens": "private static enum KeyParserState {"}
{"commit_tokens": ["Fix", "WorldEvent", ".", "PotentialSpawns", "Event", "passing", "the", "list", "instance", "of", "the", "ChunkProvider", "to", "users"], "add_tokens": "this . list = new ArrayList < SpawnListEntry > ( oldList ) ;", "del_tokens": "this . list = oldList ;"}
{"commit_tokens": ["Fix", "Findbugs", "nag"], "add_tokens": "private transient ClassLoader custom ;", "del_tokens": "ClassLoader custom ;"}
{"commit_tokens": ["missing", "import"], "add_tokens": "import android . content . Content ;", "del_tokens": ""}
{"commit_tokens": ["Include", "roaming", "in", "NetworkIdentity", ".", "hashCode", "(", ")", "."], "add_tokens": "return Objects . hashCode ( mType , mSubType , mSubscriberId , mRoaming ) ;", "del_tokens": "return Objects . hashCode ( mType , mSubType , mSubscriberId ) ;"}
{"commit_tokens": ["LPS", "-", "54736", "restore", "original", "behaviour"], "add_tokens": "PropsValues . XML_VALIDATION_ENABLED , false ) ;", "del_tokens": "PropsValues . XML_VALIDATION_ENABLED , true ) ;"}
{"commit_tokens": ["Make", "SynthetizedAnnotation", "public"], "add_tokens": "public interface SynthesizedAnnotation {", "del_tokens": "interface SynthesizedAnnotation {"}
{"commit_tokens": ["fixed", "reloading", "language", "level", "when", "iml", "-", "file", "is", "changed", "externally"], "add_tokens": "else { myLanguageLevel = null ; }", "del_tokens": ""}
{"commit_tokens": ["Fix", "whitespace", "for", "querydsl", "-", "scala"], "add_tokens": "public class PlaceHolder { }", "del_tokens": "public class PlaceHolder { }"}
{"commit_tokens": ["Correctly", "show", "watched", "button", "after", "adding", "movie", "."], "add_tokens": "mWatchedButton . setVisibility ( View . VISIBLE ) ;", "del_tokens": ""}
{"commit_tokens": ["removed", "unnecessary", "copy", "of", "database"], "add_tokens": "init ( 1 ) ;", "del_tokens": "init ( 2 ) ;"}
{"commit_tokens": ["LPS", "-", "62746", "See", "UpgradeImageGallery", "we", "re", "executing", "the", "wrong", "batch"], "add_tokens": "ps2 . executeBatch ( ) ;", "del_tokens": "ps1 . executeBatch ( ) ;"}
{"commit_tokens": ["Optimize", "imports", "."], "add_tokens": "", "del_tokens": "import org . junit . Test ;"}
{"commit_tokens": ["Try", "and", "handle", "death", "on", "startup", "a", "bit", "cleaner"], "add_tokens": "if ( sidedDelegate = = null ) { return false ; }", "del_tokens": ""}
{"commit_tokens": ["Fix", "startDtmf", "."], "add_tokens": "getActiveFgCall ( ) . getPhone ( ) . startDtmf ( c ) ;", "del_tokens": "getActiveFgCall ( ) . getPhone ( ) . sendDtmf ( c ) ;"}
{"commit_tokens": ["Removing", "console", "spam"], "add_tokens": "", "del_tokens": "System . out . println ( text ) ;"}
{"commit_tokens": ["Fix", "master", "build"], "add_tokens": "WebStorage . getInstance ( ) . deleteAllData ( ) ;", "del_tokens": "WebStorage . getInstance ( ) . deleteAllDatabases ( ) ;"}
{"commit_tokens": ["remove", "javadoc", "warning"], "add_tokens": "", "del_tokens": "* @ created Mar 3 , 2011"}
{"commit_tokens": ["Tweak", "DELAY_UI", "for", "16Hz", "to", "15Hz"], "add_tokens": "delay = 66667 ;", "del_tokens": "delay = 60000 ;"}
{"commit_tokens": ["Fix", "broken", "Grails", "debug", "."], "add_tokens": "if ( element ! = null ) { return getClassNameForJvm ( ( PsiClass ) element ) ; }", "del_tokens": ""}
{"commit_tokens": ["Fixed", "deserialization", "problem", "in", "DatePicker", "."], "add_tokens": "updateSpinners ( ) ;", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "44362", "Add", "@", "Override"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["Fix", "NPE", "(", "WI", "-", "22515", ")", "."], "add_tokens": "@ Nullable", "del_tokens": ""}
{"commit_tokens": ["Fix", "Groovy", "-", "226", "."], "add_tokens": "cv . visitVarInsn ( ALOAD , 0 ) ;", "del_tokens": "loadThisOrOwner ( ) ;"}
{"commit_tokens": ["Fixed", "misc", "problems", "caused", "by", "the", "renaming", "/", "move", "of", "BSON", "classes", "."], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["adressing", "review", "comment", "for", "#", "TACHYON", "-", "1243"], "add_tokens": "private Version ( ) { }", "del_tokens": "private Version ( ) { }"}
{"commit_tokens": ["Fixing", "memory", "leak", "related", "to", "TouchFocus", "and", "pooling", "."], "add_tokens": "target = null ;", "del_tokens": ""}
{"commit_tokens": ["remove", "unused", "NAME", "enum"], "add_tokens": "", "del_tokens": "NAME ,"}
{"commit_tokens": ["Fix", "javadoc", "of", "setHandleMethods"], "add_tokens": "* Set whether methods are handled ( default true )", "del_tokens": "* Set whether fields are handled ( default true )"}
{"commit_tokens": ["don", "t", "hold", "console", "on", "a", "hard", "reference", "until", "the", "project", "is", "closed"], "add_tokens": "", "del_tokens": "Disposer . register ( project , this ) ;"}
{"commit_tokens": ["Fixed", "missing", "throwing", "of", "Exception"], "add_tokens": "throw new RuntimeException ( e ) ;", "del_tokens": ""}
{"commit_tokens": ["Add", "a", "line", "to", "separate", "tachyon", "."], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Add", "invalidate", "hack", "."], "add_tokens": "view . invalidate ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Made", "CommandLineOptions", ".", "getOptionsIterator", "(", ")", "package", "private"], "add_tokens": "Iterator < Option > getOptionsIterator ( ) {", "del_tokens": "public Iterator < Option > getOptionsIterator ( ) {"}
{"commit_tokens": ["Not", "needed", "import"], "add_tokens": "", "del_tokens": "import java . io . IOException ;"}
{"commit_tokens": ["Parameterized", "testing"], "add_tokens": "public class ParameterizedTestExample extends AndroidTestCase {", "del_tokens": "public class RealmTest extends AndroidTestCase {"}
{"commit_tokens": ["rename", "section", "incorrect", "input", "checking", "deleted", "(", "IDEA", "-", "152896", ")"], "add_tokens": "return true ;", "del_tokens": "return inputString . indexOf ( ' . ' ) < 0 ;"}
{"commit_tokens": ["discard", "(", ")", "method", "on", "the", "Transaction", "object"], "add_tokens": "public void discard ( ) { client . discard ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["Don", "t", "allow", "the", "upgrade", "activity", "to", "be", "backed", "out", "of"], "add_tokens": "@ Override public void onBackPressed ( ) { / / Don ' t allow the back button to finish this activity }", "del_tokens": ""}
{"commit_tokens": ["Theme", "Preview", "WebView", "needs", "js", "enabled"], "add_tokens": "mWebView . getSettings ( ) . setJavaScriptEnabled ( true ) ;", "del_tokens": ""}
{"commit_tokens": ["removed", "non", "-", "sense", "call"], "add_tokens": "", "del_tokens": "fbreader . hideDictionarySelection ( ) ;"}
{"commit_tokens": ["add", "throws", "notice", "for", "isPlaying"], "add_tokens": "* @ throws IllegalStateException if the internal player engine has not been * initialized or has been released .", "del_tokens": ""}
{"commit_tokens": ["Fix", "typo"], "add_tokens": "* Ensures that the output buffer is cleared after it has been flushed .", "del_tokens": "* Ensures that tne output buffer is cleared after it has been flushed ."}
{"commit_tokens": ["Remove", "unused", "import"], "add_tokens": "", "del_tokens": "import java . io . FileNotFoundException ;"}
{"commit_tokens": ["removed", "unused", "private", "fields", "gesture", "{", "Detector", "Listener", "}"], "add_tokens": "", "del_tokens": "private GestureDetector gestureDetector ; private View . OnTouchListener gestureListener ;"}
{"commit_tokens": ["Add", "missing", "annotation", "."], "add_tokens": "* @ Inject", "del_tokens": ""}
{"commit_tokens": ["catch", "more", "exceptions", "during", "tearDown", "(", ")"], "add_tokens": "catch ( Throwable error ) {", "del_tokens": "catch ( AssertionError error ) {"}
{"commit_tokens": ["LPS", "-", "47261", "Test", "isn", "t", "creating", "the", "group"], "add_tokens": "", "del_tokens": "@ DeleteAfterTestRun"}
{"commit_tokens": ["Have", "a", "nice", "stacktrace", "!"], "add_tokens": "public static final Object LOCK = new PsiLock ( ) ;", "del_tokens": "public static final Object LOCK = new Object ( ) ;"}
{"commit_tokens": ["Remove", "Chronometer", "logspew", "."], "add_tokens": "", "del_tokens": "Slog . v ( \" Chronometer \" , \" updateText : sec = \" + seconds + \" mFormat = \" + mFormat + \" text = \" + text ) ;"}
{"commit_tokens": ["removed", "unnecessary", "import"], "add_tokens": "", "del_tokens": "import org . spockframework . lang . SpreadWildcard ;"}
{"commit_tokens": ["Fixed", "a", "regression", "in", "AuthenticatingConnection", "on", "checking", "for", "isClosed", "(", ")", "."], "add_tokens": "return wrapped = = null | | wrapped . isClosed ( ) ;", "del_tokens": "return wrapped = = null ;"}
{"commit_tokens": ["Add", "constraint", "violation", "standard", "error", "code"], "add_tokens": "CONSTRAINT_VIOLATION ( 0x0000_0010 ) ,", "del_tokens": ""}
{"commit_tokens": ["At", "least", "temporarily", "fix", "catastrophic", "failure", "on", "screen", "rotation", "by", "basically", "restarting", "the", "whole", "app", "."], "add_tokens": "finish ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Suppress", "incorrect", "warning"], "add_tokens": "@ SuppressWarnings ( \" null \" ) / / context is not null", "del_tokens": ""}
{"commit_tokens": ["applied", "Stefan", "s", "patch"], "add_tokens": "out . print ( \" / > \" ) ;", "del_tokens": "out . print ( \" / > \" ) ;"}
{"commit_tokens": ["Fixed", "a", "missing", "import", "."], "add_tokens": "import com . jme3 . network . service . ClientServiceManager ;", "del_tokens": ""}
{"commit_tokens": ["change", "default", "notebook", "type", "to", "html"], "add_tokens": "return \" html_document \" ;", "del_tokens": "return \" pdf_document \" ;"}
{"commit_tokens": ["Add", "support", "for", "custom", "fonts"], "add_tokens": "protected static native boolean initFontType ( byte [ ] byteData , String name , boolean bold , boolean italic ) ;", "del_tokens": ""}
{"commit_tokens": ["Do", "not", "leak", "locale", "alert", "dialog"], "add_tokens": "ad . show ( ) ;", "del_tokens": "AlertDialog alert = ad . create ( ) ; alert . show ( ) ;"}
{"commit_tokens": ["Some", "kernels", "have", "frandom", "and", "erandom"], "add_tokens": "mSeeded = true ;", "del_tokens": "throw new SecurityException ( \" Failed to mix seed into \" + URANDOM_FILE , e ) ;"}
{"commit_tokens": ["removed", "log", "output"], "add_tokens": "", "del_tokens": "Log . d ( LOGTAG , \" called delete account \" ) ;"}
{"commit_tokens": ["Added", "book", "reference", "to", "singleton", "enum", "implementation", "."], "add_tokens": "* Effective Java 2 nd Edition ( Joshua Bloch ) p . 18", "del_tokens": ""}
{"commit_tokens": ["improve", "test", "data", "for", "EnumAutoGeneratedMethods", "case"], "add_tokens": "TestEnum [ ] vals = TestEnum . values ( ) ;", "del_tokens": "TestEnum . values ( ) ;"}
{"commit_tokens": ["scripting", "changes"], "add_tokens": "private boolean statisticsEnabled = true ;", "del_tokens": "private boolean statisticsEnabled = false ;"}
{"commit_tokens": ["Fix", "SOE", "."], "add_tokens": "return true ;", "del_tokens": "getNode ( ) ; return hasInitializer ( ) ;"}
{"commit_tokens": ["Fixed", "RedissonConcurrentMapTest"], "add_tokens": "", "del_tokens": "redisson . getKeys ( ) . flushdb ( ) ; redisson . shutdown ( ) ;"}
{"commit_tokens": ["Breaks", "the", "loop"], "add_tokens": "break ;", "del_tokens": ""}
{"commit_tokens": ["resize", "renderer"], "add_tokens": "graphics . setSize ( width , height ) ;", "del_tokens": ""}
{"commit_tokens": ["added", "TODO", "comment"], "add_tokens": "/ / TODO allow other classloaders here", "del_tokens": ""}
{"commit_tokens": ["dispatch", "up", "event", "to", "fix", "fling"], "add_tokens": "dispatchTouchEvent ( event ) ;", "del_tokens": ""}
{"commit_tokens": ["Use", "the", "method", "provided", "for", "changing", "state", "."], "add_tokens": "stateChange ( State . IDLE , State . CLOSED_FINAL ) ;", "del_tokens": "if ( state = = State . IDLE ) { state = State . CLOSED_FINAL ; }"}
{"commit_tokens": ["Project", "thumbnail", "should", "have", "the", "same", "aspect", "ratio"], "add_tokens": "switch ( mI . getAspectRatio ( ) ) {", "del_tokens": "switch ( getAspectRatio ( ) ) {"}
{"commit_tokens": ["applied", "patch", "for", "CAMEL", "-", "105", "from", "Aaron", "Crickenberger", "with", "thanks", "!"], "add_tokens": "byteBuffer . clear ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Add", "a", "missing", "@", "Required"], "add_tokens": "@ Required", "del_tokens": ""}
{"commit_tokens": ["Delete", "temp", "zip", "file", "once", "it", "is", "unzipped"], "add_tokens": "Files . delete ( zip ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "spurious", "blank", "line"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["disable", "column", "cache", "by", "default"], "add_tokens": "return 0 ;", "del_tokens": "return 1024 * 1024 ;"}
{"commit_tokens": ["removed", "@", "Nullable", "from", "getVirtualFile", "(", ")", "since", "it", "is", "almost", "never", "null"], "add_tokens": "", "del_tokens": "@ Nullable"}
{"commit_tokens": ["add", "updateLoadedFiles"], "add_tokens": "updateLoadedFiles ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Removed", "testing", "code"], "add_tokens": "private static boolean debugTime = false ;", "del_tokens": "private static boolean debugTime = true ;"}
{"commit_tokens": ["remove", "useless", "println"], "add_tokens": "", "del_tokens": "/ / System . out . println ( \" Setting notified false \" ) ;"}
{"commit_tokens": ["Revert", "r1032232"], "add_tokens": "", "del_tokens": "outs [ depth ] . setWriter ( null ) ;"}
{"commit_tokens": ["Add", "a", "new", "line", "in", "the", "annotaiton", "body", "to", "conform", "to", "Google", "style", "."], "add_tokens": "public @ interface AutoValue { }", "del_tokens": "public @ interface AutoValue { }"}
{"commit_tokens": ["fix", "a", "minor", "bug"], "add_tokens": "public MustacheWriter ( Writer writer ) {", "del_tokens": "protected MustacheWriter ( Writer writer ) {"}
{"commit_tokens": ["Remove", "invalid", "assertion", "(", "by", "abreslav", ")"], "add_tokens": "", "del_tokens": "assert value instanceof GraphCommitCell ;"}
{"commit_tokens": ["Allow", "access", "to", "JSError", "node"], "add_tokens": "public final Node node ;", "del_tokens": "final Node node ;"}
{"commit_tokens": ["Initialized", "ImportingJob", ".", "lastTouched"], "add_tokens": "lastTouched = System . currentTimeMillis ( ) ;", "del_tokens": ""}
{"commit_tokens": ["don", "t", "show", "sidebar", "menu", "by", "default"], "add_tokens": "", "del_tokens": "mDrawer . showMenu ( ) ;"}
{"commit_tokens": ["Reset", "times", "and", "tag", "."], "add_tokens": "startTimeStampMsec = Long . MAX_VALUE ; endTimeStampMsec = 0 ; tag = null ;", "del_tokens": ""}
{"commit_tokens": ["Removes", "a", "mistakenly", "committed", "System", ".", "out", ".", "println", "(", ")"], "add_tokens": "", "del_tokens": "System . out . println ( \" d1 \" ) ;"}
{"commit_tokens": ["Fix", "battery", "state", "information", "propagation", "in", "Lock", "Screen"], "add_tokens": "mBatteryStatus = BATTERY_STATUS_UNKNOWN ;", "del_tokens": "mBatteryStatus = BATTERY_STATUS_FULL ;"}
{"commit_tokens": ["Fixed", "public", "test"], "add_tokens": "public String one ;", "del_tokens": "String one ;"}
{"commit_tokens": ["Trailing", "white", "-", "space", "police", "."], "add_tokens": "* Watch directory .", "del_tokens": "* Watch directory ."}
{"commit_tokens": ["Parser", "now", "uses", "new", "colvalue", "instea", "value", "."], "add_tokens": "sqlBuilder . colvalue ( expression ) ;", "del_tokens": "sqlBuilder . value ( expression ) ;"}
{"commit_tokens": ["LPS", "-", "53113", "add", "@", "Deprecated"], "add_tokens": "@ Deprecated", "del_tokens": ""}
{"commit_tokens": ["Fixed", "bug", "of", "disappeared", "rounded", "angles", "after", "first", "display"], "add_tokens": "", "del_tokens": "} else { imageView . setImageBitmap ( loadedImage ) ;"}
{"commit_tokens": ["EftarFileReader", ".", "close", "(", ")", "cannot", "throw", "exception"], "add_tokens": "public void close ( ) {", "del_tokens": "public void close ( ) throws IOException {"}
{"commit_tokens": ["Fix", "format"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Fix", "double", "tap", "issue", "with", "listener", "#", "1411"], "add_tokens": "", "del_tokens": "return super . onDoubleTap ( e ) ;"}
{"commit_tokens": ["added", "system", ".", "exit", "to", "file", "menu", "exit", "item"], "add_tokens": "System . exit ( 0 ) ;", "del_tokens": ""}
{"commit_tokens": ["Implemented", "new", "constructor", "in", "EmbeddedNeo", "."], "add_tokens": "this . shellServer = null ; NeoJvmInstance . start ( null , storeDir , true ) ;", "del_tokens": "/ / TODO : implement"}
{"commit_tokens": ["Do", "not", "call", "processDrmInfo", "if", "acquireDrmInfo", "returns", "null"], "add_tokens": "if ( null = = drmInfo ) { return ERROR_UNKNOWN ; }", "del_tokens": ""}
{"commit_tokens": ["Don", "t", "long", "press", "if", "preventDefault", "is", "called"], "add_tokens": "unscheduleLongPressLocked ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Prevent", "new", "ripples", "when", "max", "reached"], "add_tokens": "return ;", "del_tokens": ""}
{"commit_tokens": ["Added", "a", "shutdown", "method"], "add_tokens": "void shutdown ( ) ;", "del_tokens": ""}
{"commit_tokens": ["remove", "change", "from", "another", "PR", "to", "avoid", "confusion"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["FastArray", "doesn", "t", "overwrite", "toString", "(", ")", "method"], "add_tokens": "public String toString ( ) { return toList ( ) . toString ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["always", "call", "single", "constructor", "of", "VariableDescriptorImpl"], "add_tokens": "this ( containingDeclaration , annotations , name , null ) ;", "del_tokens": "super ( containingDeclaration , annotations , name ) ;"}
{"commit_tokens": ["Use", "more", "readable", "message", "for", "invalid", "symlink", "trees"], "add_tokens": "buildTarget . getUnflavoredBuildTarget ( ) ,", "del_tokens": "buildTarget ,"}
{"commit_tokens": ["Vertical", "drag", "supported", "overriding", "clampViewPositionVertical", "method", "."], "add_tokens": "@ Override public int clampViewPositionVertical ( View child , int top , int dy ) { return top ; }", "del_tokens": ""}
{"commit_tokens": ["Make", "final"], "add_tokens": "public final class Schedulers {", "del_tokens": "public class Schedulers {"}
{"commit_tokens": ["Fix", "more", "type", "info", "caching", "bugs", "."], "add_tokens": "updateCacheInfo ( mType ) ;", "del_tokens": ""}
{"commit_tokens": ["Turn", "off", "screenshot", "capturing", "for", "thumbnails", "."], "add_tokens": "/ / return mService . mWindowManager . screenshotApplications ( w , h ) ;", "del_tokens": "return mService . mWindowManager . screenshotApplications ( w , h ) ;"}
{"commit_tokens": ["debug", "logging", "removed"], "add_tokens": "", "del_tokens": "System . out . println ( size ) ;"}
{"commit_tokens": ["Upped", "version", "number", "will", "release", "0", ".", "8", ".", "1", "immediately", "after", "this", "."], "add_tokens": "private static final String VERSION = \" 0 . 8 . 1 \" ;", "del_tokens": "private static final String VERSION = \" 0 . 8 \" ;"}
{"commit_tokens": ["Add", "permission", "model", "-", "-", "Adding", "a", "newline", "at", "the", "end", "of", "FsPermission", ".", "java"], "add_tokens": "}", "del_tokens": "}"}
{"commit_tokens": ["Remove", "leftover", "logging"], "add_tokens": "", "del_tokens": "Log . d ( \" BOOM \" , \" scrollToPosition called : \" + position ) ;"}
{"commit_tokens": ["add", "deprecation", "reason", "to", "PropertyNode", "#", "setClosureSharedVariable"], "add_tokens": "/ * * * @ deprecated not used anymore , has no effect * /", "del_tokens": ""}
{"commit_tokens": ["Actually", "fix", "dupe", "drop"], "add_tokens": "if ( ! player . worldObj . isRemote )", "del_tokens": "if ( player . isServerWorld ( ) )"}
{"commit_tokens": ["Remove", "whitespace"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Fix", "finalization"], "add_tokens": "mPrivateHandler . post ( new Runnable ( ) {", "del_tokens": "post ( new Runnable ( ) {"}
{"commit_tokens": ["Fix", "MockBlock", "compile"], "add_tokens": "super ( id , Material . field_76259_v ) ;", "del_tokens": "super ( id , Material . field_1316_v ) ;"}
{"commit_tokens": ["Remove", "deprecated", "comment", "."], "add_tokens": "", "del_tokens": "/ / TODO Add boardings , walk distance , etc . . ."}
{"commit_tokens": ["throw", "exception", "on", "remove", "since", "it", "s", "not", "supported", "(", "IDEA", "-", "CR", "-", "3123", ")"], "add_tokens": "throw new UnsupportedOperationException ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "pages", "overlapping", "in", "Stack", "transition", "effect", "."], "add_tokens": "if ( left ! = null ) { left . bringToFront ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["Added", "param", "for", "thread", "(", ")", "reference", "see", "processing", "-", "docs", "#", "5"], "add_tokens": "* @ param name name of the function to be executed in a separate thread", "del_tokens": ""}
{"commit_tokens": ["update", "branch", "info", "after", "push", "because", "new", "remote", "branch", "may", "be", "created"], "add_tokens": "GitRepositoryManager . getInstance ( myProject ) . updateAllRepositories ( GitRepository . TrackedTopic . BRANCHES ) ; / / new remote branch may be created", "del_tokens": ""}
{"commit_tokens": ["Remove", "TimerManager", "from", "ThreadLocal", "on", "clear", "(", ")"], "add_tokens": "mThreadLocalManager . remove ( ) ;", "del_tokens": ""}
{"commit_tokens": ["remove", "unneeded", "override"], "add_tokens": "", "del_tokens": "@ Override"}
{"commit_tokens": ["Added", "missing", "ndef", "technology", "to", "getTech", "."], "add_tokens": "case TagTechnology . MIFARE_CLASSIC_NDEF :", "del_tokens": ""}
{"commit_tokens": ["make", "addPropertyDirect", "(", ")", "non", "-", "final", "so", "that", "subclass", "can", "override", "."], "add_tokens": "protected void addPropertyDirect ( String key , Object value ) {", "del_tokens": "protected final void addPropertyDirect ( String key , Object value ) {"}
{"commit_tokens": ["Close", "the", "message", "logger", "so", "that", "the", "file", "is", "closed", "on", "windows"], "add_tokens": "msgLog . close ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "compiler", "warning"], "add_tokens": "private Class < ? > telephonyThreads ;", "del_tokens": "private Class telephonyThreads ;"}
{"commit_tokens": ["Added", "getSelectedItem", "to", "the", "ShadowAdpaterView", "base", "class", "for", "Android", "s", "Spinner", "class", "."], "add_tokens": "public Object getSelectedItem ( ) {", "del_tokens": "public Object getSelectedItem ( ) {"}
{"commit_tokens": ["Returns", "the", "correct", "elevation", "in", "GnssStatus"], "add_tokens": "return mElevations [ satIndex ] ;", "del_tokens": "return 0f ;"}
{"commit_tokens": ["execute", "Checker", ".", "destroy", "(", ")", "at", "the", "end", "of", "each", "test"], "add_tokens": "aC . destroy ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "infinite", "loop", "."], "add_tokens": "request . addAsyncListener ( listener , servletRequest , servletResponse ) ;", "del_tokens": "addAsyncListener ( listener , servletRequest , servletResponse ) ;"}
{"commit_tokens": ["fixing", "unused", "import"], "add_tokens": "", "del_tokens": "import android . view . KeyEvent ;"}
{"commit_tokens": ["Fix", "a", "bug", "in", "ControllerActivityCounter"], "add_tokens": "return mIdleTimeMillis ;", "del_tokens": "return mRxTimeMillis ;"}
{"commit_tokens": ["fixed", "day", "/", "night", "switch"], "add_tokens": "Reader . resetView ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Don", "t", "invalidate", "the", "options", "menu", "from", "the", "message", "list", "as", "we", "open", "a"], "add_tokens": "", "del_tokens": "invalidateOptionsMenu ( ) ;"}
{"commit_tokens": ["Remove", "creation", "of", "synthetic", "accessor", "method", "."], "add_tokens": "final Handler handler ;", "del_tokens": "private final Handler handler ;"}
{"commit_tokens": ["remove", "old", "import"], "add_tokens": "", "del_tokens": "import com . mongodb . BasicDBObject ;"}
{"commit_tokens": ["add", "missing", "break", "in", "switch"], "add_tokens": "break ;", "del_tokens": ""}
{"commit_tokens": ["support", "Ruby", "1", ".", "9", "named", "groups", "in", "regular", "expressions", "(", "RUBY", "-", "5822", ")"], "add_tokens": "public boolean supportsRubyNamedGroups ( ) { return false ; }", "del_tokens": ""}
{"commit_tokens": ["Addressing", "review", "comments", "."], "add_tokens": "* @ return the TTL", "del_tokens": "* @ return the TLL"}
{"commit_tokens": ["if", "null", "check", "version", "."], "add_tokens": "if ( myVersion = = null ) { checkVersion ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["Added", "a", "TODO"], "add_tokens": "/ / TODO SF we need to provide hash code implementation so that there are no unexpected , slight perf issues", "del_tokens": ""}
{"commit_tokens": ["Added", "comments", "."], "add_tokens": "* A listener that is fired anytime a roster is changed .", "del_tokens": ""}
{"commit_tokens": ["Resource", "bundle", "editor", "duplicates", "entries", "when", "new", "property", "action", "is", "used", "IDEA", "-", "141669"], "add_tokens": "return ;", "del_tokens": ""}
{"commit_tokens": ["ToggleButton", "could", "keep", "a", "reference", "to", "a", "previous", "drawable"], "add_tokens": "} else { mIndicatorDrawable = null ;", "del_tokens": ""}
{"commit_tokens": ["Add", "new", "RIL", "command", "for", "sending", "ack", "to", "solicited", "async", "and", "unsolicited", "msg", "."], "add_tokens": "int RIL_RESPONSE_ACKNOWLEDGEMENT = 800 ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "weird", "import", "from", "previous", "commit", "."], "add_tokens": "", "del_tokens": "import org . apache . abdera . parser . ParseException ;"}
{"commit_tokens": ["fixed", "getGitExecutable", "(", ")", "(", "according", "to", "ConfigurableModifiedTest", ")"], "add_tokens": "return myPathToGit = = null ? defaultGit ( ) : myPathToGit ;", "del_tokens": "return myPathToGit ;"}
{"commit_tokens": ["Made", "config", "parameter", "sdk", "not", "@", "required", "so", "that", "standalone", "goals", "can", "be", "run", "from", "commandline", "."], "add_tokens": "", "del_tokens": "* @ required"}
{"commit_tokens": ["Supressing", "rawtypes", "warning", "in", "test", "class"], "add_tokens": "@ SuppressWarnings ( \" rawtypes \" )", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "39662", "Add", "@", "Override"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["Not", "reinitializing", "the", "backing", "arrays", "for", "matrices", "and", "lights", "."], "add_tokens": "", "del_tokens": "lightsAllocated = false ; matricesAllocated = false ;"}
{"commit_tokens": ["Removed", "unneeded", "import", "."], "add_tokens": "", "del_tokens": "import buildcraft . transport . Gate . GateKind ;"}
{"commit_tokens": ["Add", "setter", "for", "exceptionTranslator", "#", "617"], "add_tokens": "public void setExceptionTranslator ( SQLExceptionTranslator exceptionTranslator ) { this . exceptionTranslator = exceptionTranslator ; }", "del_tokens": ""}
{"commit_tokens": ["removed", "synchronized", "statement", "which", "was", "unintentionally", "added", "in", "checkin", "r3157"], "add_tokens": "public void processSdpAnswer ( CallParticipant responder ,", "del_tokens": "public synchronized void processSdpAnswer ( CallParticipant responder ,"}
{"commit_tokens": ["Making", "public", "Get", "enum", "package", "private"], "add_tokens": "enum Get {", "del_tokens": "public enum Get {"}
{"commit_tokens": ["Using", "ObjectId", "constructor", "instead", "of", "massageToObjectId", "factory", "method"], "add_tokens": "final ObjectId id = new ObjectId ( \" 50d3332018c6a1d8d1662b61 \" ) ;", "del_tokens": "final ObjectId id = ObjectId . massageToObjectId ( \" 50d3332018c6a1d8d1662b61 \" ) ;"}
{"commit_tokens": ["ResourceCache", "should", "honor", "useFileMappedBuffer", "if", "set"], "add_tokens": "_useFileMappedBuffer = useFileMappedBuffer ;", "del_tokens": ""}
{"commit_tokens": ["LRDOCS", "-", "1548", "Remove", "unnecessary", "comma", "that", "causes", "JavadocFormatter", "to", "throw", "errors"], "add_tokens": "EnableLuceneReplicateWriteAdvice . class", "del_tokens": "EnableLuceneReplicateWriteAdvice . class ,"}
{"commit_tokens": ["Keep", "current", "view", "state", "after", "having", "downloaded", "the", "complete", "message"], "add_tokens": "", "del_tokens": "MessageView . this . mMessage = message ;"}
{"commit_tokens": ["add", "a", "shutdown", "method", "to", "shutdown", "the", "executor", "service"], "add_tokens": "public static void shutdown ( ) { es . shutdownNow ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "35256", "Fix", "broken", "test"], "add_tokens": "emailAddress . setCompanyId ( TestPropsValues . getCompanyId ( ) ) ;", "del_tokens": ""}
{"commit_tokens": ["revert", "fix", "until", "root", "cause", "has", "been", "found"], "add_tokens": "", "del_tokens": "outputBuffer . checkConverter ( ) ;"}
{"commit_tokens": ["Fix", "column", "name", "."], "add_tokens": "\" Weekyear \" ,", "del_tokens": "\" YearOfWY \" ,"}
{"commit_tokens": ["Add", "missed", "initializer", "for", "setter"], "add_tokens": "initializeDefault ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "extra", "newline"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Don", "t", "use", "the", "application", "context", "to", "start", "the", "Accounts", "activity", "(", "because", "then", "we", "d", "have", "to", "create", "a", "new", "task", ")"], "add_tokens": "Accounts . listAccounts ( this ) ;", "del_tokens": "Accounts . listAccounts ( getApplicationContext ( ) ) ;"}
{"commit_tokens": ["Adding", "extra", "line"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Add", "ES5_CLASS_EXTENDING_ES6_CLASS", "to", "TypeCheck", ".", "ALL_DIAGNOSTICS", "so", "that", "it", "can", "be", "turned", "off", "."], "add_tokens": "ES5_CLASS_EXTENDING_ES6_CLASS ,", "del_tokens": ""}
{"commit_tokens": ["Ooops", "really", "correct", "the", "spelling", "of", "pool", "now", "."], "add_tokens": "* is associated with a connection pool .", "del_tokens": "* is associated with a connection poorel ."}
{"commit_tokens": ["Initialize", "visible", "to", "false", "to", "reflect", "the", "real", "visibility", "state"], "add_tokens": "visible = false ;", "del_tokens": "visible = true ;"}
{"commit_tokens": ["Don", "t", "drop", "sentence", "separators", "."], "add_tokens": "ret . add ( \" \" ) ;", "del_tokens": ""}
{"commit_tokens": ["Add", "default", "propagation", "back", "to", "Explode", "."], "add_tokens": "setPropagation ( new CircularPropagation ( ) ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "timeout", "value", "not", "having", "a", "default", "."], "add_tokens": "int timeoutMilliseconds = AsyncHttpRequest . DEFAULT_TIMEOUT ;", "del_tokens": "int timeoutMilliseconds ;"}
{"commit_tokens": ["Creates", "lock", "file", "parent", "dirs", "if", "necessary"], "add_tokens": "lockFile . getParentFile ( ) . mkdirs ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Removed", "fixed", "TODO"], "add_tokens": "public @ interface InjectMock { }", "del_tokens": "public @ interface InjectMock { / / TODO should also inject spies }"}
{"commit_tokens": ["Implemented", "getOpacity"], "add_tokens": "return this . alpha ;", "del_tokens": "return 255 ;"}
{"commit_tokens": ["Fix", "API", "typo"], "add_tokens": "public Builder addResponseFilter ( ResponseFilter responseFilter ) {", "del_tokens": "public Builder addRequestFilter ( ResponseFilter responseFilter ) {"}
{"commit_tokens": ["added", "newline", "."], "add_tokens": "}", "del_tokens": "}"}
{"commit_tokens": ["getCurrentTime", "always", "return", "0", "if", "preparing", "is", "not", "finish"], "add_tokens": "if ( ! mReady ) { return 0 ; }", "del_tokens": ""}
{"commit_tokens": ["Return", "the", "disambiguated", "Chinese", "relation", ".", ".", "."], "add_tokens": "return rel ;", "del_tokens": ""}
{"commit_tokens": ["really", "refresh", "bikeshare", "stations", "in", "service"], "add_tokens": "stations . remove ( station ) ;", "del_tokens": ""}
{"commit_tokens": ["remove", "whitespace", "from", "ActiveSession"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Removed", "char", ".", ".", "."], "add_tokens": "}", "del_tokens": "} g"}
{"commit_tokens": ["Updating", "package", "name"], "add_tokens": "package com . interview . dynamic ;", "del_tokens": "package com . interview . array ;"}
{"commit_tokens": ["Renamed", "commands", "in", "DB", ".", "java", "(", "merge", "fail", ")"], "add_tokens": "database . admin ( ) . drop ( ) ;", "del_tokens": "database . commands ( ) . drop ( ) ;"}
{"commit_tokens": ["Add", "JOURNAL_READ", "to", "reader", "base", "permissions", "."], "add_tokens": "JOURNAL_READ ,", "del_tokens": ""}
{"commit_tokens": ["Add", "NEAR", "QueryOperator"], "add_tokens": "public static final String NEAR = \" $ near \" ;", "del_tokens": ""}
{"commit_tokens": ["Directly", "propagate", "Activity", "titles", "to", "action", "bars"], "add_tokens": "if ( mActionBar ! = null ) { mActionBar . setTitle ( title ) ; }", "del_tokens": ""}
{"commit_tokens": ["Fix", "cloud", "status", "availability", "from", "old", "URL", "(", "v1", ")", "."], "add_tokens": "@ Override public RequestServer . API_VERSION [ ] supportedVersions ( ) { return SUPPORTS_V1_V2 ; }", "del_tokens": ""}
{"commit_tokens": ["Fix", "build"], "add_tokens": "querySpec . getSearchSortSpec ( ) ,", "del_tokens": ""}
{"commit_tokens": ["Smart", "expand", "API", "for", "structure", "view", "trees"], "add_tokens": "@ Override public boolean isSmartExpand ( ) { return false ; }", "del_tokens": ""}
{"commit_tokens": ["o", "Expose", "the", "resumable", "download", "setting", "in", "SimpleAsyncHttpClient", ".", "DerivedBuilder"], "add_tokens": "DerivedBuilder setResumableDownload ( boolean resume ) ;", "del_tokens": ""}
{"commit_tokens": ["Removes", "a", "static", "modifier", "that", "sneaked", "in"], "add_tokens": "private boolean copyFile ( File src , File target ) {", "del_tokens": "private static boolean copyFile ( File src , File target ) {"}
{"commit_tokens": ["Fixed", "gateKind", "variable"], "add_tokens": "public int gateKind = 0 ;", "del_tokens": "public int gateKind = - 1 ;"}
{"commit_tokens": ["we", "could", "be", "leaking", "file", "descriptors", "here"], "add_tokens": "tin . close ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "issue", "with", "clearing", "the", "map", "of", "native", "objects", "without", "clearing", "the", "ReferenceQueue", "."], "add_tokens": "refQueue = new ReferenceQueue < Object > ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Commit", "transaction"], "add_tokens": "ft . commit ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "a", "potential", "CPU", "cache", "issue", "."], "add_tokens": "private volatile ServerSocket myServerSocket ;", "del_tokens": "private ServerSocket myServerSocket ;"}
{"commit_tokens": ["Fix", "license", "info", "."], "add_tokens": "* LGPL v2 . 1 licensed", "del_tokens": "* GPL v2 licensed"}
{"commit_tokens": ["Fix", "name"], "add_tokens": "String CLASSNAME_SUFFIX = \" $ $ NUTZAOP \" ;", "del_tokens": "String CLASSNAME_SUFFIX = \" $ $ NATZAOP \" ;"}
{"commit_tokens": ["removed", "redundant", "annotation"], "add_tokens": "", "del_tokens": "@ Override"}
{"commit_tokens": ["Fix", "bug", "4099023", "-", "Phantom", "clicks", "on", "some", "websites"], "add_tokens": "& & mPreventDefault ! = PREVENT_DEFAULT_IGNORE & & mPreventDefault ! = PREVENT_DEFAULT_NO ) ;", "del_tokens": "& & mPreventDefault ! = PREVENT_DEFAULT_IGNORE ) ;"}
{"commit_tokens": ["Set", "animation", "to", "null", "after", "canceling", "current", "anim", "."], "add_tokens": "setAnimation ( null ) ;", "del_tokens": ""}
{"commit_tokens": ["now", "Buddy", "has", "method", "isAwaitingAuthorization"], "add_tokens": "public boolean isAwaitingAuthorization ( ) { return false ; }", "del_tokens": ""}
{"commit_tokens": ["Fix", "warning", "on", "TwoWayView", "s", "SavedState"], "add_tokens": "static class SavedState extends BaseSavedState {", "del_tokens": "private static class SavedState extends BaseSavedState {"}
{"commit_tokens": ["Resolving", "a", "field", "naming", "conflict", "caused", "by", "the", "table", "join", "."], "add_tokens": "public static final String RAW_CONTACT_IS_READ_ONLY = \" raw_contact_is_read_only \" ;", "del_tokens": "public static final String IS_READ_ONLY = \" is_read_only \" ;"}
{"commit_tokens": ["added", "TODO"], "add_tokens": "/ / TODO get rid of matchers and use assertors to investigate the idea and make testing simpler", "del_tokens": ""}
{"commit_tokens": ["Have", "the", "final", "setVisibility", "cause", "a", "requestLayout", "."], "add_tokens": "mView . setVisibility ( mFinalVisibility ) ;", "del_tokens": "mView . setTransitionVisibility ( mFinalVisibility ) ;"}
{"commit_tokens": ["Reset", "scroll", "position", "when", "clear", "state"], "add_tokens": "scrollTo ( 0 , 0 ) ;", "del_tokens": ""}
{"commit_tokens": ["no", "argument", "constructor", "adjust", "Javadoc"], "add_tokens": "", "del_tokens": "* * @ param message Error message ."}
{"commit_tokens": ["LPS", "-", "8479", "StringServletResponse", "should", "reset", "the", "inner", "writer"], "add_tokens": "_unsyncStringWriter . reset ( ) ;", "del_tokens": "_unsyncStringWriter = new UnsyncStringWriter ( true ) ;"}
{"commit_tokens": ["Fix", "error"], "add_tokens": "public List < Street > getStreets ( ) {", "del_tokens": "public Collection < Street > getStreets ( ) {"}
{"commit_tokens": ["remove", "System", ".", "out", ".", "println", "from", "FakeBase64"], "add_tokens": "", "del_tokens": "System . out . println ( \" HELLO ! ! ! \" ) ;"}
{"commit_tokens": ["remove", "uuid"], "add_tokens": "", "del_tokens": "private String uuid ;"}
{"commit_tokens": ["LPS", "-", "24529", "Kernel", "s", "DocumentConversionUtil", "using", "com", ".", "liferay", ".", "portal", ".", "kernel", ".", "util", ".", "File", "instead", "of", "java", ".", "io", ".", "File"], "add_tokens": "import java . io . File ;", "del_tokens": ""}
{"commit_tokens": ["removed", "JDK", "1", ".", "4", "dependency"], "add_tokens": "protected Panel createCounterPanel ( ) {", "del_tokens": "protected Panel createCounterPanel ( ) throws HeadlessException {"}
{"commit_tokens": ["Could", "cause", "unnecessary", "exception"], "add_tokens": "if ( hw = = null | | hw . length = = 0 )", "del_tokens": "if ( hw = = null )"}
{"commit_tokens": ["Fix", "a", "typo", "causing", "compilation", "problem", "."], "add_tokens": "public class DRFTest extends TestUtil {", "del_tokens": "public class DRFClassificationTest extends TestUtil {"}
{"commit_tokens": ["Fix", "an", "index", "out", "of", "bounds", "exception", "when", "moving", "an"], "add_tokens": "if ( updatePos & & channel > = 0 )", "del_tokens": "if ( updatePos & & renderer ! = null )"}
{"commit_tokens": ["Add", "a", "command", "line", "flag", "to", "enable", "using", "types", "for", "optimization", "."], "add_tokens": "public void setUseTypesForOptimization ( boolean useTypesForOptimization ) { this . useTypesForOptimization = useTypesForOptimization ; }", "del_tokens": ""}
{"commit_tokens": ["Made", "Device", "a", "final", "class", "."], "add_tokens": "public final class Device", "del_tokens": "public class Device"}
{"commit_tokens": ["Fix", "build", "-", "remove", "obsolete", "import", "of", "Animatable"], "add_tokens": "", "del_tokens": "import android . animation . Animatable ;"}
{"commit_tokens": ["removed", "empty", "statement"], "add_tokens": "", "del_tokens": ";"}
{"commit_tokens": ["Fix", "double", "counting", "of", "written", "characters", "."], "add_tokens": "", "del_tokens": "charsWritten + = len ;"}
{"commit_tokens": ["avoid", "use", "of", "a", "temp", "variable"], "add_tokens": "getLocalStore ( ) . resetVisibleLimits ( getDisplayCount ( ) ) ;", "del_tokens": "LocalStore localStore = getLocalStore ( ) ; localStore . resetVisibleLimits ( getDisplayCount ( ) ) ;"}
{"commit_tokens": ["Suppress", "onAttach", "deprecation", "warning", "in", "ReaderPhotoViewerFragment"], "add_tokens": "@ SuppressWarnings ( \" deprecation \" )", "del_tokens": ""}
{"commit_tokens": ["resolving", "return", "is", "unnecessary", "as", "the", "last", "statement", "in", "a", "void", "method", "TCBuild", "=", "438"], "add_tokens": "", "del_tokens": "return ;"}
{"commit_tokens": ["Don", "t", "launch", "broadcast", "receiver", "processes", "during", "boot"], "add_tokens": "intent . addFlags ( Intent . FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT ) ;", "del_tokens": ""}
{"commit_tokens": ["Avoid", "NPE"], "add_tokens": "ready = Boolean . FALSE ;", "del_tokens": ""}
{"commit_tokens": ["added", "TODO"], "add_tokens": "* TODO better error reporting - important case *", "del_tokens": ""}
{"commit_tokens": ["correct", "a", "comment"], "add_tokens": "* Outermost HttpServletRequest in the chain", "del_tokens": "* Outer most HttpServletRequest in the chain"}
{"commit_tokens": ["Fix", "error", "with", "setText", "from", "layout"], "add_tokens": "setText ( ) ;", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "58662", "I", "assume", "order", "matters", "so", "let", "s", "add", "a", "line", "break"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Removed", "unnecessary", "cast", "."], "add_tokens": "return response ;", "del_tokens": "return ( HttpServletResponse ) response ;"}
{"commit_tokens": ["Fix", "tests", "returning", "correct", "text", "range", "from", "pre", "-", "format", "processor", "."], "add_tokens": "return range ;", "del_tokens": "return element . getTextRange ( ) ;"}
{"commit_tokens": ["Remove", "an", "obsolete", "code", "comment"], "add_tokens": "", "del_tokens": "/ * * * Command for reading the historical records from a file off the UI thread . * /"}
{"commit_tokens": ["Raised", "maximum", "size", "of", "GELF", "messages", "to", "8192", "byte"], "add_tokens": "private static final int MAX_PACKET_SIZE = 8192 ;", "del_tokens": "private static final int MAX_PACKET_SIZE = 4096 ;"}
{"commit_tokens": ["remove", "listener", "in", "order", "to", "avoid", "memory", "leak", "in", "preferences"], "add_tokens": "mPreferenceManager . setOnPreferenceTreeClickListener ( null ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "GLM", "job", "fail", "path", "to", "call", "Job", ".", "fail", "(", ")", "."], "add_tokens": "failed ( ex ) ;", "del_tokens": ""}
{"commit_tokens": ["should", "this", "test", "still", "exist", "?", "?", "?"], "add_tokens": "assertNotNull ( c ) ;", "del_tokens": ""}
{"commit_tokens": ["remove", "dead", "method"], "add_tokens": "", "del_tokens": "public void onSuspected ( Host host ) { }"}
{"commit_tokens": ["fixed", "test", "name", "for", "smart", "enter", "test"], "add_tokens": "public void testDocTypeRType ( ) {", "del_tokens": "public void testDocTypeRtype ( ) {"}
{"commit_tokens": ["Turn", "off", "sanitizer", "expansion", "in", "separate", "preprocess", "and", "compile", "mode"], "add_tokens": "sanitizer . changePathSize ( 0 ) ) ;", "del_tokens": "sanitizer ) ;"}
{"commit_tokens": ["Placed", "all", "the", "field", "variables", "on", "their", "own", "lines", "for", "consistency"], "add_tokens": "protected double mRotateX ; protected double mRotateY ; protected double mRotateZ ;", "del_tokens": "protected double mRotateX , mRotateY , mRotateZ ;"}
{"commit_tokens": ["make", "memory", "clear", "intent", "obvious"], "add_tokens": "super . clear ( ) ;", "del_tokens": "clear ( ) ;"}
{"commit_tokens": ["Fix", "support", "for", "transfering", "folders", "and", "playlists", "."], "add_tokens": "MtpConstants . FORMAT_ASSOCIATION , MtpConstants . FORMAT_ABSTRACT_AV_PLAYLIST ,", "del_tokens": ""}
{"commit_tokens": ["fix", "constructor", "access", "warning"], "add_tokens": "AndroidParcelableExtension ( Types types ) {", "del_tokens": "public AndroidParcelableExtension ( Types types ) {"}
{"commit_tokens": ["Add", "server", "info"], "add_tokens": "return \" Undertow 1 . 0 . Alpha1 \" ; / / todo : fix this", "del_tokens": "return null ;"}
{"commit_tokens": ["improve", "sqlparser"], "add_tokens": "case ESCAPE :", "del_tokens": ""}
{"commit_tokens": ["Fix", "critical", "dupe", "bug", "in", "AWB"], "add_tokens": "slot . setStackInSlot ( null ) ;", "del_tokens": ""}
{"commit_tokens": ["fix", "duplicate", "resetDeltaRequest", "(", ")", "call", "."], "add_tokens": "super . setId ( id , true ) ;", "del_tokens": "super . setId ( id ) ;"}
{"commit_tokens": ["Fix", "checkstyle", "again"], "add_tokens": "abstract static class HeadHandler implements ChannelOutboundHandler {", "del_tokens": "static abstract class HeadHandler implements ChannelOutboundHandler {"}
{"commit_tokens": ["Fixing", "up", "the", "standalone", "activity"], "add_tokens": "import android . app . Activity ;", "del_tokens": "import java . lang . reflect . Field ;"}
{"commit_tokens": ["Use", "the", "better", "IOException", "type", "(", "any", "other", "exception", "is", "totally", "unexpected", ")", "."], "add_tokens": "} catch ( IOException e ) {", "del_tokens": "} catch ( Exception e ) {"}
{"commit_tokens": ["Fix", "bug", "2516434"], "add_tokens": "", "del_tokens": "mLastTouchMode = isInTouchMode ? TOUCH_MODE_ON : TOUCH_MODE_OFF ;"}
{"commit_tokens": ["Suppress", "test", "class", "with", "unused", "fields"], "add_tokens": "@ SuppressWarnings ( \" unused \" )", "del_tokens": ""}
{"commit_tokens": ["Fix", "build", "."], "add_tokens": "@ Mock private ConsoleService consoleService ;", "del_tokens": ""}
{"commit_tokens": ["Removed", "unused", "import"], "add_tokens": "", "del_tokens": "import java . net . InetSocketAddress ;"}
{"commit_tokens": ["Make", "buck", "project", "not", "process", "annotations", "by", "default", "."], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["cleaning", "all", "content"], "add_tokens": "graphdb . cleanContent ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Turn", "off", "HSM", "debugging", "in", "DataConnection", "to", "verbose", "."], "add_tokens": "setDbg ( false ) ;", "del_tokens": "setDbg ( true ) ;"}
{"commit_tokens": ["LPS", "-", "57681", "are", "we", "upgrading", "components", "or", "bundles", "?"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["Suppressed", "warning"], "add_tokens": "@ SuppressWarnings ( \" resource \" )", "del_tokens": ""}
{"commit_tokens": ["Fix", "reboot", "loop", "due", "to", "NPE", "."], "add_tokens": "} else { mPacFileUrl = Uri . EMPTY ;", "del_tokens": ""}
{"commit_tokens": ["Clarify", "documentation", "for", "getN", "on", "WriteResult", "as", "to", "its", "actual", "meaning"], "add_tokens": "* Gets the \" n \" field , which contains the number of documents * affected in the write operation .", "del_tokens": "* Gets the \" n \" field"}
{"commit_tokens": ["set", "animation", "to", "null", "when", "clear", "animation"], "add_tokens": "animation = null ;", "del_tokens": ""}
{"commit_tokens": ["Give", "focus", "to", "text", "input", "in", "AddTask", "activity"], "add_tokens": "textInputField . requestFocus ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Copy", "options", "before", "using", "it", "in", "subscribe", "(", ")"], "add_tokens": "mOptionsList . add ( options = = null ? null : new Bundle ( options ) ) ;", "del_tokens": "mOptionsList . add ( options ) ;"}
{"commit_tokens": ["Don", "t", "send", "openGui", "commands", "from", "the", "fakeplayer", "."], "add_tokens": "@ Override public void openGui ( Object mod , int modGuiId , World world , int x , int y , int z ) { }", "del_tokens": ""}
{"commit_tokens": ["Remove", "now", "incorrect", "comment"], "add_tokens": "", "del_tokens": "/ / This is run from Zygote with root permissions / / SELinix needs to be taken into account"}
{"commit_tokens": ["Remove", "interface", "disable", "in", "wifistatemachine"], "add_tokens": "", "del_tokens": "/ * Disable interface * / NetworkUtils . disableInterface ( mInterfaceName ) ;"}
{"commit_tokens": ["help", "ID", "(", "PY", "-", "4113", ")"], "add_tokens": "return \" python . reference . moveClass \" ;", "del_tokens": "return \" refactoring . moveClass \" ;"}
{"commit_tokens": ["Add", "link", "to", "documentation", "about", "the", "Polymer", "pass", "."], "add_tokens": "*", "del_tokens": ""}
{"commit_tokens": ["fixed", "extra", "document", "changed", "event"], "add_tokens": "if ( ! ( treeElement . getPsi ( ) instanceof XmlTagChild ) ) {", "del_tokens": "if ( ! ( treeElement instanceof XmlTagChild ) ) {"}
{"commit_tokens": ["Added", "isRunableStandalone", "method"], "add_tokens": "public boolean isRunableStandalone ( ) { return this . getType ( ) ! = null & & ExtensionScript . TYPE_STANDALONE . equals ( this . getType ( ) . getName ( ) ) ; }", "del_tokens": ""}
{"commit_tokens": ["Use", "injected", "MetricRegistry"], "add_tokens": "this . metricRegistry = appMetrics ;", "del_tokens": "this . metricRegistry = new MetricRegistry ( ) ;"}
{"commit_tokens": ["remove", "myname", "accidentally", "included", "in", "one", "of", "the", "files"], "add_tokens": "", "del_tokens": "* @ author vnori @ google . com ( Your Name Here ) *"}
{"commit_tokens": ["turn", "on", "building", "parse", "trees", "by", "default", "since", "we", "do", "-", "listener", "by", "default", "."], "add_tokens": "protected boolean _buildParseTrees = true ;", "del_tokens": "protected boolean _buildParseTrees ;"}
{"commit_tokens": ["Improved", "TableRef", "#", "isRoot", "(", ")"], "add_tokens": "return ! getParent ( ) . isPresent ( ) ;", "del_tokens": "return getName ( ) . isEmpty ( ) ;"}
{"commit_tokens": ["Name", "the", "NewThreadScheduler", "threads"], "add_tokens": "} , \" RxNewThreadScheduler \" ) ;", "del_tokens": "} ) ;"}
{"commit_tokens": ["to", "java", "1", ".", "5"], "add_tokens": "Vector < point > point_list = new Vector < point > ( ) ;", "del_tokens": "Vector point_list = new Vector ( ) ;"}
{"commit_tokens": ["Pickblock", "now", "replaces", "the", "currently", "selected", "item", "if", "it", "could", "not", "find", "a", "empty", "space", "."], "add_tokens": "slot = player . inventory . currentItem ;", "del_tokens": "return false ;"}
{"commit_tokens": ["Actually", "return", "identifiers", "so", "method", "actually", "works", "."], "add_tokens": "return identifiers ;", "del_tokens": ""}
{"commit_tokens": ["fixed", "finbugs", "issue"], "add_tokens": "private static class EmptyIterator implements Iterator {", "del_tokens": "private class EmptyIterator implements Iterator {"}
{"commit_tokens": ["Changed", "DBDecoderFactory", "to", "interface", "and", "added", "method", "."], "add_tokens": "public interface DBDecoderFactory { DBDecoder create ( ) ; }", "del_tokens": "public class DBDecoderFactory { }"}
{"commit_tokens": ["Make", "ViewHolder", "class", "public"], "add_tokens": "public static class ViewHolder extends BaseViewHolder {", "del_tokens": "protected static class ViewHolder extends BaseViewHolder {"}
{"commit_tokens": ["allow", "longer", "submitter", "notes"], "add_tokens": "@ Lob", "del_tokens": ""}
{"commit_tokens": ["custom", "tag", "noinspection", "cause", "build", "problems", "during", "release"], "add_tokens": "", "del_tokens": "* @ noinspection CollectionDeclaredAsConcreteClass"}
{"commit_tokens": ["Fixed", "bug", "in", "Music", "when", "stop", "(", ")", "is", "called", "."], "add_tokens": "", "del_tokens": "this . mMediaPlayer . seekTo ( 0 ) ;"}
{"commit_tokens": ["Replaced", "derpy", "tabs", "with", "spaces"], "add_tokens": "{ rebuild = true ; }", "del_tokens": "{ rebuild = true ; }"}
{"commit_tokens": ["Fix", "doc", "typo", "."], "add_tokens": "* Set a color matrix to convert from RGB to luminance . The alpha channel", "del_tokens": "* Set a color matrix to convert from RGB to luminace . The alpha channel"}
{"commit_tokens": ["Improved", "method", "to", "select", "value", "programatically", "-", "now", "it", "also", "will", "call", "chart", "listener", "."], "add_tokens": "callTouchListener ( ) ;", "del_tokens": ""}
{"commit_tokens": ["allow", "override", "of", "calculated", "size"], "add_tokens": "protected int calculateSize ( boolean force ) {", "del_tokens": "private int calculateSize ( boolean force ) {"}
{"commit_tokens": ["REVIEW", "-", "2462", "Fixed", "the", "problem", "in", "DefaultCacheAccess"], "add_tokens": "contended = false ;", "del_tokens": ""}
{"commit_tokens": ["missing", "new", "line", "at", "the", "end"], "add_tokens": "}", "del_tokens": "}"}
{"commit_tokens": ["Remove", "unused", "field", "from", "CompilerConfig"], "add_tokens": "", "del_tokens": "private boolean useNewByteCodeGenerator = true ;"}
{"commit_tokens": ["Cleaned", "up", "an", "obsolete", "comment"], "add_tokens": "", "del_tokens": "/ / TODO : this is duplicated in TestClassMethodsRunner"}
{"commit_tokens": ["Fix", "database", "version", "cache", "logic"], "add_tokens": "if ( cachedVersion > 0 & & cachedVersion < = LocalStore . DB_VERSION ) {", "del_tokens": "if ( cachedVersion < LocalStore . DB_VERSION ) {"}
{"commit_tokens": ["Delete", "unsed", "mDnsLock", "."], "add_tokens": "", "del_tokens": "private Object mDnsLock = new Object ( ) ;"}
{"commit_tokens": ["Don", "t", "reference", "the", "enclosing", "type", "instance", "when", "it", "s", "not", "used", "(", "memory", "optimisation", ")"], "add_tokens": "static class FolderViewHolder", "del_tokens": "class FolderViewHolder"}
{"commit_tokens": ["actually", "specify", "the", "size", "of", "our", "BufferedOutputStream", "as", "1k", "to", "parallel"], "add_tokens": "mOut = new BufferedOutputStream ( mOut , 1024 ) ;", "del_tokens": "mOut = new BufferedOutputStream ( mOut ) ;"}
{"commit_tokens": ["made", "class", "final", "(", "optimization", "hint", ")"], "add_tokens": "private static final class WeakCharEntryMap extends ReferenceMap {", "del_tokens": "private static class WeakCharEntryMap extends ReferenceMap {"}
{"commit_tokens": ["Removed", "obsolete", "empty", "line", "."], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Fix", "the", "build", "."], "add_tokens": "public void createRenderScript ( RenderScriptGL rs ) { mRS = rs ; }", "del_tokens": ""}
{"commit_tokens": ["remove", "unused", "import"], "add_tokens": "", "del_tokens": "import java . io . BufferedWriter ;"}
{"commit_tokens": ["LPS", "-", "66857", "test", "-", "should", "use", "updateContact"], "add_tokens": "ContactLocalServiceUtil . updateContact ( contact ) ;", "del_tokens": "ContactLocalServiceUtil . addContact ( contact ) ;"}
{"commit_tokens": ["Remove", "MortarContextWrapper", "from", "the", "public", "API"], "add_tokens": "class MortarContextWrapper extends ContextWrapper implements HasMortarScope {", "del_tokens": "public class MortarContextWrapper extends ContextWrapper implements HasMortarScope {"}
{"commit_tokens": ["try", "fix", "empty", "DashFavoritesList", "issue"], "add_tokens": "notifyDataSetChanged ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixing", "comment", "in", "code", "to", "match", "new", "default", "."], "add_tokens": "/ / NOTE : enabled by default", "del_tokens": "/ / NOTE : disabled by default"}
{"commit_tokens": ["Remove", "the", "callAllGets", "feature", "of", "CombinedFuture", "."], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Removed", "commented", "line", "."], "add_tokens": "", "del_tokens": "/ / wpDB . deleteAllAccounts ( ) ;"}
{"commit_tokens": ["revert", "changes", "to", "RetryQueryRunnerConfig"], "add_tokens": "private int numTries = 0 ;", "del_tokens": "private int numTries = 4 ;"}
{"commit_tokens": ["fixed", "testdata"], "add_tokens": "interface A {", "del_tokens": "nterface A {"}
{"commit_tokens": ["remove", "@", "VisibleForTesting", "for", "MatchMode"], "add_tokens": "", "del_tokens": "@ VisibleForTesting"}
{"commit_tokens": ["apparently", "firebird", "does", "not", "support", "ddl", "in", "transactions"], "add_tokens": "return false ;", "del_tokens": "return true ;"}
{"commit_tokens": ["reset", "utterance", "counter", "upon", "stop", "(", ")"], "add_tokens": "ttsRequests = 0 ;", "del_tokens": ""}
{"commit_tokens": ["add", "missing", "import"], "add_tokens": "import java . util . Date ;", "del_tokens": ""}
{"commit_tokens": ["Reload", "TLM", "in", "subtasks", "tag", "view", "refresh"], "add_tokens": "initializeTaskListMetadata ( ) ;", "del_tokens": ""}
{"commit_tokens": ["optimize", "imports"], "add_tokens": "", "del_tokens": "import com . intellij . openapi . editor . colors . TextAttributesKey ;"}
{"commit_tokens": ["Delete", "obsolete", "import"], "add_tokens": "", "del_tokens": "import org . apache . commons . codec . binary . Base64 ;"}
{"commit_tokens": ["Fix", "collapsible", "action", "views", "."], "add_tokens": "if ( ! hasCollapsibleActionView ( ) ) {", "del_tokens": "if ( hasCollapsibleActionView ( ) ) {"}
{"commit_tokens": ["Remove", "unneeded", "SideOnly", "."], "add_tokens": "", "del_tokens": "@ SideOnly ( CLIENT )"}
{"commit_tokens": ["Cancel", "any", "running", "bottomsheet", "animation", "when", "the", "view", "is", "detached"], "add_tokens": "cancelCurrentAnimation ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Assign", "newly", "created", "stream", "to", "field", "instead", "of", "leaking", "it"], "add_tokens": "jarInputStream = createJarInputStream ( ) ;", "del_tokens": "createJarInputStream ( ) ;"}
{"commit_tokens": ["Fix", "transport", "layer", "rotation", "bug"], "add_tokens": "return true ;", "del_tokens": "return false ;"}
{"commit_tokens": ["Fix", "an", "issue", "where", "getMediaFileMimeType", "(", "File", "mediaFile", "boolean", "isImage", ")", "is", "called", "with", "false", "on", "images"], "add_tokens": "mimeType = getMediaFileMimeType ( imageFile , true ) ;", "del_tokens": "mimeType = getMediaFileMimeType ( imageFile , false ) ;"}
{"commit_tokens": ["just", "added", "author", "tag"], "add_tokens": "* @ author Jeremy Rayner", "del_tokens": ""}
{"commit_tokens": ["added", "method", "to", "create", "a", "subset", "of", "the", "orginal", "dataset"], "add_tokens": "/ * * create a subset of the original dataset * / public DataSet createView ( Closure criteria ) { return new DataSet ( this , criteria ) ; }", "del_tokens": ""}
{"commit_tokens": ["do", "not", "return", "invalid", "files"], "add_tokens": "return isValid ( ) ? myFile : null ;", "del_tokens": "return myFile ;"}
{"commit_tokens": ["fix", "test", "data"], "add_tokens": "while ( x ) < caret >", "del_tokens": "while ( x ) < caret >"}
{"commit_tokens": ["build", "#", "5"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["fixed", "OTR", "manual", "mode", "to", "be", "as", "requested"], "add_tokens": "otrPolicy = OtrPolicy . OTRL_POLICY_MANUAL ;", "del_tokens": "otrPolicy = OtrPolicy . OPPORTUNISTIC ;"}
{"commit_tokens": ["Fix", "bug", "3083631", "-", "Links", "no", "longer", "get", "tapped", "during", "scale", "gestures"], "add_tokens": "mPrivateHandler . removeMessages ( SWITCH_TO_SHORTPRESS ) ; mPrivateHandler . removeMessages ( SWITCH_TO_LONGPRESS ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "CTS", "test", "."], "add_tokens": "return ! mLocalMatrix . isIdentity ( ) ;", "del_tokens": "return true ;"}
{"commit_tokens": ["include", "outbound", "socket", "exceptions", "at", "debug", "level"], "add_tokens": "logger . debug ( \" error was \" , e ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "typo", "which", "cause", "stack", "overflow", "if", "children", "(", ")", "was", "called"], "add_tokens": "return this . children ;", "del_tokens": "return this . children ( ) ;"}
{"commit_tokens": ["Fixed", "testConcurrentOnNextFailsValidation"], "add_tokens": "completed . countDown ( ) ;", "del_tokens": "completed . countDown ( ) ;"}
{"commit_tokens": ["Add", "NPE", "protection"], "add_tokens": "if ( getPathInfo ( ) = = null ) { return null ; }", "del_tokens": ""}
{"commit_tokens": ["Properly", "remove", "GhostViews", "when", "Activity", "Transition", "canceled", "."], "add_tokens": "moveSharedElementsFromOverlay ( ) ;", "del_tokens": ""}
{"commit_tokens": ["plugin", "does", "not", "save", "book", "encoding"], "add_tokens": "", "del_tokens": "book . save ( ) ;"}
{"commit_tokens": ["Added", "toString", "to", "ToroDocument"], "add_tokens": "public String toString ( ) { return id + \" - > \" + root . toString ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["Added", "image", "view"], "add_tokens": "private float factor = 0 . 95f ;", "del_tokens": "private float factor = 0 . 85f ;"}
{"commit_tokens": ["Remove", "some", "duplicated", "code", "in", "DocumentsUI", "."], "add_tokens": "", "del_tokens": "getDisplayState ( ) . restored = true ; onCurrentDirectoryChanged ( ANIM_NONE ) ;"}
{"commit_tokens": ["Permit", "cc", "-", ">", "objc", "deps", "."], "add_tokens": "\" objc_library \" ,", "del_tokens": ""}
{"commit_tokens": ["add", "context", "accessor", "for", "subclasses"], "add_tokens": "protected Context getContext ( ) { return context ; }", "del_tokens": ""}
{"commit_tokens": ["temporarily", "ignore", "failing", "(", "new", ")", "test"], "add_tokens": "@ Ignore", "del_tokens": ""}
{"commit_tokens": ["Fix", "typo", "(", "PY", "-", "20458", ")"], "add_tokens": "return name ;", "del_tokens": "return getName ( ) ;"}
{"commit_tokens": ["Do", "not", "increment", "access", "counter", "."], "add_tokens": "session . endAccess ( ) ;", "del_tokens": ""}
{"commit_tokens": ["added", "a", "method", "to", "identify", "a", "classnode", "as", "interface"], "add_tokens": "public boolean isInterface ( ) { return ( getModifiers ( ) & Opcodes . ACC_INTERFACE ) > 0 ; }", "del_tokens": ""}
{"commit_tokens": ["Made", "GifDrawable", "class", "public"], "add_tokens": "public class GifDrawable extends Drawable implements Animatable", "del_tokens": "class GifDrawable extends Drawable implements Animatable"}
{"commit_tokens": ["correctly", "handle", "keyword", "parameters", "when", "building", "index", "for", "foreign", "key", "fields", "(", "PY", "-", "5518", ")"], "add_tokens": "return 41 ;", "del_tokens": "return 40 ;"}
{"commit_tokens": ["Fixed", "missing", "closing", "bracket"], "add_tokens": "}", "del_tokens": ""}
{"commit_tokens": ["Fix", "fairness"], "add_tokens": "return fairness = = ResourceAllocationFairness . FAST ;", "del_tokens": "return fairness = = ResourceAllocationFairness . FAIR ;"}
{"commit_tokens": ["Fix", "ticking", "on", "bukkit", "server"], "add_tokens": "return true ;", "del_tokens": "return false ;"}
{"commit_tokens": ["added", "TODO"], "add_tokens": "* TODO fix the message", "del_tokens": ""}
{"commit_tokens": ["added", "length", "(", ")"], "add_tokens": "public int length ( ) { return text . length ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["Remove", "unused", "import"], "add_tokens": "", "del_tokens": "import java . util . Map ;"}
{"commit_tokens": ["revert", "change", "on", "whereCond", "name"], "add_tokens": "String getWhereCond ( ) {", "del_tokens": "String getWhereClause ( ) {"}
{"commit_tokens": ["remove", "warning"], "add_tokens": "", "del_tokens": "import java . util . ArrayList ;"}
{"commit_tokens": ["Move", "Recents", "task", "to", "back", "when", "hiding", "view", "."], "add_tokens": "( ( RecentsActivity ) mContext ) . moveTaskToBack ( true ) ;", "del_tokens": ""}
{"commit_tokens": ["Add", "missing", "import"], "add_tokens": "import edu . stanford . nlp . depparser . util . Util ;", "del_tokens": ""}
{"commit_tokens": ["Add", "scrollBy", "(", ")", "method", "to", "public", "API"], "add_tokens": "public void scrollBy ( int offset ) { scrollListItemsBy ( offset ) ; }", "del_tokens": ""}
{"commit_tokens": ["Fix", "ConcurrentModificationException", "in", "SyncManager"], "add_tokens": "break ;", "del_tokens": ""}
{"commit_tokens": ["Oops", "wrong", "variable"], "add_tokens": "offset + = localReadBytes ;", "del_tokens": "offset + = readBytes ;"}
{"commit_tokens": ["remove", "@", "Experimental", "annotation", "now", "that", "this", "(", "=", "v2", "API", ")", "has", "been", "online", "for", "more", "than", "a", "month"], "add_tokens": "", "del_tokens": "@ Experimental"}
{"commit_tokens": ["hide", "the", "newly", "created", "DatabaseObjectNotClosedException", "class", "from", "sdk"], "add_tokens": "* @ hide", "del_tokens": ""}
{"commit_tokens": ["Fix", "NullPointerException", "in", "AppleTest"], "add_tokens": "return ImmutableList . of ( ) ;", "del_tokens": "return null ;"}
{"commit_tokens": ["Make", "close", "(", ")", "in", "AbstractTestQueryFramework", "callable", "by", "TestNG"], "add_tokens": "public void close ( )", "del_tokens": "private void close ( )"}
{"commit_tokens": ["don", "t", "render", "HTML", "in", "label", "property", "renderer", "(", "IDEADEV", "-", "11341", ")"], "add_tokens": "putClientProperty ( \" html . disable \" , true ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "issue", "where", "ChunkPriderEvent", ".", "InitNoiseField", "used", "the", "wrong", "sizeY", "value", "."], "add_tokens": "this . sizeY = sizeY ;", "del_tokens": "this . sizeY = sizeX ;"}
{"commit_tokens": ["make", "CassandraServer", "constructor", "public"], "add_tokens": "public CassandraServer ( )", "del_tokens": "protected CassandraServer ( )"}
{"commit_tokens": ["Fixed", "Checkstyle", "error"], "add_tokens": "private ClusterFixture ( ) { }", "del_tokens": ""}
{"commit_tokens": ["Fix", "10", "error", "in", "debugger"], "add_tokens": "case ' \\ n ' :", "del_tokens": ""}
{"commit_tokens": ["Make", "sure", "Account", ".", "getDescription", "(", ")", "never", "returns", "null"], "add_tokens": "/ / Use email address as account description if necessary if ( mDescription = = null ) { mDescription = getEmail ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["Add", "a", "Javadoc", "pointer", "from", "DiscreteDomain", "to", "DiscreteDomains", "."], "add_tokens": "* @ see DiscreteDomains", "del_tokens": ""}
{"commit_tokens": ["Throwing", "this", "one", "over", "the", "fence", "but", "this", "change", "appears", "sane", "."], "add_tokens": "return false ;", "del_tokens": ""}
{"commit_tokens": ["Reset", "reverse", "state", "when", "an", "animator", "ends"], "add_tokens": "mPlayingBackwards = false ;", "del_tokens": ""}
{"commit_tokens": ["Allow", "null", "to", "be", "cached", "in", "memory", "for", "unavailable", "URLs"], "add_tokens": "if ( bitmap = = null ) return 0 ;", "del_tokens": ""}
{"commit_tokens": ["Add", "isDebug", "method", "."], "add_tokens": "public static boolean isDebug ( ) { return debug ; }", "del_tokens": ""}
{"commit_tokens": ["Fix", "build"], "add_tokens": "public void testRunStarted ( String runName , int testCount ) {", "del_tokens": "public void testRunStarted ( int testCount ) {"}
{"commit_tokens": ["Not", "getting", "gl", "context", "on", "reshape", "."], "add_tokens": "/ / getGL ( glDrawable ) ;", "del_tokens": "getGL ( glDrawable ) ;"}
{"commit_tokens": ["Don", "t", "limit", "zoom", "scale", "change", "by", "the", "minimum", "increment", "."], "add_tokens": "if ( scale ! = mActualScale | | force ) {", "del_tokens": "if ( exceedsMinScaleIncrement ( scale , mActualScale ) | | force ) {"}
{"commit_tokens": ["Catch", "NoClassDefFoundError", "too"], "add_tokens": "} catch ( NoClassDefFoundError ncdfe ) { / / continue", "del_tokens": ""}
{"commit_tokens": ["Changed", "method", "name", "."], "add_tokens": "public PacketExtension parseExtension ( XmlPullParser parser ) throws Exception ;", "del_tokens": "public PacketExtension parseExtensions ( XmlPullParser parser ) throws Exception ;"}
{"commit_tokens": ["Added", "throwSubscriberException", "(", "true", ")"], "add_tokens": ". throwSubscriberException ( true )", "del_tokens": ""}
{"commit_tokens": ["Fixed", "a", "compile", "error", "."], "add_tokens": "super ( out , false ) ;", "del_tokens": "super ( out ) ;"}
{"commit_tokens": ["Fix", "NPE", "triggered", "by", "r1356852"], "add_tokens": "if ( done | | body = = null ) return 0 ;", "del_tokens": "if ( done ) return 0 ;"}
{"commit_tokens": ["remove", "import"], "add_tokens": "", "del_tokens": "import java . util . List ;"}
{"commit_tokens": ["remove", "typo"], "add_tokens": "", "del_tokens": "@ Repeat ( 10 )"}
{"commit_tokens": ["OpenSslEngine", "remove", "unecessary", "rejectRemoteInitiatedRenegation", "call"], "add_tokens": "", "del_tokens": "rejectRemoteInitiatedRenegation ( ) ;"}
{"commit_tokens": ["delete", "inspection", "profiles", "on", "apply", "(", "IDEADEV", "-", "38918", ")"], "add_tokens": "myPanels . clear ( ) ;", "del_tokens": ""}
{"commit_tokens": ["delayed", "commit", "bug", "fix"], "add_tokens": "if ( ! isOldLvcsEnabled ( ) ) return ;", "del_tokens": "checkOldLvcsEnabled ( ) ;"}
{"commit_tokens": ["Remove", "unused", "mRuimFileHandler", "reference", "from", "CDMAPhone"], "add_tokens": "", "del_tokens": "RuimFileHandler mRuimFileHandler ;"}
{"commit_tokens": ["Add", "an", "empty", "line"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Add", "cancel", "to", "switch", "clause", "in", "ToggleImitator", "."], "add_tokens": "case MotionEvent . ACTION_CANCEL :", "del_tokens": ""}
{"commit_tokens": ["PY", "-", "11948", "Run", "manage", ".", "py", "Task", "ignores", "environment", "variables", "defined", "for", "Django", "Console", "(", "and", "Python", "Console", ")"], "add_tokens": "myProcessHandler = task . createProcess ( null ) ;", "del_tokens": "myProcessHandler = task . createProcess ( ) ;"}
{"commit_tokens": ["git", "test", "run", "by", "Chee"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["do", "not", "delete", "Build", "Artifact", "option", "from", "Run", "configurations"], "add_tokens": "", "del_tokens": "if ( ! ArtifactManager . useArtifacts ( ) ) return null ;"}
{"commit_tokens": ["Removing", "random", "new", "line"], "add_tokens": "", "del_tokens": "import android . content . Intent ;"}
{"commit_tokens": ["remove", "dead", "static", "noop", "method"], "add_tokens": "", "del_tokens": "public static long serializedSize ( Collection < Token > tokens , TypeSizes typeSizes ) { throw new UnsupportedOperationException ( ) ; }"}
{"commit_tokens": ["LPS", "-", "50321", "missing", "@", "override"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["Give", "watch", "Home", "app", "location", "permissions", "by", "default"], "add_tokens": "grantRuntimePermissionsLPw ( wearHomePackage , LOCATION_PERMISSIONS , false , userId ) ;", "del_tokens": ""}
{"commit_tokens": ["fixed", "generic", "signature", "issues", "for", "field", "types"], "add_tokens": "transient int test ;", "del_tokens": ""}
{"commit_tokens": ["remove", "false", "TODO"], "add_tokens": "/ / nothing", "del_tokens": "/ / TODO Auto - generated method stub"}
{"commit_tokens": ["Missing", "break", "fix"], "add_tokens": "break ;", "del_tokens": ""}
{"commit_tokens": ["remove", "unnecessary", "check", "for", "null"], "add_tokens": "", "del_tokens": "if ( path = = null ) { continue ; }"}
{"commit_tokens": ["Added", "missing", "@", "Incubating", "."], "add_tokens": "@ Incubating", "del_tokens": ""}
{"commit_tokens": ["Fix", "TestResultFormatterTest"], "add_tokens": "new Ansi ( false ) ,", "del_tokens": "new Ansi ( true ) ,"}
{"commit_tokens": ["Adding", "replication", "client", "shutdown", "in", "PeerEurekaNode"], "add_tokens": "replicationClient . shutdown ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "BackupManager", ".", "isBackupEnabled", "(", ")"], "add_tokens": "checkServiceBinder ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Missing", "fix", "from", "previous", "commit", "fixes", "NPE", "in", "object", "picking"], "add_tokens": "this ( textureName , 32 , 32 ) ;", "del_tokens": "super ( TextureType . RENDER_TARGET , textureName ) ;"}
{"commit_tokens": ["In", "JSF", "tag", "attributes", "must", "generally", "be", "deferred", "value", "expressions", "but", "IDEA", "does", "not", "flag", "as", "error", "immediate", "evaluation", "expressions", "."], "add_tokens": "boolean isDeferred ( ) ; boolean isDynamic ( ) ;", "del_tokens": ""}
{"commit_tokens": ["add", "missing", "final", "declaration"], "add_tokens": "public static void ensureMathJaxLoaded ( final Callback callback )", "del_tokens": "public static void ensureMathJaxLoaded ( Callback callback )"}
{"commit_tokens": ["IDEA", "-", "85912", "Add", "mnemonic", "for", "Push", "button", "in", "the", "Git", "Push", "dialog", "."], "add_tokens": "setOKButtonMnemonic ( ' P ' ) ;", "del_tokens": ""}
{"commit_tokens": ["Don", "t", "performSend", "(", ")", "on", "onSave", "(", ")", "."], "add_tokens": "performSave ( ) ;", "del_tokens": "performSend ( ) ;"}
{"commit_tokens": ["Enable", "optimized", "readers", "by", "default"], "add_tokens": "private boolean optimizedReaderEnabled = true ;", "del_tokens": "private boolean optimizedReaderEnabled ;"}
{"commit_tokens": ["LPS", "-", "63724", "Add", "new", "remote", "export", "exception", "type"], "add_tokens": "public static final int SAME_GROUP = 4 ;", "del_tokens": ""}
{"commit_tokens": ["don", "t", "run", "the", "same", "test", "twicw"], "add_tokens": "", "del_tokens": "PyEditingTest . class ,"}
{"commit_tokens": ["Fix", "build", "."], "add_tokens": "final int max = getMax ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "rethrowing", "of", "exceptions", "at", "shutdown"], "add_tokens": "", "del_tokens": "throw throwable ;"}
{"commit_tokens": ["Fixed", "MersenneRandom", "naming"], "add_tokens": "public double nextGaussian ( ) {", "del_tokens": "public double nextStandNormalDistrDouble ( ) {"}
{"commit_tokens": ["change", "result", "type", "to", "long", "(", "copy", "&", "paste", "error", ")"], "add_tokens": "return ClassHelper . double_TYPE ;", "del_tokens": "return ClassHelper . long_TYPE ;"}
{"commit_tokens": ["LPS", "-", "30517", "MediaWiki", "throws", "error", "when", "page", "does", "not", "exist"], "add_tokens": "", "del_tokens": "_log . error ( e , e ) ;"}
{"commit_tokens": ["change", "help", "topic", "(", "IDEADEV", "-", "26215", ")"], "add_tokens": "return \" reference . versionControl . toolwindow . history \" ;", "del_tokens": "return \" cvs . selectionHistory \" ;"}
{"commit_tokens": ["Fix", "broken", "test", "name", "that", "prevents", "test", "from", "running", "."], "add_tokens": "public void testGenericInterfaceReturnedByGenericMethod ( ) {", "del_tokens": "public void tesGenericInterfaceReturnedByGenericMethod ( ) {"}
{"commit_tokens": ["Add", "missing", "new", "line", "at", "EOF"], "add_tokens": "}", "del_tokens": "}"}
{"commit_tokens": ["Fixed", "error", "where", "a", "statement", "was", "closed", "twice", "."], "add_tokens": "pstmt = null ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "the", "import", "for", "SecRandom", ".", "h"], "add_tokens": "# import < Security / SecRandom . h >", "del_tokens": "# import < SecRandom . h >"}
{"commit_tokens": ["Removed", "TODO", "comment", "."], "add_tokens": "", "del_tokens": "* * todo Support probe packets ( only needed with s2s )"}
{"commit_tokens": ["I", "can", "t", "see", "any", "reason", "why", "a", "Realm", "shouldn", "t", "be", "re", "-", "startable", "by", "default", "."], "add_tokens": "", "del_tokens": "setState ( LifecycleState . MUST_DESTROY ) ;"}
{"commit_tokens": ["Added", "5", "new", "biomes", "as", "included", "in", "MC", "1", ".", "1", "as", "part", "of", "#", "BUKKIT", "-", "496"], "add_tokens": "MUSHROOM_SHORE , BEACH , DESERT_HILLS , FOREST_HILLS , TAIGA_HILLS , SMALL_MOUNTAINS", "del_tokens": "MUSHROOM_SHORE"}
{"commit_tokens": ["TraversalRequirements", "now", "uses", "canTraverse"], "add_tokens": "return e . canTraverse ( modes ) ;", "del_tokens": "return e . getPermission ( ) . allows ( modes ) ;"}
{"commit_tokens": ["Fix", "bug", "of", "not", "setting", "the", "paint", "when", "we", "change", "the", "footer", "line", "height", "."], "add_tokens": "mPaintFooterLine . setStrokeWidth ( mFooterLineHeight ) ;", "del_tokens": ""}
{"commit_tokens": ["Set", "phone", "account", "in", "IMS", "Conference", "object"], "add_tokens": "protected PhoneAccountHandle mPhoneAccount ;", "del_tokens": "private PhoneAccountHandle mPhoneAccount ;"}
{"commit_tokens": ["remove", "log", "messages"], "add_tokens": "", "del_tokens": "System . out . println ( name + \" : \" + retVal ) ;"}
{"commit_tokens": ["Fix", "AudioFormat", "getBytesPerSample", "to", "recognize", "float"], "add_tokens": "case ENCODING_PCM_FLOAT : return 4 ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "unneeded", "static", "qualifier", "in", "QuadTree", ".", "Item", "interface", "(", "thanks", "Cyril", ")"], "add_tokens": "public interface Item {", "del_tokens": "public static interface Item {"}
{"commit_tokens": ["Log", "more", "frame", "data", "when", "profiling", "GL", "apps"], "add_tokens": "private static final int PROFILE_MAX_FRAMES = 128 ;", "del_tokens": "private static final int PROFILE_MAX_FRAMES = 64 ;"}
{"commit_tokens": ["Set", "mActualScale", "when", "initialScale", "is", "set", "."], "add_tokens": "mActualScale = mInitialScale > 0 ? mInitialScale : mDefaultScale ; mInvActualScale = 1 / mActualScale ;", "del_tokens": ""}
{"commit_tokens": ["do", "not", "close", "dialog", "with", "support", "if", "user", "cancel", "suggestion", "to", "reuse", "library", "even", "if", "some", "addition", "actions", "are", "to", "be", "performed", "(", "IDEA", "-", "90953", ")"], "add_tokens": "return ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "NameValuePair", "package", "."], "add_tokens": "package com . koushikdutta . async . http ;", "del_tokens": "package org . apache . http ;"}
{"commit_tokens": ["fix", "a", "minior", "append", "bug"], "add_tokens": "appendCurrentBuffer ( Config . USER_BUFFER_PER_PARTITION_BYTES ) ;", "del_tokens": ""}
{"commit_tokens": ["removed", "TODO"], "add_tokens": "", "del_tokens": "/ / TODO test"}
{"commit_tokens": ["LPS", "-", "63269", "apply", "patch"], "add_tokens": "/ * @ generated * /", "del_tokens": ""}
{"commit_tokens": ["Remove", "$", "Id", "keyword", "from", "all", "remaining", "files", "in", "tomcat", "/", "*", "*"], "add_tokens": "", "del_tokens": "/ * * * @ version $ Id $ * /"}
{"commit_tokens": ["add", "missing", "break"], "add_tokens": "break ;", "del_tokens": ""}
{"commit_tokens": ["added", "missing", "network", "synchronization", "fix", "#", "1560"], "add_tokens": "sendNetworkUpdate ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "accidental", "refresh", "when", "sending", "media", "file", "to", "other", "app"], "add_tokens": "return true ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "Test"], "add_tokens": "scrollToEnd ( mVerifyLayout ) ;", "del_tokens": "sendRepeatedKeys ( 100 , KeyEvent . KEYCODE_DPAD_DOWN ) ;"}
{"commit_tokens": ["Bump", "the", "default", "max", "of", "the", "connection", "pool", "to", "8", "."], "add_tokens": "private int maxSize = 8 ;", "del_tokens": "private int maxSize = 1 ;"}
{"commit_tokens": ["Fix", "a", "comment", "to", "fix", "the", "build", "."], "add_tokens": "/ * *", "del_tokens": "/ *"}
{"commit_tokens": ["LPS", "-", "12050", "PortletClassLoaderUtil", "should", "release", "reference", "to", "PortletClassLoader", "after", "PortalClassLoaderServletContextListener", "context", "destory"], "add_tokens": "PortletClassLoaderUtil . setClassLoader ( null ) ;", "del_tokens": ""}
{"commit_tokens": ["Combine", "BlockWorker", "and", "BlockDataManager", "."], "add_tokens": "ClientContext . reset ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "a", "bug", "with", "backsided", "objects", "."], "add_tokens": "", "del_tokens": "GLES20 . glFrontFace ( GLES20 . GL_CW ) ;"}
{"commit_tokens": ["HHH", "-", "4088", "-", "Session", ".", "getSession", "should", "always", "return", "sessions", "from", "parent", "(", "or", "root", ")", "session"], "add_tokens": "return rootSession . getSession ( entityMode ) ;", "del_tokens": "rootSession . getSession ( entityMode ) ;"}
{"commit_tokens": ["Throw", "the", "right", "exception", "flavor", "."], "add_tokens": "throw new SecurityException ( \" use ContentResolver . openFileDescriptor ( ) instead \" ) ;", "del_tokens": "throw new IllegalArgumentException ("}
{"commit_tokens": ["Use", "default", "assert", "eventually", "timeout", "in", "ReplicatedMapReadYourWritesTest"], "add_tokens": "} ) ;", "del_tokens": "} , 15 ) ;"}
{"commit_tokens": ["Fixed", "small", "merge", "bug", "in", "FailureExample", ".", "java"], "add_tokens": "package com . tightdb ;", "del_tokens": "package com . tightdb . example ;"}
{"commit_tokens": ["Fix", "test", "data", "restore", "incorrectly", "deleted", "import"], "add_tokens": "import kotlin . jvm . functions . Function0 ;", "del_tokens": ""}
{"commit_tokens": ["add", "reply", ".", "writeNoException", "(", ")", "for", "quick", "response"], "add_tokens": "reply . writeNoException ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Export", "the", "record", "name"], "add_tokens": "public String getName ( ) { return name ; }", "del_tokens": ""}
{"commit_tokens": ["Turn", "off", "debug", "in", "CellInfoLte", "."], "add_tokens": "private static final boolean DBG = false ;", "del_tokens": "private static final boolean DBG = true ;"}
{"commit_tokens": ["fixed", "the", "build"], "add_tokens": "", "del_tokens": "@ Override"}
{"commit_tokens": ["fixed", "wrong", "import", "."], "add_tokens": "", "del_tokens": "import com . sun . deploy . cache . CacheEntry ;"}
{"commit_tokens": ["remove", "null", "response", "when", "processing", "line", "by", "line", "with", "autoOutput", "enabled"], "add_tokens": "if ( autoOutput & & o ! = null ) {", "del_tokens": "if ( autoOutput ) {"}
{"commit_tokens": ["Fixed", "bug", "with", "local", "index", "not", "showing", "after", "switching", "tabs"], "add_tokens": "getExpandableListView ( ) . setAdapter ( listAdapter ) ;", "del_tokens": ""}
{"commit_tokens": ["Add", "@", "since", "comment", "for", "method", "Part", ".", "getSubmittedFileName", "(", ")", "that", "was", "added", "in", "Servlet", "3", ".", "1", "."], "add_tokens": "* * @ since Servlet 3 . 1", "del_tokens": ""}
{"commit_tokens": ["exposed", "the", "id", "property"], "add_tokens": "public String getId ( ) { return id ; }", "del_tokens": ""}
{"commit_tokens": ["add", "@", "since", "tag"], "add_tokens": "/ * * * @ since 2 . 6 * /", "del_tokens": ""}
{"commit_tokens": ["set", "version"], "add_tokens": "return \" 4 . 5 . 1 \" ;", "del_tokens": "return \" 4 . 5 \" ;"}
{"commit_tokens": ["remove", "import"], "add_tokens": "", "del_tokens": "import com . interview . array . Solution ;"}
{"commit_tokens": ["Fixed", "a", "bug", "where", "notification", "y", "positions", "would", "animate"], "add_tokens": "", "del_tokens": ". animateY ( )"}
{"commit_tokens": ["fewer", "induced", "exceptions"], "add_tokens": "return PsiSubstitutor . EMPTY ;", "del_tokens": ""}
{"commit_tokens": ["rename", "Console", "Folding", "to", "Console"], "add_tokens": "return \" Console \" ;", "del_tokens": "return \" Console Folding \" ;"}
{"commit_tokens": ["do", "not", "include", "metrics", "name", "twice", "#", "210"], "add_tokens": "return \" metrics \" ;", "del_tokens": "return name ;"}
{"commit_tokens": ["added", "PUBDEV", "-", "1643"], "add_tokens": "@ Ignore ( \" PUBDEV - 1643 \" )", "del_tokens": ""}
{"commit_tokens": ["Tell", "IDEA", "to", "shutup", "about", "static", "access", "to", "instances"], "add_tokens": "* * @ noinspection AccessStaticViaInstance", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "53578", "don", "t", "show", "borders", "for", "embedded", "portlets"], "add_tokens": "request . setAttribute ( WebKeys . PORTLET_DECORATE , false ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "a", "constructor"], "add_tokens": "private void RecoverySystem ( ) { } / / Do not instantiate", "del_tokens": "private RecoverySystem ( ) { } / / Do not instantiate"}
{"commit_tokens": ["Remove", "unused", "import"], "add_tokens": "", "del_tokens": "import org . apache . ibatis . annotations . Param ;"}
{"commit_tokens": ["Add", "support", "for", "conversion", "into", "Collection", "types", "-", "Added", "TODO", "to", "code"], "add_tokens": "xx xxxxxxx xxxxx xxxx xxxxxxxxxx xxxxxxxxxx xxxx xxxxxxxxx xxx xxxxxxxxx xx xxxx xxx xxxxx xxxxx xxxx xxxxxx xxxxxx x xxxxx xxxxx", "del_tokens": ""}
{"commit_tokens": ["HHH", "-", "7147", "-", "ServiceRegistry", "is", "starting", "services", "twice"], "add_tokens": "", "del_tokens": "startService ( serviceBinding ) ;"}
{"commit_tokens": ["added", "saving", "functionality", "for", "gpx", "file", "."], "add_tokens": "saveGPXFile ( ) ;", "del_tokens": ""}
{"commit_tokens": ["added", "helper", "method", "for", "builder", "implementations"], "add_tokens": "protected void setCurrent ( Object current ) { this . current = current ; }", "del_tokens": ""}
{"commit_tokens": ["Switch", "the", "visibility", "of", "LazilyInitializedInfo", ".", "clone", "to", "protected", "since", "it", "s", "only", "used", "by", "JSDocInfo", "."], "add_tokens": "protected LazilyInitializedInfo clone ( ) {", "del_tokens": "public LazilyInitializedInfo clone ( ) {"}
{"commit_tokens": ["changed", "createTempDir", "to", "protected", "so", "it", "can", "be", "overriden", "by", "sub", "classes"], "add_tokens": "protected File createTempDir ( ) {", "del_tokens": "private static File createTempDir ( ) {"}
{"commit_tokens": ["Restores", "the", "scroll", "bar", "(", "s", ")", "of", "the", "Web", "browser", "in", "the", "New", "version", "is", "available", "dialog", "on", "Windows", "."], "add_tokens": "return scrollPane ;", "del_tokens": "return editorPane ;"}
{"commit_tokens": ["UNDERTOW", "-", "401", "request", "scheme", "attribute", "returns", "the", "wrong", "thing"], "add_tokens": "return exchange . getRequestScheme ( ) ;", "del_tokens": "return exchange . getRequestMethod ( ) . toString ( ) ;"}
{"commit_tokens": ["Fix", "base64", "char", "map", "."], "add_tokens": "\" abcdefghijklmnopqrstuvwxyz \" +", "del_tokens": "\" abcdefghijklmnopqrstuvwzyz \" +"}
{"commit_tokens": ["allow", "state", "loss", "on", "fragment", "change"], "add_tokens": "transaction . commitAllowingStateLoss ( ) ;", "del_tokens": "transaction . commit ( ) ;"}
{"commit_tokens": ["Have", "EmulatorView", "request", "focus", "in", "resumeCurrentView", "(", ")"], "add_tokens": "view . requestFocus ( ) ;", "del_tokens": ""}
{"commit_tokens": ["fix", "terminate", "default", "state"], "add_tokens": "return myAlwaysUseDefault ? myDetachIsDefault : myDontTerminate ;", "del_tokens": "return myAlwaysUseDefault ? ! myDetachIsDefault : myDontTerminate ;"}
{"commit_tokens": ["prevent", "list", "size", "toggle", "after", "first", "selection"], "add_tokens": "", "del_tokens": "ListScrollingUtil . ensureSelectionExists ( myList ) ;"}
{"commit_tokens": ["removing", "static", "from", "callback", "interface"], "add_tokens": "public interface Callback {", "del_tokens": "public static interface Callback {"}
{"commit_tokens": ["Fixed", "useless", "logging", "."], "add_tokens": "", "del_tokens": "log . info ( \" Getting \" + tableModel . getElement ( index ) ) ;"}
{"commit_tokens": ["remove", "exception", "output"], "add_tokens": "", "del_tokens": "e . printStackTrace ( ) ;"}
{"commit_tokens": ["change", "the", "setConfiguration", "(", ")", "to", "static"], "add_tokens": "public static void setConfiguration ( SimpleFacebookConfiguration facebookToolsConfiguration )", "del_tokens": "public void setConfiguration ( SimpleFacebookConfiguration facebookToolsConfiguration )"}
{"commit_tokens": ["Fatal", "errors", "now", "kill", "processing"], "add_tokens": "if ( fatal ) System . exit ( 1 ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "a", "bug", "on", "limited", "cursors"], "add_tokens": "maxResults", "del_tokens": "0"}
{"commit_tokens": ["repaint", "layered", "pane", "on", "any", "selection", "change", "which", "doesn", "t", "affect", "components", "(", "IDEADEV", "-", "15624", ")"], "add_tokens": "else { / / need to repaint button group bracket myEditor . repaintLayeredPane ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["Exclude", "NoFrom", "test", "from", "hsqldb"], "add_tokens": "@ ExcludeIn ( Target . HSQLDB )", "del_tokens": ""}
{"commit_tokens": ["Revert", "Make", "sure", "."], "add_tokens": "", "del_tokens": "instance . destroy ( ) ;"}
{"commit_tokens": ["try", "screen", "refresh"], "add_tokens": "mapView . refreshMap ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "bug", "with", "BlockFlow", ".", "equals"], "add_tokens": "return flowDirection . equals ( flow . flowDirection ) ;", "del_tokens": "return flow . flowDirection . equals ( flow ) ;"}
{"commit_tokens": ["Fix", "tests", "for", "a", "pure", "Ant", "run"], "add_tokens": "return eclipseFile ; return antFile ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "Build"], "add_tokens": "return mClient ;", "del_tokens": "return mClient"}
{"commit_tokens": ["Only", "use", "TravelAgent", "if", "supplied", ";", "Addresses", "BUKKIT", "-", "3466"], "add_tokens": "return useTravelAgent & & travelAgent ! = null ;", "del_tokens": "return useTravelAgent ;"}
{"commit_tokens": ["include", "all", "mode", "setting", "messages", "at", "debug", "level"], "add_tokens": "else logger_ . debug ( m ) ;", "del_tokens": ""}
{"commit_tokens": ["fixed", "test", "data", "for", "duplocator", "test"], "add_tokens": "doTest ( 1 ) ;", "del_tokens": "doTest ( 2 ) ;"}
{"commit_tokens": ["LPS", "-", "48469", "add", "contextName", "to", "the", "interface"], "add_tokens": "public String getContextName ( ) ;", "del_tokens": ""}
{"commit_tokens": ["set", "raptordata", "on", "added", "trip", "patterns", "."], "add_tokens": "timetable . raptorData = this ;", "del_tokens": ""}
{"commit_tokens": ["remove", "unnecessary", "semicolon"], "add_tokens": "", "del_tokens": ";"}
{"commit_tokens": ["activate", "connections", "tab", "when", "new", "connection", "is", "opened"], "add_tokens": "activate ( ) ;", "del_tokens": ""}
{"commit_tokens": ["fixed", "misnamed", "setter"], "add_tokens": "openOnTapEnabled = _openOnTapEnabled ;", "del_tokens": "_openOnTapEnabled = _openOnTapEnabled ;"}
{"commit_tokens": ["Fix", "checkstyle"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Fix", "#", "1435", "and", "#", "1436", "by", "reverting", "7f7bf304b0b43a1445e68c15ee6f6403c7ca5b9e"], "add_tokens": "return memory . duplicate ( ) ;", "del_tokens": "return memory ;"}
{"commit_tokens": ["Print", "a", "message", "to", "the", "log", "when", "a", "file", "can", "t", "be", "opened", "on", "the", "client", "side", "."], "add_tokens": "Log . d ( TAG , \" Couldn ' t open file on client side , trying server side \" ) ;", "del_tokens": ""}
{"commit_tokens": ["pass", "consistency_level", "param", "from", "thrift", "to", "internals", "."], "add_tokens": "row = StorageProxy . readProtocol ( command , consistency_level ) ;", "del_tokens": "row = StorageProxy . readProtocol ( command , ConsistencyLevel . ONE ) ;"}
{"commit_tokens": ["Revert", "I3fdda2588a7c612d7c9cfb4f25d9aedd1d609162", "which", "open", "two", "functions"], "add_tokens": "PreferenceManager ( Activity activity , int firstRequestCode ) {", "del_tokens": "/ * * * @ hide * / public PreferenceManager ( Activity activity , int firstRequestCode ) {"}
{"commit_tokens": ["Delete", "dangling", "comment", "about", "long", "-", "dead", "code", "."], "add_tokens": "", "del_tokens": "/ / Package protected for tests"}
{"commit_tokens": ["Fix", "spelling"], "add_tokens": "frame . delete ( ) ;", "del_tokens": "fr . delete ( ) ;"}
{"commit_tokens": ["Fix", "PickBlock", "ghost", "item", "bug", "when", "picking", "with", "a", "item", "selected", "."], "add_tokens": "player . inventory . currentItem = slot ;", "del_tokens": ""}
{"commit_tokens": ["Clean", "pending", "request", "after", "login", "execution"], "add_tokens": "pendingLoginRequest = null ;", "del_tokens": ""}
{"commit_tokens": ["Turn", "off", "logging", "."], "add_tokens": "static final boolean DEBUG_DISPLAY_SIZE = false ;", "del_tokens": "static final boolean DEBUG_DISPLAY_SIZE = true ;"}
{"commit_tokens": ["add", "UNDEFINED", "to", "byte", "encode", "JAVA", "-", "54"], "add_tokens": "case UNDEFINED :", "del_tokens": ""}
{"commit_tokens": ["Add", "reset", "placeholder", "to", "thumb", "image", "presenter"], "add_tokens": "public void resetPlaceholder ( ) { fullPresenter . resetPlaceHolder ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["Leaking", "navbar", "item", "s", "cache", "on", "project", "close"], "add_tokens": "getNavBarUI ( ) . clearItems ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Set", "mServiceCreated", "to", "false", "when", "onDestroy", "(", ")", "."], "add_tokens": "mServiceCreated = false ;", "del_tokens": ""}
{"commit_tokens": ["fixed", "setScale", "(", "Vector3", "scale", ")"], "add_tokens": "mScale . setAll ( scale ) ;", "del_tokens": "mScale = scale ;"}
{"commit_tokens": ["Change", "visibility", "."], "add_tokens": "protected static final Context NO_CONTEXT = new Context ( ) ;", "del_tokens": "private static final Context NO_CONTEXT = new Context ( ) ;"}
{"commit_tokens": ["handle", "calendars", "with", "an", "access", "level", "of", "root"], "add_tokens": "/ * * Domain admin * /", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "37633", "Fix", "incorrect", "call"], "add_tokens": "Thread . sleep ( 50 ) ;", "del_tokens": "Thread . currentThread ( ) . sleep ( 50 ) ;"}
{"commit_tokens": ["missed", "one", "class", "in", "last", "commit"], "add_tokens": "public OrthonormalityVerifier ( ) {", "del_tokens": "private OrthonormalityVerifier ( ) {"}
{"commit_tokens": ["Synchronize", "access", "to", "getMaxSize", "."], "add_tokens": "public synchronized long getMaxSize ( ) {", "del_tokens": "public long getMaxSize ( ) {"}
{"commit_tokens": ["Add", "comment", "to", "satisfy", "checkstyle"], "add_tokens": "/ * * Initialize buffer . * /", "del_tokens": ""}
{"commit_tokens": ["remove", "customized", "HelpUI", "override"], "add_tokens": "", "del_tokens": "public void updateUI ( ) { setUI ( new IdeaHelpUI ( ) ) ; }"}
{"commit_tokens": ["Fixed", "IndexOutOfBoundsException", "in", "EpisodesFragment"], "add_tokens": "", "del_tokens": "if ( handled ) { adapter . notifyDataSetChanged ( ) ; }"}
{"commit_tokens": ["The", "new", "task", "system", "didn", "t", "create", "the", "render", "targets", "."], "add_tokens": "renderTarget . create ( ) ;", "del_tokens": ""}
{"commit_tokens": ["do", "not", "log", "cleanup", "failure"], "add_tokens": "/ / LOG . info ( e ) ;", "del_tokens": "LOG . info ( e ) ;"}
{"commit_tokens": ["Corrected", "Javadoc", "on", "MapReduceOutput"], "add_tokens": "* Returns an iterable containing the results of the operation .", "del_tokens": "* Returns an iterator containing the results of the operation ."}
{"commit_tokens": ["Remove", "Yaml", "and", "JSP", "tabs", "from", "Other", "languages"], "add_tokens": "@ Override public boolean usesSharedPreview ( ) { return false ; }", "del_tokens": ""}
{"commit_tokens": ["Fix", "build", "error", "(", "Boolean", "-", ">", "boolean", ")"], "add_tokens": "public boolean geocoderIsImplemented ( ) {", "del_tokens": "public Boolean geocoderIsImplemented ( ) {"}
{"commit_tokens": ["Remove", "print"], "add_tokens": "", "del_tokens": "System . out . println ( response ) ;"}
{"commit_tokens": ["Fix", "build", "."], "add_tokens": "public void setDependencyMet ( boolean met ) { / / not supported on this network }", "del_tokens": ""}
{"commit_tokens": ["Fix", "doc", "bug"], "add_tokens": "* Create a new TreeReaderFactory with CoreLabel labels .", "del_tokens": "* Create a new TreeReaderFactory with CategoryWordTag labels ."}
{"commit_tokens": ["deprecated", "getWhereClause", "(", ")", "is", "not", "a", "change", "property"], "add_tokens": "@ DatabaseChangeProperty ( isChangeProperty = false )", "del_tokens": ""}
{"commit_tokens": ["printing", "all", "threads", "stack", "trace", "is", "making", "the", "console", "out", "put", "very", "large", "and", "not", "giving", "much", "info"], "add_tokens": "", "del_tokens": "printAllStackTraces ( ) ;"}
{"commit_tokens": ["Make", "clean", "compactions", "cleanup", "the", "row", "cache"], "add_tokens": "cfs . invalidateCachedRow ( row . getKey ( ) ) ;", "del_tokens": ""}
{"commit_tokens": ["Add", "an", "ensureOpen", "check", "to", "Publication", ".", "hasBeenConnected", "(", ")", "."], "add_tokens": "ensureOpen ( ) ;", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "56237", "Add", "missing", "property", "to", "field", "settings", "definition"], "add_tokens": "public String fieldNamespace ( ) ; @ DDMFormField", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "46132", "Add", "a", "line", "breaek", "since", "it", "s", "params1", "vs", ".", "params2"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["add", "super", ".", "addToCollector", "into", "AndroidPrebuiltAar", "#", "addToCollector"], "add_tokens": "super . addToCollector ( collector ) ;", "del_tokens": ""}
{"commit_tokens": ["remove", "unused", "import", ";"], "add_tokens": "", "del_tokens": "import com . interview . recursion . StringPermutation ;"}
{"commit_tokens": ["fixed", "max", "size", "of", "library", "slots", "close", "#", "1710"], "add_tokens": "return 1 ;", "del_tokens": "return 64 ;"}
{"commit_tokens": ["Fix", "problem", "with", "proximity", "sensor", "not", "reawaking", "screen", "if", "the", "values", "change", "too", "quickly", "."], "add_tokens": "/ / cancel animation so userActivity will succeed mScreenBrightness . animating = false ;", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "43227", "Set", "filter", "search", "to", "true", "in", "Blog"], "add_tokens": "setFilterSearch ( true ) ;", "del_tokens": ""}
{"commit_tokens": ["added", "simple", "assertion"], "add_tokens": "assertNotNull ( appCtx ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "lame", "bug", "."], "add_tokens": "return username = = null ;", "del_tokens": "return username ! = null ;"}
{"commit_tokens": ["add", "iOS", "to", "platforms", "list"], "add_tokens": "Android_X86 , iOS_X86 , iOS_ARM ;", "del_tokens": "Android_X86 ;"}
{"commit_tokens": ["Renamed", "a", "method", "for", "better", "readability"], "add_tokens": "public void runEveryXSeconds ( int seconds )", "del_tokens": "public void runEvery_Seconds ( int seconds )"}
{"commit_tokens": ["Changed", "playback", "service", "to", "not", "sticky"], "add_tokens": "return Service . START_NOT_STICKY ;", "del_tokens": "return Service . START_STICKY ;"}
{"commit_tokens": ["ensure", "cursor", "is", "visible", "after", "execution", "point", "advances"], "add_tokens": "docDisplay_ . ensureCursorVisible ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Handle", "throttling", "being", "disabled", "via", "policy", "change"], "add_tokens": "clearThrottleAndNotification ( ) ;", "del_tokens": ""}
{"commit_tokens": ["fixed", "reloading", "TestModuleProperties", "after", "reopening", "(", "IDEA", "-", "150835", ")"], "add_tokens": "setProductionModuleName ( state . moduleName ) ;", "del_tokens": ""}
{"commit_tokens": ["Keep", "this", "getter", "for", "consistency", "with", "LocalTachyonCluster"], "add_tokens": "", "del_tokens": "/ / TODO ( cc ) : Since we have MasterContext now , remove this ."}
{"commit_tokens": ["Remove", "MWE", "-", "specific", "class", "members"], "add_tokens": "", "del_tokens": "private static final String MISSING_PHRASAL = \" DUMMYP \" ; private static final String MISSING_POS = \" DUMMY \" ;"}
{"commit_tokens": ["Revert", "Revert", "Ask", "on", "demand", "for", "automatically", "set", "dangerous", "methods"], "add_tokens": "result . asked = true ;", "del_tokens": "result . asked = false ;"}
{"commit_tokens": ["Make", "the", "cumulation", "field", "in", "ByteToMessageDecoder", "package", "private", "to", "hide", "it"], "add_tokens": "ByteBuf cumulation ;", "del_tokens": "protected ByteBuf cumulation ;"}
{"commit_tokens": ["fix", "flaky", "blob", "RecoveryTests"], "add_tokens": "for ( Thread writer : writers ) { writer . join ( 6000 ) ; }", "del_tokens": ""}
{"commit_tokens": ["Removed", "@", "Override", "annotation"], "add_tokens": "", "del_tokens": "@ Override"}
{"commit_tokens": ["Suppress", "unchecked", "warning", "for", "read", "(", ")", "method"], "add_tokens": "@ SuppressWarnings ( \" unchecked \" )", "del_tokens": ""}
{"commit_tokens": ["Add", "missing", "method"], "add_tokens": "@ Override public void remove ( ) { throw new IllegalStateException ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["add", "CompletionResult", ".", "toString"], "add_tokens": "@ Override public String toString ( ) { return myLookupElement . toString ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["simple", "gone", "fullscreen", "button"], "add_tokens": "fullscreenButton . setVisibility ( View . GONE ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "unnecessary", "code", "."], "add_tokens": "", "del_tokens": "System . out . println ( \" THey ' re not equal \" ) ;"}
{"commit_tokens": ["Make", "sure", "background", "drawables", "are", "correct", "when", "View", "is", "attached"], "add_tokens": "jumpDrawablesToCurrentState ( ) ;", "del_tokens": ""}
{"commit_tokens": ["set", "visible", "pack", "to", "empty", "in", "vcs", "log", "ui", "in", "dispose", "IDEA", "-", "120539"], "add_tokens": "myVisiblePack = VisiblePack . EMPTY ;", "del_tokens": ""}
{"commit_tokens": ["keyboard", "shortcuts", "support"], "add_tokens": "editorComp . requestFocusInWindow ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "indent"], "add_tokens": "return CONSTANT_NAMES [ index ] ;", "del_tokens": "return CONSTANT_NAMES [ index ] ;"}
{"commit_tokens": ["Fixed", "spelling", "."], "add_tokens": "* Returns the XML representation of the PacketExtension .", "del_tokens": "* Returns the XML reppresentation of the PacketExtension ."}
{"commit_tokens": ["enable", "serializable", "class", "with", "no", "UID", "by", "default"], "add_tokens": "public boolean isEnabledByDefault ( ) { return true ; } @ Override", "del_tokens": ""}
{"commit_tokens": ["Fix", "javadoc", "warning", "."], "add_tokens": "", "del_tokens": "* < p >"}
{"commit_tokens": ["Add", "MMS", "to", "common", "phone", "number", "types", "."], "add_tokens": "public static final int TYPE_MMS = 20 ;", "del_tokens": ""}
{"commit_tokens": ["Expose", "FloatingActionsMenu", ".", "isExpanded", "(", ")", "state"], "add_tokens": "public boolean isExpanded ( ) { return mExpanded ; }", "del_tokens": ""}
{"commit_tokens": ["ClearScrollRequest", "should", "set", "a", "type", "parameter"], "add_tokens": "public class ClearScrollRequest extends ActionRequest < ClearScrollRequest > {", "del_tokens": "public class ClearScrollRequest extends ActionRequest {"}
{"commit_tokens": ["remove", "the", "red", "slider", "background", "again"], "add_tokens": "", "del_tokens": ". withSliderBackgroundColor ( Color . RED )"}
{"commit_tokens": ["Fix", "left", "over", "System", ".", "out", ".", "println", "in", "Annotation", ".", "java"], "add_tokens": "", "del_tokens": "System . out . println ( entry . getKey ( ) ) ;"}
{"commit_tokens": ["Footer", "is", "not", "shown", "correct", "in", "the", "grid", "view"], "add_tokens": "imageView . invalidateRowHeight ( ) ; / / Force to recalculate mRowHeight of imageView", "del_tokens": ""}
{"commit_tokens": ["fixed", "door", "schematic", "saving", "for", "#", "1962"], "add_tokens": "", "del_tokens": "upperMeta = rotateMeta ( upperMeta ) ;"}
{"commit_tokens": ["add", "more", "api", "demo"], "add_tokens": "webView . send ( \" hello \" ) ;", "del_tokens": ""}
{"commit_tokens": ["Add", "missing", "specialized", "implementation", "for", "Counted", "/", "count", "on", "StringSeq", "."], "add_tokens": "public int count ( ) { return s . length ( ) - i ; }", "del_tokens": ""}
{"commit_tokens": ["Added", "getter", "for", "authoritiesPopulator", "."], "add_tokens": "protected LdapAuthoritiesPopulator getAuthoritiesPoulator ( ) { return authoritiesPopulator ; }", "del_tokens": ""}
{"commit_tokens": ["closing", "cursor", "per", "issue", "#", "12"], "add_tokens": "c . close ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Deprecate", "unused", "code"], "add_tokens": "@ Deprecated", "del_tokens": ""}
{"commit_tokens": ["fix", "a", "typo", "."], "add_tokens": "throw new BootstrapFailureException ( \" No available bootstrap servers found ! \" ) ;", "del_tokens": "throw new BootstrapFailureException ( \" No available boostrap servers found ! \" ) ;"}
{"commit_tokens": ["preserve", "generics", "parameters", "when", "create", "methods", "for", "parameters", "with", "default", "values"], "add_tokens": "newMethod . setGenericsTypes ( method . getGenericsTypes ( ) ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "typo", "."], "add_tokens": "* Resume the connector .", "del_tokens": "* Pause the connector ."}
{"commit_tokens": ["add", "offset"], "add_tokens": "/ / set the header offset mHeaderOffset = 1 ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "static", "hooking", "of", "clipboard", "manager", "again"], "add_tokens": "", "del_tokens": "/ / Clipboard manager hookAll ( XClipboardManager . getInstances ( null ) ) ;"}
{"commit_tokens": ["Fix", "refresh", "folder", "name", "in", "action", "bar", "title"], "add_tokens": "setFile ( directory ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "bug", "in", "limit", "in", "From", "class"], "add_tokens": "sql . append ( mLimit ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "test"], "add_tokens": "semaphore . tryAcquire ( 1000 , TimeUnit . MILLISECONDS ) ;", "del_tokens": ""}
{"commit_tokens": ["Lower", "Display", "Bitmap", "Size"], "add_tokens": "public static final int DISPLAY_PHOTO_SIZE = 640 ;", "del_tokens": "public static final int DISPLAY_PHOTO_SIZE = 800 ;"}
{"commit_tokens": ["Fix", "bug", "43706", "."], "add_tokens": "/ / Copy was successful resp . setStatus ( WebdavStatus . SC_CREATED ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "double", "up", "unregistering", "mPackageBroadcastReceiver"], "add_tokens": "", "del_tokens": "unregisterReceiver ( mPackageBroadcastReceiver ) ;"}
{"commit_tokens": ["Don", "t", "include", "original", "exception", "class", "name", "in", "CQL", "message"], "add_tokens": "throw new InvalidRequestException ( e . getMessage ( ) ) ;", "del_tokens": "throw new InvalidRequestException ( e . toString ( ) ) ;"}
{"commit_tokens": ["Fix", "ON", "/", "OFF", "option", "update", "error"], "add_tokens": "mThumbPosition = isChecked ( ) ? getThumbScrollRange ( ) : 0 ;", "del_tokens": "mThumbPosition = checked ? getThumbScrollRange ( ) : 0 ;"}
{"commit_tokens": ["Added", "JUNGLE", "tree", "to", "TreeType", "enum", "-", "this", "fixes", "BUKKIT", "-", "886"], "add_tokens": "* Standard jungle tree ; 4 blocks wide and tall * / JUNGLE , / * *", "del_tokens": ""}
{"commit_tokens": ["Fixed", "FindBugs", "warning", "(", "inner", "class", "should", "be", "static", ")"], "add_tokens": "private static class ELFHeader {", "del_tokens": "class ELFHeader {"}
{"commit_tokens": ["eclipse", "hates", "it", "when", "there", "s", "no", "package", "info", ";", "btw", "a", "license", "would", "be", "nice"], "add_tokens": "package tools . ltdiff ;", "del_tokens": ""}
{"commit_tokens": ["Don", "t", "re", "-", "throw", "exception", "in", "onThrowable"], "add_tokens": "", "del_tokens": "fail ( \" Unexpected exception : \" + t . getMessage ( ) , t ) ;"}
{"commit_tokens": ["Added", "debug", "level", "pool", "statistics", "logging"], "add_tokens": "logPoolState ( \" Initial fill \" ) ;", "del_tokens": "logPoolState ( ) ;"}
{"commit_tokens": ["don", "t", "add", "symlink", "tree", "to", "rule", "key"], "add_tokens": "", "del_tokens": "@ AddToRuleKey"}
{"commit_tokens": ["Fix", "leakage"], "add_tokens": "db . close ( ) ;", "del_tokens": ""}
{"commit_tokens": ["catch", "Throwable", "on", "startup", "rather", "than", "Exception"], "add_tokens": "catch ( Throwable e )", "del_tokens": "catch ( Exception e )"}
{"commit_tokens": ["count", "down", "latch", "if", "we", "don", "t", "have", "any", "changes", "in", "cluster", "update", "settings"], "add_tokens": "latch . countDown ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "obsolete", "import"], "add_tokens": "", "del_tokens": "import android . util . Log ;"}
{"commit_tokens": ["Add", "a", "TODO", "for", "future", "reference"], "add_tokens": "/ / TODO : Should the createWebResourceSet ( ) methods be removed to some / / utility class for fiel system based resource sets ?", "del_tokens": ""}
{"commit_tokens": ["Fix", "CalendarView", "to", "show", "the", "month", "title", "properly", "."], "add_tokens": "private int mCurrentMonthDisplayed = - 1 ;", "del_tokens": "private int mCurrentMonthDisplayed ;"}
{"commit_tokens": ["Fix", "AutoCraftingTable", "not", "respecting", "the", "doRemove", "flag", "."], "add_tokens": "if ( doRemove ) { this . craft ( ) ; }", "del_tokens": "this . craft ( ) ;"}
{"commit_tokens": ["Fix", "unnecessarily", "non", "-", "static", "inner", "class", "to", "static", "inner"], "add_tokens": "static class SessionState {", "del_tokens": "class SessionState {"}
{"commit_tokens": ["Adding", "missing", "override", "annotation", "."], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["Fixed", "TORODB", "-", "229"], "add_tokens": "} finally { client . close ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "ApplicationInfo", "copy", "ctor"], "add_tokens": "backupAgentName = orig . backupAgentName ;", "del_tokens": ""}
{"commit_tokens": ["Added", "consistency", "check", "tool", "."], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Fix", "unexpected", "rotation", "change", "when", "re", "-", "enabling", "auto", "-", "rotate"], "add_tokens": "mSensorEventListener . reset ( ) ;", "del_tokens": ""}
{"commit_tokens": ["help", "topic", "(", "PY", "-", "3290", ")"], "add_tokens": "return \" preferences . ExternalDocumentation \" ;", "del_tokens": "return null ; / / To change body of implemented methods use File | Settings | File Templates ."}
{"commit_tokens": ["Add", "status", "code", "javadoc", "."], "add_tokens": "* * Can be also be NETWORK_ERROR , AUTH_ERROR , or TRANSFORM_ERROR .", "del_tokens": ""}
{"commit_tokens": ["Removing", "unused", "imports", "."], "add_tokens": "", "del_tokens": "import java . util . Set ;"}
{"commit_tokens": ["add", "the", "return", "for", "the", "save", "(", ")", "method", "in", "PDF"], "add_tokens": "public boolean save ( String filename ) { return false ;", "del_tokens": "public void save ( String filename ) {"}
{"commit_tokens": ["add", "comment"], "add_tokens": "/ / prevent instantiation", "del_tokens": ""}
{"commit_tokens": ["Do", "not", "restrict", "alpha", "on", "selected", "color", "for", "underline", "."], "add_tokens": "mPaint . setColor ( selectedColor ) ;", "del_tokens": "mPaint . setColor ( selectedColor & 0xFFFFFF ) ;"}
{"commit_tokens": ["To", "call", "TypedArray", ".", "recycle", "(", ")", "when", "we", "are", "done", "with", "the", "array", "."], "add_tokens": "ta . recycle ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixes", "java", "5", "compatibility", "."], "add_tokens": "", "del_tokens": "@ Override"}
{"commit_tokens": ["Fix", "NPE", "on", "isValid", "for", "an", "expired", "session", "when", "activity", "check", "is", "enabled", "."], "add_tokens": "if ( ACTIVITY_CHECK ) { accessCount . set ( 0 ) ; }", "del_tokens": "accessCount = null ;"}
{"commit_tokens": ["Fix", "checkstyle"], "add_tokens": "private static final class BufferFactory implements EventFactory < ByteBuffer >", "del_tokens": "private static class BufferFactory implements EventFactory < ByteBuffer >"}
{"commit_tokens": ["RandomAccessSparseVector", "addTo", "made", "a", "inner", "static", "class"], "add_tokens": "private static class AddToVector implements IntDoubleProcedure {", "del_tokens": "private class AddToVector implements IntDoubleProcedure {"}
{"commit_tokens": ["made", "LogItem", "public"], "add_tokens": "public static class LogItem {", "del_tokens": "static class LogItem {"}
{"commit_tokens": ["Removed", "new", "lines"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Fix", "checkstyle"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Fix", "tiles", "animating", "when", "QS", "edit", "is", "open"], "add_tokens": "mRecyclerView . setAdapter ( mTileAdapter ) ;", "del_tokens": ""}
{"commit_tokens": ["Added", "encoded", "method", "for", "FakeContext", "."], "add_tokens": "@ Override public String getPathParameterEncoded ( String name ) { return this . getPathParameterEncoded ( name ) ; }", "del_tokens": ""}
{"commit_tokens": ["Fix", "null", "top", "view", "crash"], "add_tokens": "if ( topView = = null ) { return null ; }", "del_tokens": ""}
{"commit_tokens": ["compile", "warrings", "fixed"], "add_tokens": "", "del_tokens": "import java . sql . SQLException ;"}
{"commit_tokens": ["added", "license", "header"], "add_tokens": "/ * * Copyright ( c ) 2007 Mockito contributors * This program is made available under the terms of the MIT License . * /", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "54590", "Add", "a", "line", "break", "to", "show", "order", "matters", "?"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Fix", "#", "1796"], "add_tokens": "onFragmentActivated ( ) ;", "del_tokens": ""}
{"commit_tokens": ["remove", "javadoc", "warning"], "add_tokens": "", "del_tokens": "* @ created Mar 3 , 2011"}
{"commit_tokens": ["add", "missing", "test"], "add_tokens": "PyTypeParserTest . class , PyOverrideTest . class", "del_tokens": "PyTypeParserTest . class"}
{"commit_tokens": ["Added", "comments", "to", "lazily", "initialized", "singleton", "implementation", "."], "add_tokens": "* The instance is lazily initialized and thus needs synchronization * mechanism .", "del_tokens": ""}
{"commit_tokens": ["remove", "newline", "at", "EOF"], "add_tokens": "}", "del_tokens": "}"}
{"commit_tokens": ["Optimized", "searchFor", "(", ")"], "add_tokens": "sleeper . sleep ( ) ;", "del_tokens": "sleeper . sleep ( 1000 ) ;"}
{"commit_tokens": ["Prevent", "intermediate", "scale", "updates", "from", "being", "sent", "to", "WebKit", "while", "zooming", "."], "add_tokens": "return mZoomScale ! = 0 | | mInHWAcceleratedZoom ;", "del_tokens": "return mZoomScale ! = 0 ;"}
{"commit_tokens": ["stairs", "are", "standalone", "blocks"], "add_tokens": "@ Override public BuildingStage getBuildStage ( ) { return BuildingStage . STANDALONE ; }", "del_tokens": ""}
{"commit_tokens": ["Removed", "blank", "line"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Fix", "action", "bar", "items", "missing", "when", "opening", "new", "message", "."], "add_tokens": "invalidateOptionsMenu ( ) ;", "del_tokens": "configureMenu ( mMenu ) ;"}
{"commit_tokens": ["remove", "final"], "add_tokens": "public static boolean SETTING_FORCE_VERTICAL_SCREEN = false ;", "del_tokens": "public static final boolean SETTING_FORCE_VERTICAL_SCREEN = false ;"}
{"commit_tokens": ["Fixed", "formatting", "of", "data", "structure", "test", "code"], "add_tokens": "System . out . println ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Using", "id", "to", "compare", "Realms", "will", "also", "support", "in", "-", "memory", "Realms", "."], "add_tokens": "if ( object . realm . id = = this . id ) {", "del_tokens": "if ( object . realm = = this ) {"}
{"commit_tokens": ["Relax", "protected", "broadcast", "check", "to", "allow", "shell", "."], "add_tokens": "", "del_tokens": "case Process . SHELL_UID :"}
{"commit_tokens": ["Reset", "the", "setOnKeyListener", "callback", "when", "view", "is", "destroyed"], "add_tokens": "if ( mList ! = null ) { mList . setOnKeyListener ( null ) ; }", "del_tokens": ""}
{"commit_tokens": ["Fix", "the", "build"], "add_tokens": "/ * * * @ hide Pending API council approval . * /", "del_tokens": ""}
{"commit_tokens": ["help", "ID", "(", "PY", "-", "4112", ")"], "add_tokens": "return \" python . reference . introduceField \" ;", "del_tokens": "return \" refactoring . introduceField \" ;"}
{"commit_tokens": ["Remove", "wrong", "comment"], "add_tokens": "", "del_tokens": "/ / For [ JACKSON - 853 ]"}
{"commit_tokens": ["Remove", "the", "callAllGets", "feature", "of", "CombinedFuture", "."], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["IDEA", "-", "19061", "Integrate", "the", "Rearranger", "-", "plugin", "into", "core", "-", "IDE"], "add_tokens": "default : / / Do nothing", "del_tokens": "default : assert false ;"}
{"commit_tokens": ["Beautify", "sample"], "add_tokens": "* @ author alessandro . balocco", "del_tokens": "* @ author Orhan Obut"}
{"commit_tokens": ["Removed", "an", "unused", "stacktrace"], "add_tokens": "", "del_tokens": "new Exception ( \" Something is wrong \" ) . printStackTrace ( ) ;"}
{"commit_tokens": ["Made", "exception", "public", "to", "allow", "reflective", "use", "."], "add_tokens": "public static class StartupFailureException extends Exception", "del_tokens": "private static class StartupFailureException extends Exception"}
{"commit_tokens": ["Remove", "a", "print", "statement", "that", "I", "accidentally", "left", "in", "a", "test", "."], "add_tokens": "", "del_tokens": "System . err . println ( compiler . getCodingConvention ( ) ) ;"}
{"commit_tokens": ["IDEA", "-", "130338", "Please", "restore", "previous", "mapIds", "for", "topics", "in", "Settings", "/", "Preferences", "dialog"], "add_tokens": "return \" reference . settingsdialog . codestyle . json \" ;", "del_tokens": "return null ;"}
{"commit_tokens": ["Avoid", "compiler", "warnings"], "add_tokens": "private static final long serialVersionUID = 1L ;", "del_tokens": ""}
{"commit_tokens": ["Made", "Column", "name", "optional", "."], "add_tokens": "package com . activeandroid . annotation ;", "del_tokens": "package com . activeandroid . annotation ;"}
{"commit_tokens": ["Remove", "unused", "var"], "add_tokens": "", "del_tokens": "private Sink mMetricsServlet ;"}
{"commit_tokens": ["add", "apn", "setting", "parameters", "and", "set", "apn", "parameters", "to", "bp"], "add_tokens": "int RIL_REQUEST_SET_DATA_PROFILE = 128 ;", "del_tokens": ""}
{"commit_tokens": ["Clarify", "usage", "of", "StateManagerExceptionHandler", ".", "error", "field", "with", "a", "comment"], "add_tokens": "/ / written and read by same / single thread", "del_tokens": ""}
{"commit_tokens": ["add", "a", "comment", "on", "a", "missing", "feature"], "add_tokens": "/ / TODO : this should stored in the model rather than hard coded here", "del_tokens": ""}
{"commit_tokens": ["adding", "CMYK", "constant", "for", "future", "expansion"], "add_tokens": "static final int CMYK = 5 ; / / image & color ( someday )", "del_tokens": ""}
{"commit_tokens": ["fixed", "FileUtil", "#", "equals"], "add_tokens": "if ( equals ( file1 , file2 ) ) {", "del_tokens": "if ( equals ( file1 , file1 ) ) {"}
{"commit_tokens": ["Very", "stupid", "coding", "mistake", "."], "add_tokens": "return first ;", "del_tokens": "return first ( ) ;"}
{"commit_tokens": ["Remove", "incorrect", "TODO"], "add_tokens": "", "del_tokens": "/ / TODO replace with GrammaticalStructure ' s CoNLL loader"}
{"commit_tokens": ["Fix", "bug", "#", "12422326", "Unable", "to", "change", "text", "direction", "programmatically", "using", "setTextDirection", "Android", "SDK", "API", "-", "DO", "NOT", "MERGE"], "add_tokens": "if ( mLayout ! = null ) { checkForRelayout ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["do", "not", "encode", "sendRedirect", "URLs"], "add_tokens": "", "del_tokens": "location = encodeRedirectURL ( location ) ;"}
{"commit_tokens": ["remove", "unneeded", "line"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["set", "max_events_per_sec", "to", "55"], "add_tokens": "result = 55 ;", "del_tokens": "result = 60 ;"}
{"commit_tokens": ["add", "javadoc"], "add_tokens": "/ * * * supports [ ] to be valid character class * /", "del_tokens": ""}
{"commit_tokens": ["Do", "not", "scan", "a", "file", "which", "cannot", "be", "read"], "add_tokens": "if ( ! file . exists ( ) | | ! file . canRead ( ) ) {", "del_tokens": "if ( ! file . exists ( ) ) {"}
{"commit_tokens": ["Adding", "default", "case"], "add_tokens": "default : mAddress = new Address ( email ) ;", "del_tokens": ""}
{"commit_tokens": ["remove", "component", "annotation"], "add_tokens": "", "del_tokens": "@ Component"}
{"commit_tokens": ["Changed", "wrong", "id", "."], "add_tokens": "return \" pyconsole \" ;", "del_tokens": "return \" coverage \" ;"}
{"commit_tokens": ["Fixed", "the", "filter", "decrement", "count", "bug", "in", "subtasks", "mode"], "add_tokens": "super . onTaskDelete ( task ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "sendNotifications", "called", "twice"], "add_tokens": "", "del_tokens": "sendNotifications ( ) ;"}
{"commit_tokens": ["NestedScrollView", "should", "call", "super", ".", "onAttachedToWindow", "(", ")"], "add_tokens": "super . onAttachedToWindow ( ) ;", "del_tokens": ""}
{"commit_tokens": ["add", "return"], "add_tokens": "return false ;", "del_tokens": ""}
{"commit_tokens": ["revert", "debugging", "change"], "add_tokens": "private static int MAX_POOL_SIZE_FOR_FATALS = 100 ;", "del_tokens": "private static int MAX_POOL_SIZE_FOR_FATALS = 2 ;"}
{"commit_tokens": ["forcing", "platform", "JNA", "lib", "to", "load", "before", "a", "3rd", "-", "party", "one"], "add_tokens": "/ / force platform JNA load Class . forName ( \" com . sun . jna . Native \" ) ;", "del_tokens": ""}
{"commit_tokens": ["Changed", "order", "of", "init", "in", "SmackAndroid", "(", ")"], "add_tokens": "ConfigureProviderManager . configureProviderManager ( ) ;", "del_tokens": "ConfigureProviderManager . configureProviderManager ( ) ;"}
{"commit_tokens": ["CAMEL", "-", "7209", "Fixed", "the", "unit", "test", "failure", "of", "XmlConverterTest"], "add_tokens": "buf . flip ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "checkstyle", "issues"], "add_tokens": "* @ param < T > result type *", "del_tokens": ""}
{"commit_tokens": ["removed", "unnecessary", "import"], "add_tokens": "", "del_tokens": "import java . net . MalformedURLException ;"}
{"commit_tokens": ["volatile", "should", "ensure", "double", "locking", "to", "work", "properly"], "add_tokens": "protected static volatile BufferPool instance = null ;", "del_tokens": "protected static BufferPool instance = null ;"}
{"commit_tokens": ["added", "copying", "to", "JSONPointer", "constructor"], "add_tokens": "this . refTokens = new ArrayList < String > ( refTokens ) ;", "del_tokens": "this . refTokens = refTokens ;"}
{"commit_tokens": ["Suppress", "warning"], "add_tokens": "@ SuppressWarnings ( \" NullableProblems \" )", "del_tokens": ""}
{"commit_tokens": ["Add", "missing", "case", "for", "click"], "add_tokens": "} else if ( ! mDataChanged & & mAdapter . isEnabled ( motionPosition ) ) { performClick . run ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "unnecessary", "imports"], "add_tokens": "", "del_tokens": "import java . nio . ByteBuffer ;"}
{"commit_tokens": ["Download", "thumbnails", "from", "server", "with", "rest", "api"], "add_tokens": "", "del_tokens": "/ / Commented out as maybe changes to client library are needed"}
{"commit_tokens": ["Fix", "logic", "issue", "in", "ForgeChunkManager", ".", "ticketCountAvaliableFor", "(", "username", ")", "PR"], "add_tokens": "return playerTicketLength - playerTickets . get ( username ) . size ( ) ;", "del_tokens": "return playerTickets . get ( username ) . size ( ) - playerTicketLength ;"}
{"commit_tokens": ["Invalidate", "the", "cached", "ripple", "drawable", "mask", "if", "mask", "layer", "changes"], "add_tokens": "mHasValidMask = false ;", "del_tokens": ""}
{"commit_tokens": ["multithreading", "issues", "(", "caused", "by", "parallel", "injected", "-", "code", "highlighting", ")"], "add_tokens": "public synchronized PsiFile getPsiFile ( ) {", "del_tokens": "public PsiFile getPsiFile ( ) {"}
{"commit_tokens": ["Fix", "memory", "leak", "in", "shutdown", "of", "NetworkSystemImpl", "."], "add_tokens": "storageManager = null ;", "del_tokens": ""}
{"commit_tokens": ["Make", "PackageFactoryApparatus", "#", "getPackageLocator", "public", "."], "add_tokens": "public CachingPackageLocator getPackageLocator ( ) {", "del_tokens": "CachingPackageLocator getPackageLocator ( ) {"}
{"commit_tokens": ["LPS", "-", "37811", "Remove", "unthrown", "exception"], "add_tokens": "throws SystemException {", "del_tokens": "throws PortalException , SystemException {"}
{"commit_tokens": ["Fix", "NPE", "in", "layoutlib", "."], "add_tokens": "", "del_tokens": "mContext = null ;"}
{"commit_tokens": ["Rename", "File", "(", "same", "name", ")", "-", "Error", "and", "Hangs"], "add_tokens": "dismissProgress ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Improve", "doc", "string", "."], "add_tokens": "* Tools that use generated POJO or MOJO models .", "del_tokens": "* Tools that use generated POJO models ."}
{"commit_tokens": ["Fixed", "MS", "Access", "identifier", "quoting"], "add_tokens": "case ACCESS :", "del_tokens": ""}
{"commit_tokens": ["Remove", "pre", "-", "loading", "of", "inner", "class", "that", "was", "removed", "as", "part", "of", "r605000", "."], "add_tokens": "", "del_tokens": "\" core . StandardWrapper $ 1 \" ) ; loader . loadClass ( basePackage +"}
{"commit_tokens": ["Fix", "NPE", "bug"], "add_tokens": "ITileSource map = this . map ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "a", "bug", "for", "setting", "labels", "in", "BuildBinarizedDataset"], "add_tokens": "setUnknownLabels ( collapsedUnary , mainLabel ) ;", "del_tokens": "setUnknownLabels ( binarized , mainLabel ) ;"}
{"commit_tokens": ["Removed", "ItemStack", "import"], "add_tokens": "", "del_tokens": "import org . bukkit . ItemStack ;"}
{"commit_tokens": ["LPS", "-", "8772", "Missed", "one", "line", "caused", "ETagFilter", "not", "working", "correctly"], "add_tokens": "super . setStatus ( _status ) ;", "del_tokens": ""}
{"commit_tokens": ["Ignore", "outstanding", "delayed", "shutdown", "on", "restart"], "add_tokens": "mDelayedStopCounter + + ;", "del_tokens": ""}
{"commit_tokens": ["added", "a", "call", "to", "super", ".", "setSpatial", "in", "setSpatial"], "add_tokens": "super . setSpatial ( spatial ) ;", "del_tokens": ""}
{"commit_tokens": ["Bluez", "doesn", "t", "handle", "disconnect", "while", "connecting", "well", "."], "add_tokens": "deferMessage ( message ) ;", "del_tokens": "processCommand ( DISCONNECT_A2DP_OUTGOING ) ;"}
{"commit_tokens": ["Correct", "a", "typo"], "add_tokens": "* The Subject associated with the current AccessControlContext", "del_tokens": "* The Subject associated with the current AccessControllerContext"}
{"commit_tokens": ["remove", "unused", "import", "statement"], "add_tokens": "", "del_tokens": "import java . io . PrintStream ;"}
{"commit_tokens": ["get", "back", "automatic", "stacktrace", "analyzer", "on", "mac"], "add_tokens": "", "del_tokens": "if ( SystemInfo . isMac ) return ;"}
{"commit_tokens": ["Do", "not", "back", "up", "/", "restore", "the", "pulse", "LED", "for", "notifications", "setting"], "add_tokens": "", "del_tokens": "NOTIFICATION_LIGHT_PULSE ,"}
{"commit_tokens": ["Add", "isPlaying", "(", ")", "to", "animation", "objects"], "add_tokens": "public boolean isPlaying ( ) { return mIsPlaying ; }", "del_tokens": ""}
{"commit_tokens": ["switch", "back", "the", "divider", "to", "true", "so", "the", "behavior", "keeps", "the", "same", "for", "people"], "add_tokens": "protected boolean mDividerBelowHeader = true ;", "del_tokens": "protected boolean mDividerBelowHeader = false ;"}
{"commit_tokens": ["Remove", "unneeded", "import", "."], "add_tokens": "", "del_tokens": "import hex . GLMTest2 ;"}
{"commit_tokens": ["LPS", "-", "14623", "Fix", "secure", "portlet", "URLs", "generated", "on", "unsecure", "pages", "of", "virtual", "hosted", "communities"], "add_tokens": "_layoutFriendlyURL = HttpUtil . protocolize ( _layoutFriendlyURL , _secure ) ;", "del_tokens": ""}
{"commit_tokens": ["Set", "the", "default", "rendered", "to", "not", "be", "OpenGL", ";", "patch", "from", "Ben", "."], "add_tokens": "normalItem . setState ( true ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "unnused", "variable", "."], "add_tokens": "", "del_tokens": "private ContentQueryMap mSettings ;"}
{"commit_tokens": ["add", "TODO", "for", "BIP"], "add_tokens": "/ / TODO PIERRE", "del_tokens": ""}
{"commit_tokens": ["Fix", "wifi", "data", "activity", "icons"], "add_tokens": "mWifiActivityIconId = 0 ;", "del_tokens": ""}
{"commit_tokens": ["Finally", "get", "the", "interaction", "right", "between", "integrated", "folder"], "add_tokens": "else if ( integrate = = false & & folderNames = = null )", "del_tokens": "else"}
{"commit_tokens": ["build", "#", "4"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Prevent", "receiver", "leak", "in", "TrustAgentWrapper"], "add_tokens": "mContext . unregisterReceiver ( mBroadcastReceiver ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "font", "selection", "."], "add_tokens": "return super . getFontName ( ) ;", "del_tokens": "return \" Monospaced - 14 \" ;"}
{"commit_tokens": ["b", "/", "5309787", "Add", "new", "columns", "to", "hidden", "list", "of", "read", "only", "fields"], "add_tokens": "ALLOWED_ATTENDEE_TYPES , ALLOWED_AVAILABILITY ,", "del_tokens": ""}
{"commit_tokens": ["Update", "uploads", "view", "when", "finish", "upload", "is", "deleted"], "add_tokens": "refreshView ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Avoid", "Profile", ".", "getTimeZone", "(", ")", "NullPointerException"], "add_tokens": "public Integer getTimeZone ( ) {", "del_tokens": "public int getTimeZone ( ) {"}
{"commit_tokens": ["Updated", "imports", "."], "add_tokens": "import com . wrapp . floatlabelededittext . Utils ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "import", "error"], "add_tokens": "import buildcraft . BuildCraftEnergy ;", "del_tokens": ""}
{"commit_tokens": ["reformat", "code", "confirmation"], "add_tokens": "", "del_tokens": "return ;"}
{"commit_tokens": ["Suppress", "a", "deprecation", "warning", "."], "add_tokens": "@ SuppressWarnings ( \" deprecation \" )", "del_tokens": ""}
{"commit_tokens": ["revert", "change", "preventing", "NULL", "SSID", "in", "a", "WifiConfiguration"], "add_tokens": "", "del_tokens": "if ( SSID = = null ) return false ;"}
{"commit_tokens": ["Include", "correct", "redirection", "messages", "in", "the", "HAR", "/", "list", "returned", "by", "the", "API"], "add_tokens": "processor . process ( tempReq ) ;", "del_tokens": "processor . process ( request ) ;"}
{"commit_tokens": ["Remove", "unnecessary", "dependency", "of", "AppCompat", "library", "."], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["dropped", "old", "and", "unused", "method"], "add_tokens": "", "del_tokens": "public boolean isLineCommentPrefixOnZeroColumn ( ) { return false ; }"}
{"commit_tokens": ["Fixed", "#", "1706"], "add_tokens": "return this . refreshStats ;", "del_tokens": "return this . refresh ( ) ;"}
{"commit_tokens": ["Fix", "minor", "eclipse", "compile", "warning"], "add_tokens": "", "del_tokens": "import de . undercouch . bson4jackson . BsonGenerator ;"}
{"commit_tokens": ["Fix", "build", "."], "add_tokens": "* @ hide", "del_tokens": ""}
{"commit_tokens": ["Fix", "setting", "provider", "for", "the", "root", "group"], "add_tokens": "rootGroup . setOwnerProvider ( provider ) ;", "del_tokens": ""}
{"commit_tokens": ["don", "t", "hold", "psi", "in", "local", "search", "scope", "of", "SSBasedInspection"], "add_tokens": "matchContext . getOptions ( ) . setScope ( null ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "javadoc", "for", "CameraManager", ".", "AvailabilityCallback"], "add_tokens": "* @ see # registerAvailabilityCallback", "del_tokens": "* @ see registerAvailabilityCallback"}
{"commit_tokens": ["Fix", "resource", "leak"], "add_tokens": "scanner . close ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Updated", "version"], "add_tokens": "private static final String VERSION = \" 0 . 2 . 0 \" ;", "del_tokens": "private static final String VERSION = \" 0 . 1 . 3 \" ;"}
{"commit_tokens": ["Removed", "unused", "import", "."], "add_tokens": "", "del_tokens": "import java . util . Iterator ;"}
{"commit_tokens": ["Fix", "block", "break", "robots", "going", "into", "sleep", "mode", "after", "successfully", "harvesting", "block", "."], "add_tokens": "", "del_tokens": "startDelegateAI ( new AIRobotGotoSleep ( robot ) ) ;"}
{"commit_tokens": ["Granular", "navigation", "uses", "mContentDescription", "instead", "of", "getCpontentDescription", "(", ")", "s"], "add_tokens": "return getContentDescription ( ) ;", "del_tokens": "return mContentDescription ;"}
{"commit_tokens": ["Fix", "Javadoc", "for", "View"], "add_tokens": "", "del_tokens": "* { @ link View # LAYOUT_DIRECTION_LTR } * { @ link View # LAYOUT_DIRECTION_RTL }"}
{"commit_tokens": ["Suppresses", "deprication", "warning", "."], "add_tokens": "@ SuppressWarnings ( \" deprecation \" )", "del_tokens": ""}
{"commit_tokens": ["do", "not", "leak", "menu", "-", ">", "root_panel", "-", ">", "."], "add_tokens": "setJMenuBar ( null ) ;", "del_tokens": ""}
{"commit_tokens": ["add", "missing", "@", "since", "annotation"], "add_tokens": "* @ since 2 . 5", "del_tokens": ""}
{"commit_tokens": ["Fix", "a", "race", "condition", "when", "entering", "and", "exiting", "a", "preference", "fragment", "quickly", "."], "add_tokens": "mHandler . removeMessages ( MSG_BIND_PREFERENCES ) ;", "del_tokens": ""}
{"commit_tokens": ["Removed", "excess", "comma"], "add_tokens": "INVALID_CHARACTER_IN_NAME", "del_tokens": "INVALID_CHARACTER_IN_NAME ,"}
{"commit_tokens": ["LPS", "-", "23854", "New", "pages", "should", "create", "draf", "revisions", "initially"], "add_tokens": "serviceContext . setWorkflowAction ( WorkflowConstants . ACTION_SAVE_DRAFT ) ;", "del_tokens": ""}
{"commit_tokens": ["Removed", "an", "unused", "variable"], "add_tokens": "", "del_tokens": "Response response ;"}
{"commit_tokens": ["Fix", "SlicedMapImpl", "#", "clear"], "add_tokens": "collectiveSliceKeys = null ;", "del_tokens": ""}
{"commit_tokens": ["added", "TODO"], "add_tokens": "/ / TODO make sure tests for mockito run quickly on slower machines", "del_tokens": ""}
{"commit_tokens": ["Fix", "indent"], "add_tokens": "errorException = ex ;", "del_tokens": "errorException = ex ;"}
{"commit_tokens": ["Remove", "UserID", "when", "logout"], "add_tokens": ". remove ( SAVE_STATE_KEY_USER_ID )", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "17306", "Fix", "compile", "error"], "add_tokens": "", "del_tokens": "public void setPrimaryKey ( long pk ) ;"}
{"commit_tokens": ["Activated", "unit", "test", "for", "CoGroupOperator"], "add_tokens": "@ Test", "del_tokens": "/ / @ Test"}
{"commit_tokens": ["don", "t", "force", "reload", "of", "IDE", "for", "project", "options"], "add_tokens": "return false ;", "del_tokens": "return true ;"}
{"commit_tokens": ["DSL", "Platform", "minified", "json", "codec", "name", "change", "."], "add_tokens": "return \" minified - json / dsl - platform \" ;", "del_tokens": "return \" json / dsl - platform / minified \" ;"}
{"commit_tokens": ["Fixed", "filterByNodesConstantSet", "in", "LocalProperties"], "add_tokens": "return ! isTrivial ( ) ;", "del_tokens": "return isTrivial ( ) ;"}
{"commit_tokens": ["Added", "missing", "@", "Override", "in", "HazelcastClientProxy", "."], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["set", "default", "version", "if", "one", "is", "not", "set"], "add_tokens": "this . version = version = = null ? new DateTime ( ) : version ;", "del_tokens": "this . version = version ;"}
{"commit_tokens": ["Add", "UniversalEnglish", "as", "new", "language", "to", "GrammaticalRelation", "such", "that", "original", "SD", "and", "UD", "can", "be", "both", "used", "."], "add_tokens": "public static enum Language { Any , English , Chinese , UniversalEnglish }", "del_tokens": "public static enum Language { Any , English , Chinese }"}
{"commit_tokens": ["Fix", "the", "message", "decoder", "to", "ignore", "reserved", "flags"], "add_tokens": "in_progress . set_flags ( first & Msg . more ) ;", "del_tokens": "in_progress . set_flags ( first ) ;"}
{"commit_tokens": ["Fix", "InputType", "determination", "of", "WebTextView", "(", "DO", "NOT", "MERGE", ")"], "add_tokens": "inputType | = EditorInfo . TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS ;", "del_tokens": "inputType = EditorInfo . TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS ;"}
{"commit_tokens": ["Remove", "unnecessary", "new", "DiagnosticGroup", "(", ")", "call", "in", "DiagnosticGroups"], "add_tokens": "JsMessageVisitor . MESSAGE_HAS_NO_DESCRIPTION ) ;", "del_tokens": "new DiagnosticGroup ( JsMessageVisitor . MESSAGE_HAS_NO_DESCRIPTION ) ) ;"}
{"commit_tokens": ["Source", "formatting", "-", "remove", "empty", "line"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Set", "the", "padding", "on", "the", "content", "of", "the", "sliding", "activity", "to", "zero", "if", "you", "disable", "the", "header", "."], "add_tokens": "content . setPadding ( 0 , 0 , 0 , 0 ) ;", "del_tokens": ""}
{"commit_tokens": ["Added", "StatefulPersistenceContext", ".", "getProxiesByKey", "(", ")", "(", "needed", "for", "testing", "non", "-", "flushed", "changes", ")"], "add_tokens": "public Map getProxiesByKey ( ) { return proxiesByKey ; }", "del_tokens": ""}
{"commit_tokens": ["Fix", "output", "stream", "to", "not", "use", "the", "converter", "in", "the", "buffer", "but", "do", "a", "simple", "hard", "coded", "conversion", "."], "add_tokens": "super . print ( s ) ;", "del_tokens": "ob . write ( s ) ;"}
{"commit_tokens": ["Add", "EXPONENT", "to", "mayBeExpression", "(", ")"], "add_tokens": "case EXPONENT :", "del_tokens": ""}
{"commit_tokens": ["Added", "getServerAddress", "to", "SingleChannelMongoClient"], "add_tokens": "public ServerAddress getServerAddress ( ) { return channel . getAddress ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["Forgot", "to", "add", "that", "start", "throws", "Exception"], "add_tokens": "public void start ( ) throws Exception {", "del_tokens": "public void start ( ) {"}
{"commit_tokens": ["CORE", "-", "1216", "generateChangeLog", "pulls", "data", "with", "schema", "by", "default"], "add_tokens": "return false ;", "del_tokens": "return true ;"}
{"commit_tokens": ["use", "the", "same", "stop"], "add_tokens": "stop ( ) ;", "del_tokens": "getSession ( ) . stop ( ) ;"}
{"commit_tokens": ["Remove", "an", "obsolete", "comment"], "add_tokens": "", "del_tokens": "/ / checking for null"}
{"commit_tokens": ["Make", "a", "field", "final", "."], "add_tokens": "private final LocalSocketImpl impl ;", "del_tokens": "private LocalSocketImpl impl ;"}
{"commit_tokens": ["Fix", "broken", "windows", "test"], "add_tokens": ". fileMmapCleanerHackEnable ( )", "del_tokens": ""}
{"commit_tokens": ["Add", "an", "afterMainOptimizations", "marker", "to", "DefaultPassConfig"], "add_tokens": "passes . add ( createEmptyPass ( \" afterMainOptimizations \" ) ) ;", "del_tokens": ""}
{"commit_tokens": ["give", "access", "to", "the", "defining", "classloader"], "add_tokens": "public GroovyClassLoader getDefiningClassLoader ( ) {", "del_tokens": "protected GroovyClassLoader getDefiningClassLoader ( ) {"}
{"commit_tokens": ["Avoid", "NPE", "."], "add_tokens": "if ( member = = null ) return ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "data", "activity", "overlay", "not", "being", "removed", "when", "data", "is", "disabled"], "add_tokens": "} else { mMobileActivityIconId = 0 ;", "del_tokens": ""}
{"commit_tokens": ["Allow", "animation", "styles", "to", "be", "applied", "to", "popup", "windows", "."], "add_tokens": "p . packageName = mContext . getPackageName ( ) ;", "del_tokens": ""}
{"commit_tokens": ["FastArray", "doesn", "t", "overwrite", "toString", "(", ")", "method"], "add_tokens": "if ( size ( ) = = 0 ) return \" [ ] \" ;", "del_tokens": ""}
{"commit_tokens": ["SQLUtils", "surpport", "ODPS"], "add_tokens": "return toOdpsString ( sqlObject ) ;", "del_tokens": "return toDB2String ( sqlObject ) ;"}
{"commit_tokens": ["do", "not", "show", "duplicate", "containing", "file", "when", "navigation", "element", "is", "a", "file", "itself"], "add_tokens": "return myElement instanceof PsiFile ? null : myElement . getContainingFile ( ) ;", "del_tokens": "return myElement . getContainingFile ( ) ;"}
{"commit_tokens": ["Remove", "Basque", "hyphenation", "patterns"], "add_tokens": "", "del_tokens": "\" eu \" ,"}
{"commit_tokens": ["Fix", "typo", "."], "add_tokens": "blockFuel = Block . blocksList [ fluidFuel . getBlockID ( ) ] ;", "del_tokens": "blockFuel = Block . blocksList [ fluidOil . getBlockID ( ) ] ;"}
{"commit_tokens": ["don", "t", "show", "misleading", "help", "message"], "add_tokens": "System . exit ( 1 ) ;", "del_tokens": "return ;"}
{"commit_tokens": ["Add", "@", "Implementation", "to", "ShadowApplication", ".", "checkPermission", "(", ")"], "add_tokens": "@ Implementation", "del_tokens": ""}
{"commit_tokens": ["Removing", "newline", "from", "EOF", "."], "add_tokens": "}", "del_tokens": "}"}
{"commit_tokens": ["Fix", "syntax", "error"], "add_tokens": "objectManager . enqueueUnusedObject ( this ) ;", "del_tokens": "objectManager . markUnusedObject ( this ) ;"}
{"commit_tokens": ["Adding", "video", "link"], "add_tokens": "* Video link - https : / / youtu . be / ID00PMy0 - vE *", "del_tokens": ""}
{"commit_tokens": ["Change", "IndexPrimaryShardNotAllocatedException", "from", "409", "(", "RestStatus", ".", "CONFLICT", ")", "to", "500", "(", "RestStatus", ".", "INTERNAL_SERVER_ERROR", ")"], "add_tokens": "return RestStatus . INTERNAL_SERVER_ERROR ;", "del_tokens": "return RestStatus . CONFLICT ;"}
{"commit_tokens": ["fix", "a", "crash", "when", "resizing", "with", "a", "dimension", "to", "0", "(", "based", "on", "the", "ImageView", "dimensions", ")"], "add_tokens": "withImageView ( imageView ) ;", "del_tokens": ""}
{"commit_tokens": ["Add", "BAD_PACKAGE_PROPERTY_ACCESS", "DiagnosticType", "to", "the", "VISIBILITY", "DiagnosticGroup", "(", "which", "transitively", "adds", "it", "to", "ACCESS_CONTROLS", ")", "."], "add_tokens": "CheckAccessControls . BAD_PACKAGE_PROPERTY_ACCESS ,", "del_tokens": ""}
{"commit_tokens": ["Revalidating", "the", "PApplet", "on", "resize", "so", "child", "components", "(", "like", "GLCanvas", ")"], "add_tokens": "revalidate ( ) ; / / let the layout manager do its work", "del_tokens": ""}
{"commit_tokens": ["Remove", "unused", "import", "."], "add_tokens": "", "del_tokens": "import net . simonvt . menudrawer . BuildConfig ;"}
{"commit_tokens": ["NewPropertyAction", "checks", "empty", "property", "keys"], "add_tokens": "return ! inputString . isEmpty ( ) ;", "del_tokens": "return true ;"}
{"commit_tokens": ["fixed", "formatting"], "add_tokens": "* /", "del_tokens": "* /"}
{"commit_tokens": ["Fixing", "build", "breakage", "."], "add_tokens": "@ Override public void cancelTaskWindowTransition ( int taskId ) { }", "del_tokens": ""}
{"commit_tokens": ["woops", "java", "type", "checks", "!"], "add_tokens": "this . heading = 0 ;", "del_tokens": "this . heading = 0 . 0 ;"}
{"commit_tokens": ["Change", "access", "modifier", "for", "onRestoreInstanceState"], "add_tokens": "public void onRestoreInstanceState ( Parcelable state ) {", "del_tokens": "protected void onRestoreInstanceState ( Parcelable state ) {"}
{"commit_tokens": ["LPS", "-", "7398", "Remove", "blank", "lines"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Ignoring", "SSL", "test", "for", "now", "."], "add_tokens": "@ Ignore", "del_tokens": ""}
{"commit_tokens": ["added", "TODO"], "add_tokens": "/ / TODO null check", "del_tokens": ""}
{"commit_tokens": ["Adding", "standalone", "product", "category"], "add_tokens": "ADD_ON , STANDALONE", "del_tokens": "ADD_ON"}
{"commit_tokens": ["Fix", "checkstyle"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Fix", "inline", "with", "Oleg", "s", "comments", "."], "add_tokens": "public final void setClassloader ( ClassLoader aLoader )", "del_tokens": "public final void setClassLoader ( ClassLoader aLoader )"}
{"commit_tokens": ["Recalculate", "orientation", "in", "getOrientation", "(", ")"], "add_tokens": "setOrientation ( ) ; / / Force mOrientation to be recalculated", "del_tokens": ""}
{"commit_tokens": ["Fix", "the", "build"], "add_tokens": "private void updateWebTextViewPosition ( ) {", "del_tokens": "public void updateWebTextViewPosition ( ) {"}
{"commit_tokens": ["Add", "toString", "(", ")", "to", "IndexShardGateway"], "add_tokens": "@ Override public String toString ( ) { return \" shard_gateway \" ; }", "del_tokens": ""}
{"commit_tokens": ["make", "ObjectId", "Serializable", "JAVA", "-", "109"], "add_tokens": "public class ObjectId implements Comparable < ObjectId > , java . io . Serializable {", "del_tokens": "public class ObjectId implements Comparable < ObjectId > {"}
{"commit_tokens": ["Keep", "action", "bar", "window", "list", "in", "sync", "after", "creating", "window", "from", "WindowList", "activity"], "add_tokens": "onResumeSelectWindow = mTermSessions . size ( ) - 1 ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "MappedRecordCursor", "bug"], "add_tokens": "return delegate . getType ( toDelegateField ( field ) ) ;", "del_tokens": "return delegate . getType ( field ) ;"}
{"commit_tokens": ["Suspend", "must", "freeze", "the", "time"], "add_tokens": "myStartTime = - 1 ;", "del_tokens": ""}
{"commit_tokens": ["Added", "a", "null", "check"], "add_tokens": "if ( itemsAdapter = = null ) return ;", "del_tokens": ""}
{"commit_tokens": ["Trivial", "-", "fix", "an", "Eclipse", "warning"], "add_tokens": "new URL ( repository ) ;", "del_tokens": "URL url = new URL ( repository ) ;"}
{"commit_tokens": ["Remove", "unused", "import", "from", "a", "sun", "package", "."], "add_tokens": "", "del_tokens": "import sun . security . util . BigInt ;"}
{"commit_tokens": ["Fixed", "partial", "delete", "."], "add_tokens": "/ / if ( rowKey . getDataType ( ) = = null )", "del_tokens": "if ( rowKey . getDataType ( ) = = null )"}
{"commit_tokens": ["Fix", "typo", "in", "DeletionInfo"], "add_tokens": "| | ranges ! = null ;", "del_tokens": "| | ranges = = null ;"}
{"commit_tokens": ["Use", "proper", "naming", "convention", "for", "boolean", "methods", "."], "add_tokens": "public boolean isCustomNameVisible ( ) ;", "del_tokens": "public boolean getCustomNameVisible ( ) ;"}
{"commit_tokens": ["Removed", "unnecessary", "layout", "adapter"], "add_tokens": "", "del_tokens": "LinearLayoutManager linearLayoutManager = new LinearLayoutManager ( this ) ; / / mAvengersRecycler . setLayoutManager ( linearLayoutManager ) ;"}
{"commit_tokens": ["fixed", "javadoc", "for", "zipalign", "path", "getter"], "add_tokens": "* Get the android zipalign path .", "del_tokens": "* Get the android debug tool path ( adb ) ."}
{"commit_tokens": ["Remove", "unused", "import", "from", "test", "code", "."], "add_tokens": "", "del_tokens": "import com . puppycrawl . tools . checkstyle . api . CheckstyleException ;"}
{"commit_tokens": ["classes", "preloading", "re", "-", "enabled"], "add_tokens": "catch ( Exception e ) {", "del_tokens": "catch ( IOException e ) {"}
{"commit_tokens": ["Rogue", "line", "number", "for", "method", "declarations", "confuses", "IDE", "debuggers"], "add_tokens": "", "del_tokens": "onLineNumber ( block , \" visitBlockStatement \" ) ;"}
{"commit_tokens": ["Remove", "obsolete", "code"], "add_tokens": "", "del_tokens": "public static String clusterId = null ;"}
{"commit_tokens": ["Fix", "inverted", "conditional", "in", "View", ".", "setFilterTouchesWhenObscured", "."], "add_tokens": "setFlags ( enabled ? FILTER_TOUCHES_WHEN_OBSCURED : 0 ,", "del_tokens": "setFlags ( enabled ? 0 : FILTER_TOUCHES_WHEN_OBSCURED ,"}
{"commit_tokens": ["Incorporated", "PR", "comment"], "add_tokens": "* Tests that completing a file asynchronously works .", "del_tokens": "*"}
{"commit_tokens": ["temporarily", "disable", "incomplete", "compilation", "infrastructure", "based", "on", "tools", "-", "r8"], "add_tokens": "/ / return myPlatformToolsRevision ; return 7 ;", "del_tokens": "return myPlatformToolsRevision ;"}
{"commit_tokens": ["Flip", "EMERGENCY_ASSISTANCE_ENABLED", "to", "true"], "add_tokens": "public static final boolean EMERGENCY_ASSISTANCE_ENABLED = true ;", "del_tokens": "public static final boolean EMERGENCY_ASSISTANCE_ENABLED = false ;"}
{"commit_tokens": ["Implemented", "new", "constructor", "in", "EmbeddedNeo", "."], "add_tokens": "this . shellServer = null ; NeoJvmInstance . start ( null , storeDir , true ) ;", "del_tokens": "/ / TODO : implement"}
{"commit_tokens": ["remove", "bracket", "."], "add_tokens": "", "del_tokens": "}"}
{"commit_tokens": ["Removed", "system", "out", "."], "add_tokens": "", "del_tokens": "System . out . println ( \" Created relationship type \" + name ) ;"}
{"commit_tokens": ["Remove", "spurious", "@", "Deprecate", "tag", "from", "WebView", ".", "onMeasure"], "add_tokens": "", "del_tokens": "@ Deprecated"}
{"commit_tokens": ["Added", "TODO"], "add_tokens": "/ / TODO : add tests for generated equals ( ) method", "del_tokens": ""}
{"commit_tokens": ["Fix", "checking", "for", "supported", "audio", "formats", "(", "report", "by", "Thomas", "Hofer", ")"], "add_tokens": "if ( ! transmittableAudioEncodings . contains ( sdp ) )", "del_tokens": "if ( transmittableAudioEncodings . contains ( sdp ) )"}
{"commit_tokens": ["added", "TODOs"], "add_tokens": "/ / TODO remove tar creation stuff from ant / / TODO stack trace remover does not work when it comes to threads", "del_tokens": ""}
{"commit_tokens": ["disable", "completion", "in", "NoPathCompletion"], "add_tokens": "protected void installPathCompletion ( FileChooserDescriptor fileChooserDescriptor , @ Nullable Disposable parent ) {", "del_tokens": "protected void installPathCompletion ( final FileChooserDescriptor fileChooserDescriptor ) {"}
{"commit_tokens": ["Tell", "the", "user", "about", "a", "failed", "delivery", "the", "first", "(", "any", ")", "time", "it", "fails"], "add_tokens": "public static int MAX_SEND_ATTEMPTS = 1 ;", "del_tokens": "public static int MAX_SEND_ATTEMPTS = 5 ;"}
{"commit_tokens": ["Add", "log", "when", "pool", "is", "shutdown", "."], "add_tokens": "LOGGER . info ( \" HikariCP pool \" + configuration . getPoolName ( ) + \" is being shutdown . \" ) ;", "del_tokens": ""}
{"commit_tokens": ["Input", "Whitespace", "(", "is", "used", "in", "many", "UTs", ")", "now", "compilable"], "add_tokens": "public void myMethod ( ) {", "del_tokens": "public myMethod ( ) {"}
{"commit_tokens": ["Added", "a", "TODO"], "add_tokens": "/ / TODO SF we need to provide hash code implementation so that there are no unexpected , slight perf issues", "del_tokens": ""}
{"commit_tokens": ["remove", "context", "from", "argument"], "add_tokens": "return new EmailIntentSender ( config ) ;", "del_tokens": "return new EmailIntentSender ( context , config ) ;"}
{"commit_tokens": ["Add", "account", "display", "name", "as", "display", "details", "for", "chat", "rooms", "."], "add_tokens": "setDisplayDetails ( pps . getAccountID ( ) . getDisplayName ( ) ) ;", "del_tokens": ""}
{"commit_tokens": ["scroll", "pane", "resets", "border", "on", "l", "&", "f"], "add_tokens": "setBorder ( IdeBorderFactory . createBorder ( ) ) ;", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "49070", "remove", "unthrown", "exception"], "add_tokens": "public void init ( FilterConfig filterConfig ) {", "del_tokens": "public void init ( FilterConfig filterConfig ) throws PortletException {"}
{"commit_tokens": ["fixed", "missing", "method"], "add_tokens": "@ Override public void restart ( ExecutionVertexID executionVertexID ) { }", "del_tokens": ""}
{"commit_tokens": ["fixed", "tag", "state", "identification", "problem"], "add_tokens": "return state = = 0 | | state = = __XmlLexer . TAG | | state = = __XmlLexer . END_TAG ;", "del_tokens": "return state = = 0 ;"}
{"commit_tokens": ["Call", "onResize", "(", ")", "from", "pinch", "to", "zoom", "to", "alert", "implementation", "that", "a", "resize", "has", "occurred"], "add_tokens": "mContext . onResize ( id , this , this , event ) ;", "del_tokens": ""}
{"commit_tokens": ["adding", "setting", "of", "grails", "context", "so", "fix", "reloading", "grails", "app", "twicebug"], "add_tokens": "getServletContext ( ) . setAttribute ( GRAILS_APPLICATION_CONTEXT , webContext ) ;", "del_tokens": ""}
{"commit_tokens": ["Provide", "source", "bitmap", "from", "RoundedDrawable"], "add_tokens": "public Bitmap getSourceBitmap ( ) { return mBitmap ; }", "del_tokens": ""}
{"commit_tokens": ["Fix", "typo"], "add_tokens": "* For example if you want exponentially increasing loss based on amount", "del_tokens": "* For example if you want exponentially increasing loss bases on amount"}
{"commit_tokens": ["Fix", "SSLCertificateSocketFactory", ".", "getDefaultCipherSuites", "."], "add_tokens": "return getDelegate ( ) . getDefaultCipherSuites ( ) ;", "del_tokens": "return getDelegate ( ) . getSupportedCipherSuites ( ) ;"}
{"commit_tokens": ["Fix", "JUnit", "error", "."], "add_tokens": "private static class ItemImpl extends Item {", "del_tokens": "public static class ItemImpl extends Item {"}
{"commit_tokens": ["Making", "sure", "that", "there", "is", "no", "notification", "when", "focus", "changes", "from", "something", "to", "nothing", "."], "add_tokens": "notifyFocusChanged ( ) ;", "del_tokens": "notifyFocusChanged ( ) ;"}
{"commit_tokens": ["Fix", "issue", "with", "DimensionManager", ".", "shouldLoadSpawn"], "add_tokens": "return spawnSettings . containsKey ( id ) & & spawnSettings . get ( id ) ;", "del_tokens": "return spawnSettings . contains ( id ) & & spawnSettings . get ( id ) ;"}
{"commit_tokens": ["Added", "toString", "(", ")", "method", "in", "NeoApp", ".", "NeoAppRelationshipType", ".", ".", ".", "otherwise"], "add_tokens": "@ Override public String toString ( ) { return name ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["Removed", "a", "System", ".", "out"], "add_tokens": "", "del_tokens": "System . out . println ( \" released some locks for \" + tx ) ;"}
{"commit_tokens": ["added", "clearing", "of", "named", "continue", "labels", "after", "the", "map", "is", "no", "longer", "needed"], "add_tokens": "namedLoopContinueLabel . clear ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Revert", "accidental", "class", "name", "change"], "add_tokens": "class RuntimeTestWalker {", "del_tokens": "class RuntimeTestWlalker {"}
{"commit_tokens": ["Remove", "unnecessary", "Javadoc"], "add_tokens": "", "del_tokens": "/ * * * Callback to write data from the buffer . * /"}
{"commit_tokens": ["Removed", "extraneous", "comments"], "add_tokens": "", "del_tokens": "/ / GetDocument / / BeforeChangeApplied / / AfterChangeApplied"}
{"commit_tokens": ["Fix", "the", "description", "of", "allow_empty", "arg", "on", "string_list", "."], "add_tokens": "doc = ALLOW_EMPTY_DOC", "del_tokens": "doc = NON_EMPTY_DOC"}
{"commit_tokens": ["Fix", "full", "inv", "item", "bounce", "client", "animation"], "add_tokens": "item . toCenter = true ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "flickering", "in", "the", "preview", "pane", "in", "refactoring", "preview"], "add_tokens": "fireDataChanged ( ) ;", "del_tokens": "fireTableDataChanged ( ) ;"}
{"commit_tokens": ["Restore", "accidentally", "removed", "call"], "add_tokens": "setBlocking ( false ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "a", "problem", "with", "JSPX", "code", "style", "settings", "preview", "(", "as", "discussed", "with", "D", ".", "Avdeev", ")"], "add_tokens": "return myProvider . getRightMargin ( LanguageCodeStyleSettingsProvider . SettingsType . INDENT_SETTINGS ) ;", "del_tokens": "return getSettings ( ) . RIGHT_MARGIN ;"}
{"commit_tokens": ["Remove", "unnecessary", "code", "."], "add_tokens": "", "del_tokens": "connections . remove ( socket ) ;"}
{"commit_tokens": ["removed", "unnecessary", "continue", "statement"], "add_tokens": "", "del_tokens": "continue ;"}
{"commit_tokens": ["Fix", "warnings"], "add_tokens": "", "del_tokens": "@ SuppressWarnings ( { \" rawtypes \" , \" unchecked \" } )"}
{"commit_tokens": ["Removed", "warning", "."], "add_tokens": "store_and_drop", "del_tokens": "store_and_drop ;"}
{"commit_tokens": ["Change", "ItemSelectionSupport", "to", "always", "consume", "long", "clicks"], "add_tokens": "return true ;", "del_tokens": "return false ;"}
{"commit_tokens": ["Remove", "hard", "coded", "test"], "add_tokens": "", "del_tokens": "if ( true ) return true ;"}
{"commit_tokens": ["WifiP2pWfdInfo", "set", "device", "type", "bugfix"], "add_tokens": "mDeviceInfo & = ~ DEVICE_TYPE ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "the", "index", "bug", "in", "PennTreeReader", ".", "java"], "add_tokens": "t . indexLeaves ( true ) ;", "del_tokens": ""}
{"commit_tokens": ["Add", "final", "modifier", "to", "ShortcutBadger", "class", "to", "avoid", "anybody", "to", "extend", "it"], "add_tokens": "public final class ShortcutBadger {", "del_tokens": "public class ShortcutBadger {"}
{"commit_tokens": ["Make", "LineageFileSystem", "final"], "add_tokens": "public final class LineageFileSystem extends BaseFileSystem {", "del_tokens": "public class LineageFileSystem extends BaseFileSystem {"}
{"commit_tokens": ["remove", "debug", "from", "reachtopology"], "add_tokens": "", "del_tokens": "conf . setDebug ( true ) ;"}
{"commit_tokens": ["Fix", "Clone", "override"], "add_tokens": "@ Override public Object clone ( ) throws CloneNotSupportedException {", "del_tokens": "public Object Clone ( ) throws CloneNotSupportedException {"}
{"commit_tokens": ["denis", "fixed", "it", ".", ".", ".", "fred", "wants", "1280"], "add_tokens": "public static final int LARGER_DIMENSION = 1280 ;", "del_tokens": "public static final int LARGER_DIMENSION = 1000 ;"}
{"commit_tokens": ["Add", "@", "Override", "annotation"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "49294", "Add", "comment", "back"], "add_tokens": "/ / LPS - 49294", "del_tokens": ""}
{"commit_tokens": ["Fixed", "issue", "445"], "add_tokens": "powerProvider = provider ;", "del_tokens": "provider = powerProvider ;"}
{"commit_tokens": ["compare", "stack", "frames", "by", "method", "that", "is", "invoked", "this", "way", "we", "more", "correctly", "remember", "variables", "expansion", "state"], "add_tokens": "return myDescriptor . getMethod ( ) ;", "del_tokens": "return getStackFrameProxy ( ) . hashCode ( ) ;"}
{"commit_tokens": ["Added", "missing", "method", "to", "geometry3d"], "add_tokens": "mHaveCreatedBuffers = created ; / /", "del_tokens": "mHaveCreatedBuffers = created ;"}
{"commit_tokens": ["Porting", "fix", "to", "allow", "for", "a", "forward", "/", "include", "to", "call", "getAttributeNames", "on", "the", "Request", "in", "a", "sandbox"], "add_tokens": "loader . loadClass ( basePackage + \" core . ApplicationHttpRequest $ AttributeNamesEnumerator \" )", "del_tokens": ""}
{"commit_tokens": ["Removed", "an", "unused", "stacktrace"], "add_tokens": "", "del_tokens": "new Exception ( \" Something is wrong \" ) . printStackTrace ( ) ;"}
{"commit_tokens": ["Removed", "unnecessary", "tag"], "add_tokens": "", "del_tokens": "private static final String TAG = \" GeoIntentActivity \" ;"}
{"commit_tokens": ["Someone", "doesn", "t", "like", "commas", "at", "the", "end", "of", "annotation", "lists"], "add_tokens": "InaccessibleBaseClassTest . class", "del_tokens": "InaccessibleBaseClassTest . class ,"}
{"commit_tokens": ["Fix", "possible", "double", "socket", "close"], "add_tokens": "closeList . remove ( socket ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "potentially", "misleading", "exception", "message"], "add_tokens": "throw new UnsupportedOperationException ( ) ;", "del_tokens": "throw new UnsupportedOperationException ( \" Read - Only \" ) ;"}
{"commit_tokens": ["Fixed", "NPE", "in", "SvnConfiguration", "-", "initialize", "inner", "state", "to", "default", "value"], "add_tokens": "private SvnConfigurationState myState = new SvnConfigurationState ( ) ;", "del_tokens": "private SvnConfigurationState myState ;"}
{"commit_tokens": ["Updated", "startup", "service", "so", "it", "compiles"], "add_tokens": "", "del_tokens": "MilkBackgroundService . scheduleService ( ) ;"}
{"commit_tokens": ["Back", "up", "/", "restore", "the", "Avoid", "poor", "connections", "wifi", "setting"], "add_tokens": "WIFI_WATCHDOG_POOR_NETWORK_TEST_ENABLED ,", "del_tokens": ""}
{"commit_tokens": ["Fix", "wifi", "data", "activity", "icons"], "add_tokens": "mWifiActivityIconId = 0 ;", "del_tokens": ""}
{"commit_tokens": ["fixed", "#", "1049"], "add_tokens": "if ( mirror ! = null & & ! check )", "del_tokens": "if ( ! check )"}
{"commit_tokens": ["fixed", "possible", "NPE"], "add_tokens": "return Item . Title ! = null ? Item . Title . toString ( ) : \" \" ;", "del_tokens": "return Item . Title . toString ( ) ;"}
{"commit_tokens": ["Do", "not", "update", "accessibilityTitle", "in"], "add_tokens": "", "del_tokens": "accessibilityTitle = mTitle ;"}
{"commit_tokens": ["fixed", "PY", "-", "7294", "Invalid", "warning", "about", "encodings", "in", "Python", "files"], "add_tokens": "checkString ( node , node . getText ( ) ) ;", "del_tokens": "checkString ( node , node . getStringValue ( ) ) ;"}
{"commit_tokens": ["Reenable", "a", "test"], "add_tokens": "", "del_tokens": "@ Ignore ( \" getting build back to green \" )"}
{"commit_tokens": ["remove", "spurious", "stdout", "N", "=", "rank", "="], "add_tokens": "", "del_tokens": "System . out . println ( \" N = \" + _n + \" , rank = \" + rank ) ;"}
{"commit_tokens": ["Copy", "the", "response", "buffer", "for", "the", "invocation", "object", "."], "add_tokens": "Unpooled . unmodifiableBuffer ( responseBody . copy ( ) ) ,", "del_tokens": "responseBody ,"}
{"commit_tokens": ["Put", "TextIcon", ".", "java", "in", "correct", "package", "."], "add_tokens": "package jackpal . androidterm . shortcuts ;", "del_tokens": "package app . fpw . log ;"}
{"commit_tokens": ["specify", "name", "explicitly", "to", "avoid", "mangling", "issue"], "add_tokens": "@ OptionTag ( \" myLocal \" )", "del_tokens": "@ OptionTag"}
{"commit_tokens": ["Call", "application", ".", "onCreate", "(", ")", "from", "createApplication", "(", ")"], "add_tokens": "Robolectric . application . onCreate ( ) ;", "del_tokens": ""}
{"commit_tokens": ["remove", "jalopy", "import", "line"], "add_tokens": "/ / import de . hunsicker . jalopy . * ;", "del_tokens": "import de . hunsicker . jalopy . * ;"}
{"commit_tokens": ["Removed", "unused", "variable", "."], "add_tokens": "", "del_tokens": "private static final int ACTIVITY_LOCK_SCREEN = 2 ;"}
{"commit_tokens": ["Add", "getChildCount", "(", ")", "to", "PShape", "reference"], "add_tokens": "/ * * * @ webref * @ brief Returns the number of children * /", "del_tokens": ""}
{"commit_tokens": ["fix", "(", "driver", ")", "make", "Find", ".", "Hint", "a", "static", "class"], "add_tokens": "public static class Hint < T > {", "del_tokens": "public class Hint < T > {"}
{"commit_tokens": ["Fix", "local", "video", "display", "when", "we", "are", "the", "second", "to", "activate", "video", "in", "a", "XMPP", "call", "."], "add_tokens": "getMediaHandler ( ) . start ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Set", "getDiffableValue", "(", ")", "as", "synchronized", "in", "the", "Note", "model", "."], "add_tokens": "synchronized public JSONObject getDiffableValue ( ) {", "del_tokens": "public JSONObject getDiffableValue ( ) {"}
{"commit_tokens": ["TFJ", "-", "231", "reverting", "TwitterStream", "#", "setStatusListener", "(", ")"], "add_tokens": "public void setStatusListener ( StatusListener statusListener ) { this . statusListener = statusListener ;", "del_tokens": "public StatusListener getStatusListener ( ) { return statusListener ;"}
{"commit_tokens": ["reset", "max", "on", "overflow"], "add_tokens": "maxDuration = 0 ;", "del_tokens": ""}
{"commit_tokens": ["missed", "one"], "add_tokens": "poolEntry . setNetworkTimeout ( networkTimeout ) ;", "del_tokens": ""}
{"commit_tokens": ["Don", "t", "break", "compatibility", "(", "PY", "-", "11499", ")", "."], "add_tokens": "", "del_tokens": "@ Tag ( \" path - mapping - settings \" )"}
{"commit_tokens": ["Remove", "useless", "static", "keyword", "."], "add_tokens": "private enum StoreType {", "del_tokens": "private static enum StoreType {"}
{"commit_tokens": ["Reset", "joda", "-", "time", "to", "use", "system", "clock", "after", "test", "."], "add_tokens": "DateTimeUtils . setCurrentMillisSystem ( ) ;", "del_tokens": ""}
{"commit_tokens": ["shift", "-", "Enter", "-", ">", "trimToSize", "rudminentary", "focused", "remaining", "editor", "fixed"], "add_tokens": "setSelectedEditor ( selectedComposite , false ) ;", "del_tokens": "setSelectedEditor ( selectedComposite , true ) ;"}
{"commit_tokens": ["LPS", "-", "65693", "Fix", "DXP", "s", "static", "bundle", "symbolic", "name"], "add_tokens": "_STATIC_LPKG_BUNDLE_SYMBOLIC_NAME = \" Liferay Static \" ;", "del_tokens": "_STATIC_LPKG_BUNDLE_SYMBOLIC_NAME = \" Liferay DXP Static \" ;"}
{"commit_tokens": ["fixing", "memory", "leak"], "add_tokens": "myCurrentDragContext = null ;", "del_tokens": ""}
{"commit_tokens": ["Added", "methods", "on", "broker", "to", "integrate", "Zookeeper", "based", "broker", "."], "add_tokens": "void setLastCommittedTxId ( long txId ) ; boolean thisIsMaster ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Updated", "todo"], "add_tokens": "", "del_tokens": "* - push notifications * - reset stream"}
{"commit_tokens": ["Fixed", "isDrawing", "."], "add_tokens": "return drawing ;", "del_tokens": "return false ;"}
{"commit_tokens": ["fix", "#", "764", "."], "add_tokens": "", "del_tokens": "this . attr . setUserData ( CACHED_NODE , this , null ) ;"}
{"commit_tokens": ["Include", "message", "history", "in", "stacktraces", "from", "error", "handler", "making", "it", "easier", "to", "know", "where", "the", "problem", "was", "."], "add_tokens": "@ XmlAttribute", "del_tokens": ""}
{"commit_tokens": ["undo", "part", "of", "the", "closure", "scopeing", "fix"], "add_tokens": "", "del_tokens": "pushState ( false ) ; popState ( ) ;"}
{"commit_tokens": ["Fix", "monochromacy", "simulation"], "add_tokens": "hasColorTransform = true ;", "del_tokens": ""}
{"commit_tokens": ["Do", "not", "destroy", "the", "Broadcaster"], "add_tokens": "", "del_tokens": "super . destroy ( ) ;"}
{"commit_tokens": ["incrementing", "the", "success", "count", "as", "well", "in", "the", "realtime", "segment", "impl"], "add_tokens": "numSuccessIndexed + + ;", "del_tokens": ""}
{"commit_tokens": ["Setting", "z", "=", "0", "in", "vertex", "(", "x", "y", ")"], "add_tokens": "vertex [ Z ] = 0 ;", "del_tokens": ""}
{"commit_tokens": ["Make", "ViewHolder", "less", "visible", "and", "static", "."], "add_tokens": "static class ViewHolder {", "del_tokens": "public final class ViewHolder {"}
{"commit_tokens": ["Rogue", "line", "number", "for", "method", "declarations", "confuses", "IDE", "debuggers"], "add_tokens": "", "del_tokens": "onLineNumber ( block , \" visitBlockStatement \" ) ;"}
{"commit_tokens": ["LPS", "-", "46312", "Suppress", "warning"], "add_tokens": "@ SuppressWarnings ( \" unused \" )", "del_tokens": ""}
{"commit_tokens": ["Add", "Enterprise", "to", "the", "list", "of", "possible", "user", "plans", "."], "add_tokens": "PLATINUM , ENTERPRISE ;", "del_tokens": "PLATINUM ;"}
{"commit_tokens": ["Websockets", "now", "need", "this", "method", "."], "add_tokens": "/ / Used by websockets return null ;", "del_tokens": "throw new RuntimeException ( \" Not implemented \" ) ;"}
{"commit_tokens": ["LPS", "-", "48694", "add", "subject", "to", "context", "name"], "add_tokens": "public static class WhenPortalSendsPasswordEmail {", "del_tokens": "public static class WhenSendsPasswordEmail {"}
{"commit_tokens": ["Add", "default", "value", "submitted", "by", "Bill", "Barker", "."], "add_tokens": "public String mappedName ( ) default \" \" ;", "del_tokens": "public String mappedName ( ) ;"}
{"commit_tokens": ["Don", "t", "remove", "all", "queued", "items", "if", "token", "=", "=", "null"], "add_tokens": "if ( token ! = null ) { backgroundHandler . removeCallbacksAndMessages ( token ) ; }", "del_tokens": "backgroundHandler . removeCallbacksAndMessages ( token ) ;"}
{"commit_tokens": ["The", "JSSE", "support", "class", "contains", "only", "generic", "code", "that", "uses", "a", "standard", "SSL", "session", "so", "it", "is", "normally", "possible", "to", "reuse", "it", "."], "add_tokens": "public JSSESupport ( SSLSession session ) {", "del_tokens": "JSSESupport ( SSLSession session ) {"}
{"commit_tokens": ["Align", "Mockito", ".", "after", "with", "Mockito", ".", "timeout", "to", "take", "a", "long", "instead", "of", "int"], "add_tokens": "public static VerificationAfterDelay after ( long millis ) {", "del_tokens": "public static VerificationAfterDelay after ( int millis ) {"}
{"commit_tokens": ["Align", "two", "copies", "of", "Clock2", ".", "java"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Deny", "once", "on", "dialog", "timeout"], "add_tokens": "result . restricted = true ;", "del_tokens": ""}
{"commit_tokens": ["add", "help", "topic", "(", "IDEADEV", "-", "24855", ")"], "add_tokens": "return \" reference . versionControl . cvs . options \" ;", "del_tokens": "return null ;"}
{"commit_tokens": ["Implemented", "new", "constructor", "in", "EmbeddedNeo", "."], "add_tokens": "this . shellServer = null ; NeoJvmInstance . start ( null , storeDir , true ) ;", "del_tokens": "/ / TODO : implement"}
{"commit_tokens": ["LPS", "-", "57001", "changed", "access", "modifier", "of", "the", "method", "to", "public", "."], "add_tokens": "@ Override public void deleteFileEntryMetadata (", "del_tokens": "protected void deleteFileEntryMetadata ("}
{"commit_tokens": ["ApplicationStarterBase", "can", "process", "external", "command", "line"], "add_tokens": "@ Override public boolean canProcessExternalCommandLine ( ) { return true ; }", "del_tokens": ""}
{"commit_tokens": ["Fixed", "NPE", "and", "problem", "in", "which", "custom", "AuthenticationMechanisms", "aren", "t", "used"], "add_tokens": "return authenticationMechanism ;", "del_tokens": "return null ;"}
{"commit_tokens": ["BIO", "doesn", "t", "use", "comet", "but", "align", "code", "with", "NIO", "/", "APR", "."], "add_tokens": "comet = false ;", "del_tokens": ""}
{"commit_tokens": ["Capitalize", "configurable", "name"], "add_tokens": "super ( project , \" Project Settings \" , null ) ;", "del_tokens": "super ( project , \" Project settings \" , null ) ;"}
{"commit_tokens": ["enable", "show", "in", "new", "tab"], "add_tokens": "myIsShowInNewTabEnabled = ! mustOpenInNewTab ;", "del_tokens": "myIsShowInNewTabEnabled = mustOpenInNewTab ;"}
{"commit_tokens": ["makes", "params", "final"], "add_tokens": "public JSONException ( final String message , final Throwable cause ) {", "del_tokens": "public JSONException ( String message , Throwable cause ) {"}
{"commit_tokens": ["Tweaked", "order", "so", "that", "forced", "browse", "attacks", "come", "lower", "in", "the", "right", "menu", "list"], "add_tokens": "this . setOrder ( 31 ) ;", "del_tokens": "this . setOrder ( 37 ) ;"}
{"commit_tokens": ["TextField", "s", "cursor", "doesn", "t", "blink", "in", "GWT", "backend"], "add_tokens": "return true ;", "del_tokens": "return false ;"}
{"commit_tokens": ["Added", "private", "constructor", "."], "add_tokens": "private StringUtils ( ) { / / Not instantiable . }", "del_tokens": ""}
{"commit_tokens": ["Skip", "visitEnd", "in", "InliningInstructionAdapter"], "add_tokens": "@ Override public void visitEnd ( ) { }", "del_tokens": ""}
{"commit_tokens": ["Increase", "the", "delay", "a", "little", "bit", "when", "opening", "a", "new", "activity", "from", "the", "MenuDrawer", "."], "add_tokens": "} , 400 ) ;", "del_tokens": "} , 350 ) ;"}
{"commit_tokens": ["Always", "unfreeze", "display", "."], "add_tokens": "Surface . unfreezeDisplay ( 0 ) ;", "del_tokens": "Surface . unfreezeDisplay ( 0 ) ;"}
{"commit_tokens": ["IDEA", "-", "107291", "Unshelve", "into", "a", "new", "changelist", "puts", "new", "files", "into", "active", "changelist", "for", "HG"], "add_tokens": "public boolean fileListenerIsSynchronous ( ) { return false ; } @ Override", "del_tokens": ""}
{"commit_tokens": ["only", "allow", "dpad", "center", "for", "key", "long", "press"], "add_tokens": "if ( keyCode = = KeyEvent . KEYCODE_DPAD_CENTER ) {", "del_tokens": "if ( isEnterActionKey ( keyCode ) ) {"}
{"commit_tokens": ["add", "method", "to", "pop", "pending", "cursor", "sync", "state", "from", "shared", "project", "state"], "add_tokens": "public ProjectUser popCursorSync ( String path ) { return null ; }", "del_tokens": ""}
{"commit_tokens": ["Added", "a", "help", "option", "for", "the", "tests", "."], "add_tokens": "failureDetectorConfig . getThresholdInterval ( ) ) parser . accepts ( \" help \" , \" This help \" ) ;", "del_tokens": ""}
{"commit_tokens": ["Add", "SMS", "permissions", "for", "Carrier", "app", "."], "add_tokens": "grantRuntimePermissionsLPw ( carrierPackage , SMS_PERMISSIONS , userId ) ;", "del_tokens": ""}
{"commit_tokens": ["Add", "the", "beta", "annotation", "to", "setFastInsertEnabled", "(", ")"], "add_tokens": "@ Beta", "del_tokens": ""}
{"commit_tokens": ["Should", "prevent", "OOM"], "add_tokens": "return 10000 ;", "del_tokens": "return 50000 ;"}
{"commit_tokens": ["removed", "unused", "import", "."], "add_tokens": "", "del_tokens": "import java . util . Arrays ;"}
{"commit_tokens": ["JsonProvider", ".", "creteArray", "now", "returns", "Object", "."], "add_tokens": "Object createArray ( ) ;", "del_tokens": "Iterable createArray ( ) ;"}
{"commit_tokens": ["Remove", "temporary", "test"], "add_tokens": "", "del_tokens": "public void testPrintTest ( ) { doTest ( ) ; }"}
{"commit_tokens": ["add", "directoryMappingChanged", "(", ")", "callback"], "add_tokens": "else { vcs . directoryMappingChanged ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["Log", "a", "warning", "when", "a", "navigation", "is", "blocked", "by", "the", "whitelist"], "add_tokens": "LOG . w ( TAG , \" Blocked navigation because URL was not whitelisted : \" + url ) ;", "del_tokens": ""}
{"commit_tokens": ["Add", "newline", "between", "error", "code", "groups"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["removedunused", "import"], "add_tokens": "", "del_tokens": "import org . mongodb . MongoClient ;"}
{"commit_tokens": ["Add", "the", "hide", "for", "the", "inner", "class", "definition", "."], "add_tokens": "/ * * { @ hide } * /", "del_tokens": ""}
{"commit_tokens": ["Fix", "early", "session", "termination", "in", "FalsingManager"], "add_tokens": "", "del_tokens": "sessionExitpoint ( true / * force * / ) ;"}
{"commit_tokens": ["removed", "indecency"], "add_tokens": "public class Singleton {", "del_tokens": "pubic class Singleton {"}
{"commit_tokens": ["Changed", "suppress", "warnings", "message", "to", "suppress", "Guice", "annotation", "processor", "error", "that", "is", "caused", "by", "multiple", "constructors", "annotated", "with", "@", "Inject", "to", "make", "it", "more", "clear", "/", "specific", "."], "add_tokens": "@ SuppressWarnings ( \" InjectMultipleAtInjectConstructors \" )", "del_tokens": "@ SuppressWarnings ( \" inject - constructors \" )"}
{"commit_tokens": ["make", "constructor", "call", "explicit"], "add_tokens": "super ( ) ;", "del_tokens": ""}
{"commit_tokens": ["updated", "setImage", "method", "in", "BootstrapThumbnail", "to", "use", "invalidate", "and", "requestLayout", "methods", "as", "recommended", "in", "Android", "docs"], "add_tokens": "invalidate ( ) ; requestLayout ( ) ;", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "25605", "Remove", "extra", "block"], "add_tokens": "continue ;", "del_tokens": "continue ; }"}
{"commit_tokens": ["Fix", "build", "after", "revert"], "add_tokens": "return getBoolean ( ASYNC_CLIENT + \" acceptAnyCertificate \" , false ) ;", "del_tokens": "return getBooleanValue ( ASYNC_CLIENT + \" acceptAnyCertificate \" , false ) ;"}
{"commit_tokens": ["Fix", "unread", "count", "in", "notifications", "(", "again", ")"], "add_tokens": "super . setNumber ( number ) ;", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "52591", "Do", "not", "set", "portletToolbar", "to", "null"], "add_tokens": "", "del_tokens": "_portletToolbar = null ;"}
{"commit_tokens": ["Fix", "input", "device", "listener", "registration", "in", "InputManager"], "add_tokens": "populateInputDevicesLocked ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "old", "subject", "from", "action", "bar", "when", "loading", "new", "message"], "add_tokens": "displayMessageSubject ( null ) ;", "del_tokens": ""}
{"commit_tokens": ["remove", "duplicated", "line"], "add_tokens": "", "del_tokens": "private final Handler mHandler ;"}
{"commit_tokens": ["gave", "Keywords", "non", "-", "identity", "hashCodes"], "add_tokens": "public int hashCode ( ) { return sym . hashCode ( ) + 0x9e3779b9 ; }", "del_tokens": ""}
{"commit_tokens": ["Fix", "stringification", "of", "rpc", "address", "in", "gossip", "."], "add_tokens": "return new VersionedValue ( endpoint . getHostAddress ( ) ) ;", "del_tokens": "return new VersionedValue ( endpoint . toString ( ) ) ;"}
{"commit_tokens": ["Remove", "extra", "newline"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["added", "TODO"], "add_tokens": "/ / TODO merge with wantedInvocationCount , use enum to preserve atLeast mode", "del_tokens": ""}
{"commit_tokens": ["improve", "gallery"], "add_tokens": "", "del_tokens": ";"}
{"commit_tokens": ["Add", "a", "method", "to", "destroy", "the", "RS", "object", "."], "add_tokens": "public void destroyRenderScript ( ) { mRS . destroy ( ) ; mRS = null ; }", "del_tokens": ""}
{"commit_tokens": ["enable", "GL", "rendering", "of", "launch", "background"], "add_tokens": "static final boolean USE_OPENGL = true ;", "del_tokens": "static final boolean USE_OPENGL = false ;"}
{"commit_tokens": ["Fix", "the", "-", "1", "unread", "count", "bug", "."], "add_tokens": "return unreadConversations < 0 ? 0 : unreadConversations ;", "del_tokens": "return unreadConversations ;"}
{"commit_tokens": ["modified", "example"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Set", "the", "block", "name", "for", "lasers"], "add_tokens": "laserBlock . setBlockName ( \" laserBlock \" ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "warning", "suppression"], "add_tokens": "", "del_tokens": "@ SuppressWarnings ( \" unchecked \" )"}
{"commit_tokens": ["Fixing", "opcode", "reset", "during", "PAYLOAD"], "add_tokens": "opcode = - 1 ;", "del_tokens": "opcode = OPCODE_CONT ;"}
{"commit_tokens": ["add", "missing", "Override", "annotation"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["Fix", "copy", "&", "paste", "error", "in", "isKeyguardLocked", "(", ")"], "add_tokens": "return mWM . isKeyguardLocked ( ) ;", "del_tokens": "return mWM . isKeyguardSecure ( ) ;"}
{"commit_tokens": ["Add", "null", "check", "in", "header", "view", "to", "prevent", "NPE", "."], "add_tokens": "if ( mAdditionalHeadersView ! = null & & mAdditionalHeadersView . getVisibility ( ) = = View . VISIBLE )", "del_tokens": "if ( mAdditionalHeadersView . getVisibility ( ) = = View . VISIBLE )"}
{"commit_tokens": ["fix", "duplicate", "group", "adjacent", "buttons", "quickfix"], "add_tokens": "break ;", "del_tokens": ""}
{"commit_tokens": ["removed", "debug", "message", "that", "claims", "to", "be", "a", "error", "message"], "add_tokens": "", "del_tokens": "System . err . println ( \" Smack PingManger : Found existing serverPingTask \" ) ;"}
{"commit_tokens": ["Missing", "acceptAnyCertificate", "propagation"], "add_tokens": "acceptAnyCertificate = prototype . isAcceptAnyCertificate ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Prevents", "unnecessary", "exception", "from", "GA", "failure", "."], "add_tokens": "if ( GA ! = null ) startGAStartupReport ( ) ;", "del_tokens": "startGAStartupReport ( ) ;"}
{"commit_tokens": ["Fix", "typo", "."], "add_tokens": "", "del_tokens": ";"}
{"commit_tokens": ["With", "the", "new", "features", "some", "of", "the", "delombok", "based", "unit", "tests", "no", "longer", "work", "."], "add_tokens": "@ java . lang . SuppressWarnings ( \" all \" ) return this . foo ;", "del_tokens": "return foo ;"}
{"commit_tokens": ["Restore", "text", "color", "handling"], "add_tokens": "else { holder . subject . setTextColor ( 0xff000000 ) ; }", "del_tokens": ""}
{"commit_tokens": ["Properly", "stop", "the", "file", "worker", "session", "cleaner", "thread"], "add_tokens": "mSessionCleaner . stop ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "lint", "warning"], "add_tokens": "@ SuppressLint ( \" FieldGetter \" )", "del_tokens": ""}
{"commit_tokens": ["initialize", "module", "for", "every", "created", "Python", "run", "configuration"], "add_tokens": "module . init ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Response", ".", "setStatus", "now", "accepts", "arbitrary", "IStatus", "-", "derived", "instances"], "add_tokens": "public void setStatus ( IStatus status ) {", "del_tokens": "public void setStatus ( Status status ) {"}
{"commit_tokens": ["Remove", "unnecessary", "code"], "add_tokens": "", "del_tokens": "case MotionEvent . ACTION_CANCEL : throw new RuntimeException ( ) ;"}
{"commit_tokens": ["calculate", "hash", "on", "adding", "book"], "add_tokens": "getHash ( book ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "format"], "add_tokens": "}", "del_tokens": "}"}
{"commit_tokens": ["Fix", "null", "in", "help", "output"], "add_tokens": "return \" command \" ;", "del_tokens": "return null ;"}
{"commit_tokens": ["Remove", "useless", "variable", "(", "#", "1342", ")"], "add_tokens": "", "del_tokens": "String fMessage = null ;"}
{"commit_tokens": ["Comment", "an", "attribute"], "add_tokens": "/ * if we ' re doing a search , this contains the query string * /", "del_tokens": ""}
{"commit_tokens": ["Removed", "white", "spaces"], "add_tokens": "public void run ( ) {", "del_tokens": "public void run ( ) {"}
{"commit_tokens": ["Don", "t", "fetch", "all", "indexer", "errors", "to", "get", "total", "count"], "add_tokens": "clusterService . getIndexerFailures ( 1 , 0 ) . total ,", "del_tokens": "clusterService . getIndexerFailures ( 0 , 0 ) . total ,"}
{"commit_tokens": ["Remove", "an", "extra", "new", "line"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Fix", "failing", "tests", "keeping", "old", "behaviour", "."], "add_tokens": "setValue ( source . getDecorated ( ) ) ;", "del_tokens": "setValue ( source ) ;"}
{"commit_tokens": ["Added", "TODO", "-", "mid", "term", "goal", "is", "to", "implement", "nice", "functional", "/", "immutable"], "add_tokens": "* TODO : mid term goal is to design a immutable collection library with mature , math . operations", "del_tokens": ""}
{"commit_tokens": ["update", "BitmapUtils"], "add_tokens": "mPause = true ;", "del_tokens": ""}
{"commit_tokens": ["Adds", "missing", "toString", "method", "to", "Capability", "enum", "which", "was", "causing", "a", "crash"], "add_tokens": "@ Override public String toString ( ) { return label ; }", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "38361", "Display", "the", "exception", "when", "it", "is", "not", "a", "controlled", "exception", "so", "that", "users", "can", "still", "make", "a", "guess", "of", "what", "is", "going", "on"], "add_tokens": "errorMessage = e . getLocalizedMessage ( ) ;", "del_tokens": ""}
{"commit_tokens": ["update", "imports"], "add_tokens": "", "del_tokens": "import buildcraft . api . blueprints . BlueprintManager ; import buildcraft . api . blueprints . BptBlock ;"}
{"commit_tokens": ["Removing", "an", "empty", "line"], "add_tokens": "base . getPath ( ) \" / encoder \" ) ;", "del_tokens": ""}
{"commit_tokens": ["Using", "proper", "key", "for", "removing", "from", "map", "."], "add_tokens": "mActivities . remove ( id ) ;", "del_tokens": "mActivities . remove ( r ) ;"}
{"commit_tokens": ["return", "actual", "value", "of", "isLocal", "(", ")", "in", "command", "line", "args"], "add_tokens": "return local ;", "del_tokens": "return true ;"}
{"commit_tokens": ["initialize", "default", "project", "profile", "for", "template", "project"], "add_tokens": "getProjectProfileImpl ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Removed", "unused", "import"], "add_tokens": "", "del_tokens": "import com . hazelcast . impl . FactoryImpl ;"}
{"commit_tokens": ["Reverting", "an", "accidental", "(", "blank", ")", "line", "deletion"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Rearranged", "the", "classes", "in", "the", "SegmentTree"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Fix", "fillLiquidContainer", "-", "return", "null", "not", "the", "empty", "container", "for"], "add_tokens": "return null ;", "del_tokens": "return emptyContainer ;"}
{"commit_tokens": ["LPS", "-", "54984", "Fix", "warning"], "add_tokens": "* @ throws PortalException", "del_tokens": ""}
{"commit_tokens": ["renamed", "getter", "for", "objectMapper"], "add_tokens": "public static ObjectMapper getObjectMapper ( ) {", "del_tokens": "public static ObjectMapper getM ( ) {"}
{"commit_tokens": ["WEB", "-", "9926", "remove", "0xhh", "postfix"], "add_tokens": "", "del_tokens": "OBJECT ,"}
{"commit_tokens": ["Remove", "debug", "logging", "in", "divider", "draw"], "add_tokens": "", "del_tokens": "Log . d ( \" mobeta \" , \" drawing divider \" ) ;"}
{"commit_tokens": ["Fixed", "the", "bug", "for", "real", "."], "add_tokens": "inShutdown = true ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "sync", "tests", "failure", "."], "add_tokens": "return syncs ;", "del_tokens": "return new ArrayList < SyncInfo > ( syncs ) ;"}
{"commit_tokens": ["Removed", "spurious", "import", "of", "a", "com", ".", "sun", "class"], "add_tokens": "", "del_tokens": "import com . sun . tools . javac . resources . version ;"}
{"commit_tokens": ["Use", "hidden", "API", "to", "validate", "APK", "chains"], "add_tokens": "JarFile jarFile = new JarFile ( mArchiveSourcePath , true , true ) ;", "del_tokens": "JarFile jarFile = new JarFile ( mArchiveSourcePath ) ;"}
{"commit_tokens": ["remove", "redundant", "initialization", "."], "add_tokens": "", "del_tokens": "_xStream = new XStream ( ) ;"}
{"commit_tokens": ["Ensure", "only", "a", "single", "scroller", "animation", "callback", "per", "frame", "."], "add_tokens": "removeCallbacks ( this ) ;", "del_tokens": ""}
{"commit_tokens": ["Removed", "unnecessary", "return", "type", "for", "method", "."], "add_tokens": "protected abstract void switchViewForContext ( Context context ) ;", "del_tokens": "protected abstract Component switchViewForContext ( Context context ) ;"}
{"commit_tokens": ["fix", "a", "missing", "switch", "-", "case", "break", "."], "add_tokens": "break ;", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "51912", "remove", "redundant", "continue", "keyword"], "add_tokens": "", "del_tokens": "continue ;"}
{"commit_tokens": ["implement", "missing", "method", "getGlobalPosition"], "add_tokens": "@ Override public int getGlobalPosition ( int position ) { return - 1 ; }", "del_tokens": ""}
{"commit_tokens": ["should", "not", "allow", "setting", "of", "the", "world"], "add_tokens": "", "del_tokens": "public void setWorld ( World world ) { this . world = world ; }"}
{"commit_tokens": ["Make", "BlockSuppressalStatus", "constructor", "public", "so", "that", "it", "can", "be", "constructed", "by", "the", "provider", "."], "add_tokens": "public BlockSuppressalStatus ( boolean isSuppressed , long untilTimestampMillis ) {", "del_tokens": "BlockSuppressalStatus ( boolean isSuppressed , long untilTimestampMillis ) {"}
{"commit_tokens": ["Fix", "the", "build"], "add_tokens": "/ * *", "del_tokens": "/ *"}
{"commit_tokens": ["fixed", "#", "1110"], "add_tokens": "public static Class < ? > loadClassQuite ( String className ) {", "del_tokens": "public static Class < ? > loadClassQuite ( String className ) throws ClassNotFoundException {"}
{"commit_tokens": ["Added", "a", "TODO", "about", "merging", "Python", "scope", "-", "related", "code"], "add_tokens": "* * TODO : Merge it with { @ link ScopeUtil }", "del_tokens": ""}
{"commit_tokens": ["Expose", "the", "classloader", "which", "the", "shell", "is", "using"], "add_tokens": "public GroovyClassLoader getClassLoader ( ) { return loader ; }", "del_tokens": ""}
{"commit_tokens": ["Removed", "unnecessary", "warning", "logs", "related", "with", "ClientBootstrap"], "add_tokens": "", "del_tokens": "pipeline . remove ( pipeline . get ( \" connector \" ) ) ;"}
{"commit_tokens": ["remove", "useless", "annotation"], "add_tokens": "private EditorTextField myPatternEditor ;", "del_tokens": "@ Nullable private EditorTextField myPatternEditor ;"}
{"commit_tokens": ["Fix", "setImage"], "add_tokens": "image . setVisibility ( View . VISIBLE ) ;", "del_tokens": ""}
{"commit_tokens": ["reset", "FocusWatcher", ".", "myTopComponent", "to", "null"], "add_tokens": "myTopComponent = null ;", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "33820", "PACL", "-", "update", "the", "FileChecker", "with", "modern", "logic", "-", "include", "the", "actual", "root", "dir"], "add_tokens": "paths . add ( _rootDir ) ;", "del_tokens": ""}
{"commit_tokens": ["Don", "t", "leak", "scanners", "when", "fetching", "suggestions", "from", "HBase", "."], "add_tokens": "} finally { scanner . close ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "issue", "with", "sending", "async", "continue", "responses"], "add_tokens": "exchange . dispatch ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "shadowing", "of", "GridView", "."], "add_tokens": "public class ShadowGridView extends ShadowAbsListView {", "del_tokens": "public class ShadowGridView extends ShadowAdapterView {"}
{"commit_tokens": ["Don", "t", "swallow", "fatal", "errors", "in", "OperatorZipIterable"], "add_tokens": "Exceptions . throwIfFatal ( e ) ;", "del_tokens": ""}
{"commit_tokens": ["pass", "the", "long", "clickable", "setting", "to", "the", "underlying", "control"], "add_tokens": "@ Override public void setLongClickable ( boolean longClickable ) { getRefreshableView ( ) . setLongClickable ( longClickable ) ; }", "del_tokens": ""}
{"commit_tokens": ["the", "new", "snack", "bar", "hide", "too", "quick", "if", "clear", "previous", "snacks", "."], "add_tokens": "removeCallbacks ( mHideRunnable ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "Eclipse", "Javadoc", "warning"], "add_tokens": "", "del_tokens": "* @ throws ClassNotFoundException"}
{"commit_tokens": ["Add", "gossip", "padding", "for", "1", ".", "1"], "add_tokens": "X_11_PADDING , / / padding specifically for 1 . 1", "del_tokens": ""}
{"commit_tokens": ["remove", "LogFactory", "printStackTrace"], "add_tokens": "/ / skip", "del_tokens": "t . printStackTrace ( ) ;"}
{"commit_tokens": ["removed", "long", "col"], "add_tokens": "", "del_tokens": "long longCol ;"}
{"commit_tokens": ["Fix", "extra", "text", "appearing", "after", "ellipsis"], "add_tokens": "return ;", "del_tokens": "break ;"}
{"commit_tokens": ["Only", "clear", "the", "caret", "when", "in", "caret", "selection", "mode", "."], "add_tokens": "if ( mIsCaretSelection ) { selectionDone ( ) ; }", "del_tokens": "selectionDone ( ) ;"}
{"commit_tokens": ["Removed", "original", "request", "from", "the", "JSON", "representation", "of", "ResponseDefinition"], "add_tokens": "@ JsonIgnore", "del_tokens": ""}
{"commit_tokens": ["Make", "the", "button", "always", "enabled"], "add_tokens": "", "del_tokens": "setEnabled ( mRouter . isRouteAvailable ( mSelector , MediaRouter . AVAILABILITY_FLAG_IGNORE_DEFAULT_ROUTE ) ) ;"}
{"commit_tokens": ["Log", "replaced", "methods"], "add_tokens": "Util . log ( null , Log . WARN , \" Checking \" + restriction + \" instead of \" + hook ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "crash", "in", "movie", "studio", "."], "add_tokens": "mHaveFrame = getWidth ( ) > 0 & & getHeight ( ) > 0 ;", "del_tokens": "mHaveFrame = true ;"}
{"commit_tokens": ["Loading", "application", "settings", "on", "tour", "deselect"], "add_tokens": "if ( selectedName = = null ) { app . getSettings ( ) . setSettingsAPI ( originalSettings . getSettingsAPI ( ) ) ; }", "del_tokens": ""}
{"commit_tokens": ["Fix", "bug", "45195", "."], "add_tokens": "if ( name = = null ) return null ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "unused", "import", "."], "add_tokens": "", "del_tokens": "import java . lang . reflect . Array ; import java . util . Arrays ;"}
{"commit_tokens": ["fixed", "break"], "add_tokens": "dq . close ( ) ;", "del_tokens": "/ / dq . close ( ) ;"}
{"commit_tokens": ["Fix", "spelling", "mistake"], "add_tokens": "if ( value = = toMatch ) / / Specifically uses identity", "del_tokens": "if ( value = = toMatch ) / / Specificly uses identity"}
{"commit_tokens": ["Stop", "previous", "ringtone", "when", "silent", "is", "selected", "."], "add_tokens": "mRingtoneManager . stopPreviousRingtone ( ) ;", "del_tokens": ""}
{"commit_tokens": ["IDEA", "-", "133873", "refresh", "changed", "files", "after", "commit", "because", "they", "can", "be", "modified", "by", "hooks"], "add_tokens": "return true ;", "del_tokens": "return false ;"}
{"commit_tokens": ["we", "can", "t", "pass", "null", "because", "it", "will", "throw", "an", "exception", "."], "add_tokens": "super ( \" localhost \" ) ;", "del_tokens": "super ( ( String ) null ) ;"}
{"commit_tokens": ["turn", "off", "attempted", "fixes"], "add_tokens": "/ / requestFBOLayer ( ) ;", "del_tokens": "requestFBOLayer ( ) ;"}
{"commit_tokens": ["LPS", "-", "56621", "I", "assume", "order", "matters", "?"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Fix", "an", "unintentional", "change", "in", "method", "signature", "and", "avoid", "an", "API", "change", "."], "add_tokens": "protected void onDetachedFromWindow ( ) {", "del_tokens": "public void onDetachedFromWindow ( ) {"}
{"commit_tokens": ["Fixed", "typo", "of", "migration", "example", "code", "."], "add_tokens": "String firstName ;", "del_tokens": "String fullName ;"}
{"commit_tokens": ["Remove", "findbugs", "warning", "(", "added", "serailVersionUID", "to", "IgnoredNames"], "add_tokens": "static final long serialVersionUID = 1L ;", "del_tokens": ""}
{"commit_tokens": ["removed", "empty", "string"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Move", "the", "wcursor", "increment", "after", "the", "assert"], "add_tokens": "wcursor . incrementAndGet ( ) ;", "del_tokens": "wcursor . incrementAndGet ( ) ;"}
{"commit_tokens": ["Fix", "checkstyle", "issue"], "add_tokens": "}", "del_tokens": "}"}
{"commit_tokens": ["fix", "the", "overlay", "effect", "problem", "on", "Android", "-", "L"], "add_tokens": "getWindow ( ) . getDecorView ( ) . getBackground ( ) . setAlpha ( 255 ) ;", "del_tokens": ""}
{"commit_tokens": ["added", "getQueueCount"], "add_tokens": "public int getQueueCount ( ) { return q . get ( ) . count ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["Add", "a", "period", "to", "an", "exception", "message"], "add_tokens": "\" computeExopackageDepsAbi must be set if exopackage is true . \" ) ;", "del_tokens": "\" computeExopackageDepsAbi must be set if exopackage is true \" ) ;"}
{"commit_tokens": ["Updated", "schema", "version", "to", "3", ".", "2"], "add_tokens": "return \" 3 . 2 \" ;", "del_tokens": "return \" 3 . 1 \" ;"}
{"commit_tokens": ["Fix", "a", "test", "not", "marked", "@", "Test"], "add_tokens": "@ Test", "del_tokens": ""}
{"commit_tokens": ["Fixes", "an", "application", "freeze", "when", "PulseAudio", "is", "disabled", "."], "add_tokens": "PA . CONTEXT_NOFLAGS ,", "del_tokens": "PA . CONTEXT_NOFAIL ,"}
{"commit_tokens": ["Fixing", "import", "optimisation", "on", "Type", "caused", "compilation", "failure"], "add_tokens": "import javarepl . expressions . Type ;", "del_tokens": ""}
{"commit_tokens": ["Replace", "log4j", "reference", "with", "Logback", "."], "add_tokens": "return \" LogbackModule \" ;", "del_tokens": "return \" log4j \" ;"}
{"commit_tokens": ["Changed", "the", "vibration", "duration", "from", "1s", "to", "750ms", "."], "add_tokens": "mVibrator . vibrate ( 750L ) ;", "del_tokens": "mVibrator . vibrate ( 1000L ) ;"}
{"commit_tokens": ["remove", "test", "code", "."], "add_tokens": "", "del_tokens": "valueTable [ lastIndex ] = 0 ;"}
{"commit_tokens": ["add", "javadoc"], "add_tokens": "* @ throws LoginFailedException if the login failed", "del_tokens": ""}
{"commit_tokens": ["Fix", "a", "constructor", "of", "ForegroundLinearLayout"], "add_tokens": "this ( context , null ) ;", "del_tokens": "super ( context ) ;"}
{"commit_tokens": ["LPS", "-", "17436", "Apply", "the", "same", "format", "applied", "in", "LinkNode", "for", "method", "setAltNode", "."], "add_tokens": "public void setAltCollectionNode ( CollectionNode altNode ) {", "del_tokens": "public void setAltNode ( CollectionNode altNode ) {"}
{"commit_tokens": ["remove", "debug", "usage", "doubling"], "add_tokens": "", "del_tokens": "processor . execute ( run , start ) ;"}
{"commit_tokens": ["Remove", "text", "options", "when", "longpressing", "off", "a", "textfield", "."], "add_tokens": "} else { clearTextEntry ( true ) ;", "del_tokens": ""}
{"commit_tokens": ["Add", "Malayalam", "UI", "language", "to", "lang", "list"], "add_tokens": "\" ml \" ,", "del_tokens": ""}
{"commit_tokens": ["Fix", "unused", "parameter", "warning", "."], "add_tokens": "this . tai = tai ;", "del_tokens": "this . tai = null ;"}
{"commit_tokens": ["Fixes", "java", "1", ".", "5", "compatibility", "."], "add_tokens": "", "del_tokens": "@ Override"}
{"commit_tokens": ["Fix", "ant", "checkstyle"], "add_tokens": "private static final long SHUTDOWN_TIMEOUT_SECONDS = 15 ;", "del_tokens": "private final long SHUTDOWN_TIMEOUT_SECONDS = 15 ;"}
{"commit_tokens": ["Remove", "deprecated", "constant"], "add_tokens": "", "del_tokens": "case IN_ASYNC : / / todo break ;"}
{"commit_tokens": ["Correctly", "reset", "secure", "channel", "before", "it", "is", "re", "-", "used", "."], "add_tokens": "netInBuffer . clear ( ) ;", "del_tokens": ""}
{"commit_tokens": ["removed", "unused", "variable"], "add_tokens": "", "del_tokens": "String key = \" key \" ;"}
{"commit_tokens": ["IDEA", "-", "82647", "Don", "t", "swap", "subject", "and", "description", "in", "Show", "Affected", "Paths", "dialog", "."], "add_tokens": "fullComment = commentSubject + \" \\ n \" + commentBody ;", "del_tokens": "fullComment = commentBody + \" \\ n \\ n \" + commentSubject ;"}
{"commit_tokens": ["set", "log", "level", "to", "all"], "add_tokens": "jdkLogHandler . setLevel ( Level . ALL ) ;", "del_tokens": ""}
{"commit_tokens": ["add", "TODO"], "add_tokens": "/ / TODO really need this ?", "del_tokens": ""}
{"commit_tokens": ["Fixing", "jabber", "login", "to", "some", "services", "."], "add_tokens": "", "del_tokens": "if ( isAuthenticationFailed ( ex ) ) throw ex ;"}
{"commit_tokens": ["Fix", "satellite", "events"], "add_tokens": "satellite_ . flushPendingEvents ( name_ ) ;", "del_tokens": "satellite_ . flushPendingEvents ( PDFViewerApplication . NAME ) ;"}
{"commit_tokens": ["remove", "@", "Override", "from", "GrailsDomainClassMappingContext", ".", "getIdentityMapping", "(", "ClassMapping", ")"], "add_tokens": "", "del_tokens": "@ Override"}
{"commit_tokens": ["Set", "the", "cache", "size", "to", "zero", "when", "it", "is", "cleared"], "add_tokens": "size . set ( 0 ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "lighting", "issue", "for", "air", "related", "to", "4096", "fix", "."], "add_tokens": "", "del_tokens": "Block . canBlockGrass [ 0 ] = false ;"}
{"commit_tokens": ["remove", "not", "used", "at", "least", "until", "I", "ve", "figured", "out", "the", "concurrency", "issue", "around", "the", "read", "/", "write"], "add_tokens": "", "del_tokens": "protected Poller readWritePoller = null ;"}
{"commit_tokens": ["fixed", "the", "redis", "instance", "not", "stopped", "issue"], "add_tokens": "RedisRunner . shutDownDefaultRedisServerInstance ( ) ;", "del_tokens": "RedisRunner . startDefaultRedisServerInstance ( ) ;"}
{"commit_tokens": ["Corrected", "top", "stack", "logic", "of", "notifications", "again", "."], "add_tokens": "mTopStackTotalSize - mTopStackPeekSize ,", "del_tokens": "mTopStackTotalSize ,"}
{"commit_tokens": ["Fixed", "regression", "in", "repository", "cache", "wrt", "repo", "names", "with", "case", "(", "issue", "-", "172", ")"], "add_tokens": "Repository r = getRepository ( model . name ) ;", "del_tokens": "Repository r = getRepository ( repositoryName ) ;"}
{"commit_tokens": ["removed", "@", "Ignore", "tag", "from", "JCacheClientListenerTest"], "add_tokens": "", "del_tokens": "@ Ignore"}
{"commit_tokens": ["Make", "ViewHolder", "less", "visible", "static", "."], "add_tokens": "static class ViewHolder {", "del_tokens": "public final class ViewHolder {"}
{"commit_tokens": ["added", "saving", "functionality", "for", "gpx", "file", "."], "add_tokens": "saveGPXFile ( ) ;", "del_tokens": ""}
{"commit_tokens": ["WEB", "-", "6373", "fixed", "tests", "."], "add_tokens": "HtmlUnknownTargetInspection . class , HtmlUnknownAnchorTargetInspection . class", "del_tokens": "HtmlUnknownTargetInspection . class"}
{"commit_tokens": ["Fix", "build"], "add_tokens": "* @ deprecated , @ see # onSignalStrengthsChanged", "del_tokens": "* @ deprecated , @ see # onSignalStrengthsChanged"}
{"commit_tokens": ["Log", "internal", "server", "errors", "in", "LocalMUCUser", "."], "add_tokens": "Log . error ( e ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "warnings"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["Add", "resources", "parameter", "to", "PythonLibrary", "rules"], "add_tokens": "public Optional < ImmutableSortedSet < SourcePath > > resources ;", "del_tokens": ""}
{"commit_tokens": ["Implement", "GradientDrawable", "getColorFilter", "."], "add_tokens": "public ColorFilter getColorFilter ( ) { return mColorFilter ; } @ Override", "del_tokens": ""}
{"commit_tokens": ["Fix", "layout"], "add_tokens": "requestLayout ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Reorganize", "a", "few", "things", "so", "that", "targets", "can", "be", "sorted", "better", "internally", "."], "add_tokens": "return compiler . toSource ( node ) ;", "del_tokens": "return new CodePrinter . Builder ( node ) . build ( ) ;"}
{"commit_tokens": ["Removed", "unnecessary", "indirect", "call", "in", "NioSocketChannel", ".", "isConnected", "(", ")"], "add_tokens": "return datagramChannel . isConnected ( ) ;", "del_tokens": "return datagramChannel . socket ( ) . isConnected ( ) ;"}
{"commit_tokens": ["add", "help", "id"], "add_tokens": "return getId ( ) ;", "del_tokens": "return null ;"}
{"commit_tokens": ["Remove", "class", "that", "was", "remove", "in", "refactoring", "."], "add_tokens": "", "del_tokens": "loader . loadClass ( basePackage + \" InternalOutputBuffer $ 1 \" ) ;"}
{"commit_tokens": ["Making", "default", "Socket", "timeout", "20s", "(", "from", "8s", ")", "."], "add_tokens": "public static final int DEFAULT_SOCKET_TIMEOUT = 20000 ;", "del_tokens": "public static final int DEFAULT_SOCKET_TIMEOUT = 8000 ;"}
{"commit_tokens": ["Ignore", "OOMTest", "."], "add_tokens": "@ Ignore", "del_tokens": ""}
{"commit_tokens": ["backspace", "in", "lookup", "shouldn", "t", "undo", "common", "prefix"], "add_tokens": "lookup . setAdditionalPrefix ( lookup . getAdditionalPrefix ( ) ) ; / / to clear initial prefix", "del_tokens": ""}
{"commit_tokens": ["Add", "a", "a", "trailing", "comma", "."], "add_tokens": "MINIMIZE_PRIMARY_DEX_SIZE , ;", "del_tokens": "MINIMIZE_PRIMARY_DEX_SIZE ;"}
{"commit_tokens": ["Fix", "broken", "performance", "test", "."], "add_tokens": "if ( _timer = = null ) { initTimer ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["The", "volume", "key", "will", "effect", "both", "ring", "and", "media", "vol", "at", "the", "same", "time", "."], "add_tokens": "refreshProgress ( R . id . progress , mProgress , false ) ;", "del_tokens": ""}
{"commit_tokens": ["make", "sure", "chat", "list", "updates", "after", "paging"], "add_tokens": "updateChatList ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "bug", "in", "dumper", "(", "compile", "-", "server", ")", "."], "add_tokens": "mappings . close ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Deprecate", "class", "that", "is", "no", "longer", "used", "."], "add_tokens": "/ * * * @ deprecated * /", "del_tokens": ""}
{"commit_tokens": ["Remove", "unused", "import"], "add_tokens": "", "del_tokens": "import javax . microedition . khronos . egl . EGLContext ;"}
{"commit_tokens": ["fixed", "compilation", "error"], "add_tokens": "@ Test", "del_tokens": "@ Tes"}
{"commit_tokens": ["Fix", "typo", "."], "add_tokens": "public Matrix getCreatedFromMatrix ( ) {", "del_tokens": "public Matrix getCreateFromMatrix ( ) {"}
{"commit_tokens": ["LPS", "-", "31796", "Copy", "the", "classloader", "when", "creating", "the", "proxy"], "add_tokens": "invokerFilterChain . setContextClassLoader ( contextClassLoader ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "build"], "add_tokens": "", "del_tokens": "Settings . Secure . putString ( mContentResolver ,"}
{"commit_tokens": ["LPS", "-", "14738", "Cannot", "import", "WCM", "Templates"], "add_tokens": "return content ;", "del_tokens": "return null ;"}
{"commit_tokens": ["LPS", "-", "36407", "Logically", "break", "missing", "references", "and", "layout", "code"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["FredrichO", "-", "set", "the", "title", "of", "the", "media", "activity", "in", "the", "action", "bar"], "add_tokens": "setTitle ( R . string . media ) ;", "del_tokens": ""}
{"commit_tokens": ["placed", "the", "completed", "(", ")", "call", "under", "the", "right", "braces"], "add_tokens": "completed ( ) ;", "del_tokens": "completed ( ) ;"}
{"commit_tokens": ["added", "additional", "flip", "when", "generating", "meshes"], "add_tokens": "indexBuffer . flip ( ) ;", "del_tokens": ""}
{"commit_tokens": ["removed", "a", "trailing", "log"], "add_tokens": "", "del_tokens": "Log . d ( \" ACCEL \" , \" accuracy is now \" + accuracy ) ;"}
{"commit_tokens": ["deleted", "extra", "newline"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Don", "t", "reference", "the", "enclosing", "type", "instance", "when", "it", "s", "not", "used", "(", "memory", "optimisation", ")"], "add_tokens": "static class Field", "del_tokens": "class Field"}
{"commit_tokens": ["Fix", "broken", "test", "."], "add_tokens": "Robolectric . logMissingInvokedShadowMethods ( ) ;", "del_tokens": "RobolectricTestRunner . logMissingInvokedShadowMethods ( ) ;"}
{"commit_tokens": ["Add", "TODO"], "add_tokens": "/ / TODO Review use of this , hasDataForWrite ( ) and registerWriteInterest ( )", "del_tokens": ""}
{"commit_tokens": ["Added", "methods", "on", "broker", "to", "integrate", "Zookeeper", "based", "broker", "."], "add_tokens": "void setLastCommittedTxId ( long txId ) ; boolean thisIsMaster ( ) ;", "del_tokens": ""}
{"commit_tokens": ["comment", "failing", "test"], "add_tokens": "/ / blackBoxFile ( \" regressions / kt475 . jet \" ) ;", "del_tokens": "blackBoxFile ( \" regressions / kt475 . jet \" ) ;"}
{"commit_tokens": ["IDEA", "-", "142339", "catch", "any", "type", "of", "exceptions", "when", "analyzing", "revision", "validity"], "add_tokens": "catch ( Exception e ) {", "del_tokens": "catch ( VcsException e ) {"}
{"commit_tokens": ["Decreasing", "default", "max", "connections", "per", "node", "to", "10"], "add_tokens": "private volatile int maxConnectionsPerNode = 10 ;", "del_tokens": "private volatile int maxConnectionsPerNode = 50 ;"}
{"commit_tokens": ["Fix", "NotNull", "exception", "with", "com", ".", "intellij", ".", "psi", ".", "impl", ".", "source", ".", "resolve", ".", "reference", ".", "ReferenceProvidersRegistry", ".", "getManipulator", "(", "ReferenceProvidersRegistry", ".", "java", ")"], "add_tokens": "@ Nullable PsiFile getContainingFile ( ) ;", "del_tokens": "PsiFile getContainingFile ( ) ;"}
{"commit_tokens": ["Fix", "a", "bug", "that", "could", "cause", "improper", "detection", "of", "long", "press", "selection", "mode", "in", "WebView", "after", "a", "scale", "gesture"], "add_tokens": "mPrivateHandler . removeMessages ( SWITCH_TO_LONGPRESS ) ;", "del_tokens": ""}
{"commit_tokens": ["Spell", "checker", "fixes", "narrowed", "scope", "/", "made", "less", "visible", "where", "possible", "."], "add_tokens": "private CheckBoxPreference decode1D ; private CheckBoxPreference decodeQR ;", "del_tokens": "CheckBoxPreference decode1D ; CheckBoxPreference decodeQR ;"}
{"commit_tokens": ["Fix", "Engine", "model", "texture", "binding"], "add_tokens": "bindTextureByName ( texture ) ;", "del_tokens": "tileEntityRenderer . renderEngine . func_98187_b ( texture ) ;"}
{"commit_tokens": ["IDEADEV", "-", "41221", "fixed", "case", "with", "two", "rebase", "processes"], "add_tokens": "myRebaseEditorNo = null ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "build"], "add_tokens": "public String getLanguage ( ) ;", "del_tokens": ""}
{"commit_tokens": ["remove", "debugging", "statement"], "add_tokens": "", "del_tokens": "Log . v ( K9 . LOG_TAG , \" downloading remainder \" ) ;"}
{"commit_tokens": ["Change", "visibility", "of", "Pool", ".", "returnResourceObject", "(", ")", "to", "protected"], "add_tokens": "protected void returnResourceObject ( final T resource ) {", "del_tokens": "public void returnResourceObject ( final T resource ) {"}
{"commit_tokens": ["SmartList", ".", "set", "shouldn", "t", "increase", "modCount", "."], "add_tokens": "", "del_tokens": "modCount + + ;"}
{"commit_tokens": ["set", "book", "progress", "from", "XMLSerializer"], "add_tokens": "myBook . setProgressWithNoCheck ( myProgress ) ;", "del_tokens": ""}
{"commit_tokens": ["Disable", "other", "flaky", "Apple", "app", "test", "integration", "test"], "add_tokens": "@ Ignore / / TODO ( user ) : Fix this test .", "del_tokens": ""}
{"commit_tokens": ["Fix", "warning"], "add_tokens": "throw new RuntimeException ( e ) ;", "del_tokens": "new RuntimeException ( e ) ;"}
{"commit_tokens": ["CursorToBulkCursorAdapter", ".", "close", "must", "call", "mCursor", ".", "close", "instead", "of", "mCursor", ".", "deactivate", "."], "add_tokens": "mCursor . close ( ) ;", "del_tokens": "mCursor . deactivate ( ) ;"}
{"commit_tokens": ["Revert", "Revert", "LPS", "-", "54998", "SF"], "add_tokens": "catch ( MalformedURLException murle ) {", "del_tokens": "catch ( MalformedURLException e ) {"}
{"commit_tokens": ["Add", "@", "SuppressWarnings", "(", "unused", ")", "to", "parseFrom", "where", "it", "s", "intentional", "."], "add_tokens": "public static InvalidMessageWithParseFrom parseFrom ( @ SuppressWarnings ( \" unused \" ) byte [ ] bytes ) {", "del_tokens": "public static InvalidMessageWithParseFrom parseFrom ( byte [ ] bytes ) {"}
{"commit_tokens": ["fixed", "test", "runner", "for", "non", "-", "python", "modules"], "add_tokens": "return PROJECT_TEST_RUNNER . isEmpty ( ) ? PythonTestConfigurationsModel . PYTHONS_UNITTEST_NAME : PROJECT_TEST_RUNNER ;", "del_tokens": "return PROJECT_TEST_RUNNER ;"}
{"commit_tokens": ["ViewPager", "was", "not", "repositioning", "the", "PagerTitleStrip", "properly"], "add_tokens": "pageScrolled ( destX ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "crash", "in", "synchronization", "of", "kept", "-", "in", "-", "sync", "files", "triggered", "by", "browsing"], "add_tokens": "if ( mServerFile ! = null ) {", "del_tokens": "if ( result . isSuccess ( ) ) {"}
{"commit_tokens": ["Fix", "ui", "exception"], "add_tokens": "new Toast ( this ) ; / / activate in UI thread to avoid further exceptions", "del_tokens": ""}
{"commit_tokens": ["Fix", "typo", "in", "comment"], "add_tokens": "* Position where the completion has to be inserted", "del_tokens": "* Postion where the completion has to be inserted"}
{"commit_tokens": ["Fix", "most", "of", "JS", "back", "-", "end", "tests", "after", "adding", "Pair", "and", "Triple"], "add_tokens": "\" / stdlib / TuplesCode . kt \" ,", "del_tokens": ""}
{"commit_tokens": ["Fix", "ant", "build", "break"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["Don", "T", "call", "ChannelPipeline", ".", "fireExceptionCaught", "(", "."], "add_tokens": "", "del_tokens": "pipeline ( ) . fireExceptionCaught ( cause ) ;"}
{"commit_tokens": ["Fix", "#", "109", "file", "not", "unlocked", "after", "db", "close", "on", "windows", "."], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "4318", "Move", "it", "to", "the", "deprecated", "class", "as", "well", "(", "just", "in", "case", ")"], "add_tokens": "1 ; }", "del_tokens": ""}
{"commit_tokens": ["remove", "striped"], "add_tokens": "", "del_tokens": "setStriped ( true ) ;"}
{"commit_tokens": ["As", "per", "kkolinko", "s", "comment", "-", "remove", "old", "comment"], "add_tokens": "", "del_tokens": "/ / NOTE : Race condition is harmless , so do not synchronize"}
{"commit_tokens": ["corrected", "a", "misuse", "."], "add_tokens": "parseAsStaticResourceAttribute ( illegalStaticResourceAttributeValue . value ) ;", "del_tokens": "parseAsValueModelAttribute ( illegalStaticResourceAttributeValue . value ) ;"}
{"commit_tokens": ["Accomodate", "changes", "in", "the", "render", "signature", "in", "the", "RajawaliScene", "class", "."], "add_tokens": "mScene . render ( deltaTime , readBuffer ) ;", "del_tokens": "mScene . render ( deltaTime ) ;"}
{"commit_tokens": ["Made", "checkedItems", "public", "for", "inspection", "by", "tests"], "add_tokens": "public boolean [ ] checkedItems ;", "del_tokens": "private boolean [ ] checkedItems ;"}
{"commit_tokens": ["for", "IDEA", "-", "level", "ignored", "folders", "-", "keep", "/", "show", "in", "viewer", "only", "folder"], "add_tokens": "composite . getIgnoredFileHolder ( ) . calculateChildren ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "sorting", "on", "post", "formats", "to", "fix", "#", "284", "."], "add_tokens": "", "del_tokens": "java . util . Arrays . sort ( postFormats ) ; java . util . Arrays . sort ( postFormatTitles ) ;"}
{"commit_tokens": ["test", "was", "using", "incorrect", "target", "directory", "-", "noise", "in", "source", "tree"], "add_tokens": "config . setTargetDirectory ( dir ) ;", "del_tokens": ""}
{"commit_tokens": ["reset", "target", "patterns", "after", "propagation", "."], "add_tokens": "ret . targetPatterns = null ;", "del_tokens": "this . targetPatterns = null ;"}
{"commit_tokens": ["Make", "tryToExtractPackageNameFromManifest", "static"], "add_tokens": "public static String tryToExtractPackageNameFromManifest ( InstallableApk androidBinaryRule ,", "del_tokens": "String tryToExtractPackageNameFromManifest ( InstallableApk androidBinaryRule ,"}
{"commit_tokens": ["reset", "light", "count", "in", "lights", "(", ")"], "add_tokens": "/ / reset number of lights lightCount = 0 ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "GpsLocationProvider", "to", "return", "GpsStatus", "and", "Nmea", "events", "."], "add_tokens": "return GpsLocationProvider . isSupported ( ) ;", "del_tokens": "return native_is_measurement_supported ( ) ;"}
{"commit_tokens": ["cancel", "popup", "on", "navigation"], "add_tokens": "popup . cancel ( ) ;", "del_tokens": ""}
{"commit_tokens": ["add", "compaction", "marker", "to", "in", "-", "memory", "list", "of", "components", "."], "add_tokens": "components . add ( Component . COMPACTED_MARKER ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "error", "where", "negative", "byte", "values", "were", "read", "causing", "the", "DataInputStream", "to", "throw", "an", "EOFException", "."], "add_tokens": "return buffer . get ( ) & 0xff ;", "del_tokens": "return buffer . get ( ) ;"}
{"commit_tokens": ["fix", "minor", "rendering", "glitch", "with", "items", "in", "pipes"], "add_tokens": "if ( item = = null | | item . getContainer ( ) ! = pipe . container ) {", "del_tokens": "if ( item = = null ) {"}
{"commit_tokens": ["Added", "missing", "break", "in", "ElasticSearchIndex", "that", "now", "not", "all", "fields", "are", "stored", "analysed", "and", "not_analysed"], "add_tokens": "break ;", "del_tokens": ""}
{"commit_tokens": ["Ctrl", "-", "Shift", "-", "W", "triggers", "NPE", "(", "IDEADEV", "-", "15817", ")"], "add_tokens": "if ( firstChild = = null ) break ;", "del_tokens": ""}
{"commit_tokens": ["Revert", "Change", "the", "scope"], "add_tokens": "protected void initWebSocket ( ) {", "del_tokens": "public void initWebSocket ( ) {"}
{"commit_tokens": ["Added", "missing", "Javadoc"], "add_tokens": "/ * * * Return the HTTP root directory for this server * /", "del_tokens": ""}
{"commit_tokens": ["git", "test", "run", "by", "Chee"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["broke", "the", "build"], "add_tokens": "mongo . close ( ) ;", "del_tokens": "mongo . close ( ) ;"}
{"commit_tokens": ["Don", "t", "cache", "source", "formatting", "for", "now"], "add_tokens": "_sourceFormatterHelper = new SourceFormatterHelper ( false ) ;", "del_tokens": "_sourceFormatterHelper = new SourceFormatterHelper ( true ) ;"}
{"commit_tokens": ["Add", "getIndex", "to", "GenericVertex"], "add_tokens": "public int getIndex ( ) { return index ; }", "del_tokens": ""}
{"commit_tokens": ["Java", "regexps", "do", "support", "possessive", "quantifiers", "(", "IDEA", "-", "81507", ")"], "add_tokens": "return true ;", "del_tokens": "return false ;"}
{"commit_tokens": ["Turn", "down", "depth", "of", "recursion"], "add_tokens": "private static final int MIN_DIMENSION_TO_RECUR = 100 ;", "del_tokens": "private static final int MIN_DIMENSION_TO_RECUR = 30 ;"}
{"commit_tokens": ["Fix", "buffer", "handling"], "add_tokens": "buffer . flip ( ) ;", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "44366", "Set", "closure", "compiler", "as", "default", "in", "case", "of", "error"], "add_tokens": "return new GoogleClosureCompileJavaScriptMinifier ( ) ;", "del_tokens": "return new YUIJavaScriptMinifier ( ) ;"}
{"commit_tokens": ["Fix", "warning"], "add_tokens": "", "del_tokens": "import android . os . DeadObjectException ;"}
{"commit_tokens": ["fixed", "finbugs", "issue"], "add_tokens": "private static class EmptyIterator implements Iterator {", "del_tokens": "private class EmptyIterator implements Iterator {"}
{"commit_tokens": ["Reset", "suggestion", "counter", "on", "parsing", "a", "new", "log"], "add_tokens": "suggestions . clear ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "a", "checkstyle", "violation"], "add_tokens": "}", "del_tokens": "}"}
{"commit_tokens": ["Fix", "null", "pointer"], "add_tokens": "if ( hook ! = null & & hook . isPermissionManagement ( ) )", "del_tokens": "if ( hook . isPermissionManagement ( ) )"}
{"commit_tokens": ["Prevent", "NPE", "in", "HardwareRenderer"], "add_tokens": "if ( mCanvas ! = null ) { setEnabled ( true ) ; }", "del_tokens": "setEnabled ( true ) ;"}
{"commit_tokens": ["remove", "debug", "code"], "add_tokens": "", "del_tokens": "/ / if ( robot ! = null ) / / return ;"}
{"commit_tokens": ["Don", "t", "back", "up", "the", "scan", "-", "always", "setting", "."], "add_tokens": "", "del_tokens": "WIFI_SCAN_ALWAYS_AVAILABLE ,"}
{"commit_tokens": ["Removed", "@", "Ignore", "from", "a", "passing", "test", "."], "add_tokens": "", "del_tokens": "@ Ignore"}
{"commit_tokens": ["Change", "EventBus", "to", "remove", "the", "thread", "local", "Queue", "after", "dispatching", "events", "."], "add_tokens": "eventsToDispatch . remove ( ) ;", "del_tokens": ""}
{"commit_tokens": ["turned", "off", "debug"], "add_tokens": "public static final boolean DEBUG = false ;", "del_tokens": "public static final boolean DEBUG = true ;"}
{"commit_tokens": ["Added", "ActorRegistry", ".", "hasGlobalRegistry"], "add_tokens": "public static boolean hasGlobalRegistry ( ) { return globalRegistry ! = null ; }", "del_tokens": ""}
{"commit_tokens": ["Fixed", "ctr", "must", "setup", "the", "default", "functions"], "add_tokens": "this ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "dead", "import"], "add_tokens": "", "del_tokens": "import water . fvec . Frame ;"}
{"commit_tokens": ["LPS", "-", "28250", "BaseAsyncDestination", "should", "shutdown", "attach", "ThreadPoolExecutor", "on", "close"], "add_tokens": "PortalExecutorManagerUtil . shutdown ( getName ( ) , force ) ;", "del_tokens": ""}
{"commit_tokens": ["Changed", "method", "acquire", "(", ")", "to", "not", "append", "(", ")", "to", "allow", "callers", "to", "decide"], "add_tokens": "", "del_tokens": "append ( buffer , true ) ;"}
{"commit_tokens": ["Adds", "missing", "break", "statement"], "add_tokens": "break ;", "del_tokens": ""}
{"commit_tokens": ["Also", "set", "the", "in", "-", "memory", "current", "Blog", "to", "visible"], "add_tokens": "currentBlog . setHidden ( false ) ;", "del_tokens": ""}
{"commit_tokens": ["reverted", "changes", "for", "continue", "statement"], "add_tokens": "continue ;", "del_tokens": ""}
{"commit_tokens": ["cache", "generated", "file"], "add_tokens": "buildableContext . recordArtifact ( output ) ;", "del_tokens": ""}
{"commit_tokens": ["Add", "missing", "@", "CheckForNull", "on", "templateKey"], "add_tokens": "@ CheckForNull", "del_tokens": ""}
{"commit_tokens": ["add", "getSpawnLocation", "(", ")", "to", "the", "World", "API"], "add_tokens": "/ * * * Gets the default spawn location . * / public Location getSpawnLocation ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "a", "bug", "for", "setting", "labels", "in", "BuildBinarizedDataset"], "add_tokens": "setUnknownLabels ( collapsedUnary , mainLabel ) ;", "del_tokens": "setUnknownLabels ( binarized , mainLabel ) ;"}
{"commit_tokens": ["Removed", "a", "system", ".", "out"], "add_tokens": "", "del_tokens": "System . out . println ( Thread . currentThread ( ) + \" created node \" + node ) ;"}
{"commit_tokens": ["Remove", "bodyGenerator", "on", "resetNonMultipartData"], "add_tokens": "request . bodyGenerator = null ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "a", "compilation", "error", "(", "returning", "from", "a", "void", "method", ")", "."], "add_tokens": "", "del_tokens": "return null ;"}
{"commit_tokens": ["Fix", "143", "potential", "context", "leak"], "add_tokens": "mContext = context . getApplicationContext ( ) ;", "del_tokens": "mContext = context ;"}
{"commit_tokens": ["LPS", "-", "34706", "remove", "temporary", "file", "after", "sucessful", "upload"], "add_tokens": "deleteTempFileEntry ( groupId ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "a", "bug", "in", "ScanSettings", "constructor", "."], "add_tokens": "mMatchMode = matchMode ;", "del_tokens": "mMatchMode = numOfMatchesPerFilter ;"}
{"commit_tokens": ["Request", "now", "generates", "strict", "json", "code", "."], "add_tokens": "protected boolean _strictJsonCompliance = true ;", "del_tokens": "protected boolean _strictJsonCompliance = false ;"}
{"commit_tokens": ["LPS", "-", "41254", "Only", "use", "Validator", ".", "isNull", "for", "String", "(", "or", "sometimes", "Long", ")"], "add_tokens": "if ( dlFileEntryMetadata = = null ) {", "del_tokens": "if ( Validator . isNull ( dlFileEntryMetadata ) ) {"}
{"commit_tokens": ["Better", "swap", "these", "to", "make", "sure", "we", "never", "enter", "an", "endless", "loop"], "add_tokens": "setSelection ( mCurrentAdapterIndex ) ;", "del_tokens": "setSelection ( mCurrentAdapterIndex ) ;"}
{"commit_tokens": ["LPS", "-", "27258", "PortletPreferencesListener", "should", "do", "a", "merge", "update", "for", "Layout"], "add_tokens": "LayoutLocalServiceUtil . updateLayout ( layout , true ) ;", "del_tokens": "LayoutLocalServiceUtil . updateLayout ( layout , false ) ;"}
{"commit_tokens": ["remove", "local", "that", "was", "masking", "the", "superclass", "field"], "add_tokens": "/ / PGraphics graphics ; / / moved to PSurfaceNone", "del_tokens": "PGraphics graphics ;"}
{"commit_tokens": ["Gather", "thread", "context", "before", "queueing", "events", "for", "asynchronous", "processing"], "add_tokens": "eventObject . prepareForDeferredProcessing ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "#", "3355"], "add_tokens": "@ Override public boolean forceTileEntityRender ( ) { return true ; }", "del_tokens": ""}
{"commit_tokens": ["Do", "not", "backup", "wifi", "country", "code", "settings"], "add_tokens": "", "del_tokens": "WIFI_COUNTRY_CODE ,"}
{"commit_tokens": ["Add", "isDense", "to", "CFMetaData", "#", "hashCode", "(", ")"], "add_tokens": ". append ( isDense )", "del_tokens": ""}
{"commit_tokens": ["Fix", "javadoc", "for", "CameraManager", ".", "AvailabilityCallback"], "add_tokens": "* @ see # registerAvailabilityCallback", "del_tokens": "* @ see registerAvailabilityCallback"}
{"commit_tokens": ["Removed", "a", "@", "Documented", "tag", "that", "shouldn", "t", "be", "there", "anyhow", "."], "add_tokens": "", "del_tokens": "@ Documented"}
{"commit_tokens": ["fix", "broken", "ut"], "add_tokens": "null ,", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "32502", "Make", "the", "force", "start", "operation", "able", "to", "work", "with", "lazy", "bundles"], "add_tokens": "if ( ! start & & _hasLazyActivationPolicy ( bundle ) ) {", "del_tokens": "if ( _hasLazyActivationPolicy ( bundle ) ) {"}
{"commit_tokens": ["Adding", "Missing", "semicolon"], "add_tokens": "}", "del_tokens": ""}
{"commit_tokens": ["Fix", "missing", "break", "in", "Icon", "class"], "add_tokens": "break ;", "del_tokens": ""}
{"commit_tokens": ["I", "did", "not", "make", "equivalent", "modifications", "(", "the", "isCommitted", "method", "was", "not", "invoked", "on", "the", "facade", ")", "."], "add_tokens": "if ( response . isCommitted ( ) ) {", "del_tokens": "if ( response . isAppCommitted ( ) ) {"}
{"commit_tokens": ["Fix", "a", "Javadoc", "comment", "."], "add_tokens": "* Installs a location provider .", "del_tokens": "* Installs a network location provider ."}
{"commit_tokens": ["Fix", "edge", "label", "positionning", "."], "add_tokens": "return 0 ;", "del_tokens": "throw new UnsupportedOperationException ( \" Not supported yet . \" ) ;"}
{"commit_tokens": ["Fix", "builder", "issue"], "add_tokens": "public static class Builder implements HandlerBuilder {", "del_tokens": "public class Builder implements HandlerBuilder {"}
{"commit_tokens": ["Enable", "abstract", "methods", "should", "be", "implemented", "check", "for", "non", "-", "J2CL", "code"], "add_tokens": "this . shouldExpectAbstractMethodsImplemented = true ;", "del_tokens": ""}
{"commit_tokens": ["IDEA", "-", "100693", "copy", "/", "paste", "of", "a", "whole", "line", "adds", "extra", "space", "indent"], "add_tokens": "myIndentSpaces + = tabSize - ( mySpaces % tabSize ) ;", "del_tokens": "myIndentSpaces + = tabSize ;"}
{"commit_tokens": ["Redraw", "search", "autocomplete", "dropdown", "after", "config", "change", "."], "add_tokens": "mSearchAutoComplete . showDropDownAfterLayout ( ) ;", "del_tokens": ""}
{"commit_tokens": ["removed", "jmock", "dep"], "add_tokens": "throw new UnsupportedOperationException ( ) ; / / todo", "del_tokens": "throw new UnsupportedOperationException ( ) ;"}
{"commit_tokens": ["LPS", "-", "55871", "we", "should", "set", "_modifiedDate", "with", "modifiedDate"], "add_tokens": "_modifiedDate = modifiedDate ;", "del_tokens": "_modifiedDate = _createDate ;"}
{"commit_tokens": ["Replace", "registerForEvent", "(", ")", "with", "equivalent", "call", "that", "makes", "registerForEvent", "(", ")", "unused", "."], "add_tokens": "socketWrapper . registerReadInterest ( ) ;", "del_tokens": "registerForEvent ( true , false ) ;"}
{"commit_tokens": ["avoid", "invalid", "state", "assertion", "(", "IDEADEV", "-", "21852", ")"], "add_tokens": "tryGetFileBytes ( ) ;", "del_tokens": "getFileBytes ( ) ;"}
{"commit_tokens": ["Remove", "over", "-", "aggressive", "stack", "movement", "."], "add_tokens": "", "del_tokens": "task . getDisplayContent ( ) . moveStack ( stack , false ) ;"}
{"commit_tokens": ["Fix", "broken", "ListView", "test", "."], "add_tokens": "FakeHandler . flush ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "download", "error"], "add_tokens": "", "del_tokens": "progressFileDlg = null ;"}
{"commit_tokens": ["Fix", "EmptyLineSeparator", "violations", "for", "classes", "issue", "#", "1040"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["do", "not", "ignore", "end", "-", "of", "-", "line", "symbols", "in", "bookmarks"], "add_tokens": "case ' \\ n ' :", "del_tokens": ""}
{"commit_tokens": ["Added", "compound", "visitor", "for", "dynamic", "type", "builder", "."], "add_tokens": "new AsmVisitorWrapper . Compound ( asmVisitorWrapper ) ,", "del_tokens": "asmVisitorWrapper ,"}
{"commit_tokens": ["Added", "TODO"], "add_tokens": "/ / TODO : consider using CharSequence instead of String as method arguments", "del_tokens": ""}
{"commit_tokens": ["add", "getCount", "method", "to", "BytesInputStream", "(", "@", "MysteryMachine", ")"], "add_tokens": "public int getCount ( ) { return count ; }", "del_tokens": ""}
{"commit_tokens": ["Remove", "client", "debug", "."], "add_tokens": "", "del_tokens": "System . out . println ( \" Headers : \" + headers ) ;"}
{"commit_tokens": ["Allows", "agent", "error", "-", "handler", "to", "send", "successfully", "."], "add_tokens": "nested . set ( null ) ; / / allow errorHandler to send", "del_tokens": "nested . set ( PersistentVector . EMPTY ) ;"}
{"commit_tokens": ["remove", "two", "-", "times", "init", "of", "the", "drawer"], "add_tokens": "", "del_tokens": "initDrawer ( ) ;"}
{"commit_tokens": ["Fix", "checkstyle"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["print", "an", "empty", "line", "after", "each", "source", "input", "file"], "add_tokens": "out . append ( \" \\ n \" ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "crash"], "add_tokens": "", "del_tokens": "ft . commit ( ) ;"}
{"commit_tokens": ["Improved", "assertion", "messages", "in", "failing", "ReplicatedMapTest", "tests"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["remove", "unneeded", "TODO"], "add_tokens": "", "del_tokens": "/ / TODO : replace these with a callable delegate"}
{"commit_tokens": ["IDEA", "-", "66561", "(", "Surround", "with", ".", ".", ".", "in", "GSP", "could", "suggest", "if", "/", "else", "/", "each", "tags", ")"], "add_tokens": "return null ;", "del_tokens": "return new String [ 0 ] ;"}
{"commit_tokens": ["add", "a", "method", "to", "get", "the", "recipe", "."], "add_tokens": "public IRecipe getCurrentRecipe ( ) { return currentRecipe ; }", "del_tokens": ""}
{"commit_tokens": ["Fixed", "onTouch", "in", "ScrollView", "or", "ViewPager"], "add_tokens": "getParent ( ) . requestDisallowInterceptTouchEvent ( true ) ;", "del_tokens": ""}
{"commit_tokens": ["Print", "version", "message", "at", "server", "definition"], "add_tokens": "server . getLogger ( ) . info ( \" This server is running \" + getName ( ) + \" version \" + getVersion ( ) ) ;", "del_tokens": ""}
{"commit_tokens": ["added", "isDrawing", "(", ")"], "add_tokens": "public boolean isDrawing ( ) { return drawing ; }", "del_tokens": ""}
{"commit_tokens": ["remove", "double", "setting", "clear"], "add_tokens": "", "del_tokens": "valuesLoaded = false ;"}
{"commit_tokens": ["NotNull", "-", "just", "to", "make", "sure"], "add_tokens": "@ NotNull", "del_tokens": ""}
{"commit_tokens": ["Fix", "typo", "in", "AbstractTestQueries"], "add_tokens": "public void testDereferenceInComparison ( )", "del_tokens": "public void testDereferenceInComparsion ( )"}
{"commit_tokens": ["Check", "usage", "Object", ".", "wait", "(", ")", "in", "AbstractFailureDetector", "."], "add_tokens": "while ( ! isAvailable ( node ) )", "del_tokens": "if ( ! isAvailable ( node ) )"}
{"commit_tokens": ["add", "missing", "redirect", "after", "restoring", "user", "in", "new", "session"], "add_tokens": "session . continueRequest ( ) ;", "del_tokens": ""}
{"commit_tokens": ["reenable", "daylight", "saving", "test", "now", "that", "we", "use", "joda", "-", "time", "2"], "add_tokens": "@ Test", "del_tokens": "/ / @ Test"}
{"commit_tokens": ["REmove", "unnecessary", "methods", "from", "interface"], "add_tokens": "", "del_tokens": "@ Override public boolean equals ( Object listener ) ; @ Override public int hashCode ( ) ;"}
{"commit_tokens": ["Added", "public", "method", "to", "Cache", "to", "check", "initialized", "state"], "add_tokens": "public static boolean isInitialized ( ) { return sIsInitialized ; }", "del_tokens": ""}
{"commit_tokens": ["Add", "todo", "for", "investigating", "system", "property", "clearing"], "add_tokens": "/ / TODO ( gpang ) : is this line necessary ?", "del_tokens": ""}
{"commit_tokens": ["Fixed", "lost", "text", "in", "notifications", "for", "failed", "uploads"], "add_tokens": "errorBuilder . setContentText ( content ) ;", "del_tokens": ""}
{"commit_tokens": ["Add", "getOnFocusChangeListener", "to", "View"], "add_tokens": "public View . OnFocusChangeListener getOnFocusChangeListener ( ) { return onFocusChangeListener ; } @ Implementation", "del_tokens": ""}
{"commit_tokens": ["Adds", "configuration", "fragment", "requirements", "for", "AndroidNeverlinkAspect", "."], "add_tokens": ". requiresConfigurationFragments ( )", "del_tokens": ""}
{"commit_tokens": ["Make", "an", "internal", "class", "package", "private", "(", "cherry", "-", "pick", "to", "master", "to", "unblock", "all", ")"], "add_tokens": "static class SubscriptionCallbackApi21 extends SubscriptionCallback {", "del_tokens": "public static class SubscriptionCallbackApi21 extends SubscriptionCallback {"}
{"commit_tokens": ["Fixed", "missing", "import"], "add_tokens": "import buildcraft . core . inventory . StackHelper ;", "del_tokens": ""}
{"commit_tokens": ["Ignore", "DLGradientCheck", "for", "now", "."], "add_tokens": "@ Ignore", "del_tokens": ""}
{"commit_tokens": ["Make", "sure", "."], "add_tokens": "instance . destroy ( ) ;", "del_tokens": ""}
{"commit_tokens": ["should", "run", "oncomplete", "function", "when", "error", "stop", "tasks", "and", "remove", "surfaceview"], "add_tokens": "onCompletion ( ) ;", "del_tokens": ""}
{"commit_tokens": ["added", "clearing", "of", "named", "continue", "labels", "after", "the", "map", "is", "no", "longer", "needed"], "add_tokens": "namedLoopContinueLabel . clear ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Add", "getContextPath", "."], "add_tokens": "public String getContextPath ( ) ;", "del_tokens": ""}
{"commit_tokens": ["enable", "long", "click", "on", "recipient", "select", "view"], "add_tokens": "setLongClickable ( true ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "validate", "IPv4", "address", "method"], "add_tokens": "return true ;", "del_tokens": ""}
{"commit_tokens": ["Fixes", "issue", "voldemort", "/", "voldemort", "#", "234"], "add_tokens": "readKey ( inputStream ) ;", "del_tokens": ""}
{"commit_tokens": ["WEB", "-", "9926", "add", "additional", "scopes"], "add_tokens": "CLASS , INSTANCE , OBJECT ,", "del_tokens": ""}
{"commit_tokens": ["update", "legacy", "metadata"], "add_tokens": "CameraCharacteristics . CONTROL_AVAILABLE_MODES ,", "del_tokens": ""}
{"commit_tokens": ["Removed", "an", "unnecessary", "empty", "line"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["add", "TODO"], "add_tokens": "/ / TODO take weak reference to Engine from background thread . Quit heartbeat if Engine was GCed .", "del_tokens": ""}
{"commit_tokens": ["Added", "first", "constants"], "add_tokens": "public static final int APP_VERSION = 3500 ; public static final long UNK25 = 7363665268261373700L ;", "del_tokens": ""}
{"commit_tokens": ["fixed", "typo"], "add_tokens": "/ / for some reason not supported", "del_tokens": "/ / for some reasonable not supported"}
{"commit_tokens": ["using", "string", "literals", "in", "any", "lombok", "annotation", "value", "would", "blow", "up", "that", "processor", "."], "add_tokens": "if ( guess instanceof String ) return guess ;", "del_tokens": "if ( guess instanceof String ) return expected ;"}
{"commit_tokens": ["Remember", "change", "signature", "dialog", "size", "."], "add_tokens": "protected String getDimensionServiceKey ( ) { return \" refactoring . ChangeSignatureDialog \" ; }", "del_tokens": ""}
{"commit_tokens": ["Remove", "TODO", "comment"], "add_tokens": "", "del_tokens": "/ / TODO : this should probably be moved to common / ."}
{"commit_tokens": ["Set", "input", "method", "mode", "for", "CascadingMenuPopup", "."], "add_tokens": "popupWindow . setInputMethodMode ( PopupWindow . INPUT_METHOD_NOT_NEEDED ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "wakelock"], "add_tokens": "sWakeLock . release ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "test", "forgot", "to", "shutdown", "the", "batch", "inserter"], "add_tokens": "inserter . shutdown ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "unnecessary", "code", "."], "add_tokens": "", "del_tokens": "outputStream = new CoyoteOutputStream ( outputBuffer ) ; writer = new CoyoteWriter ( outputBuffer ) ;"}
{"commit_tokens": ["Fixed", "findbugs", "issues"], "add_tokens": "", "del_tokens": "private Object nullPlaceHolder ;"}
{"commit_tokens": ["Initializing", "one", "less", "var"], "add_tokens": "", "del_tokens": "faceCount = 0 ;"}
{"commit_tokens": ["Fix", "incorrect", "class", "name", "in", "TestTextureArrayCompressed"], "add_tokens": "TestTextureArrayCompressed app = new TestTextureArrayCompressed ( ) ;", "del_tokens": "TestTextureArray app = new TestTextureArray ( ) ;"}
{"commit_tokens": ["Fix", "typo", "for", "setting", "selection", "drawable"], "add_tokens": "regenerateBackground ( ) ;", "del_tokens": "invalidate ( ) ;"}
{"commit_tokens": ["Updates"], "add_tokens": "throw new RuntimeException ( t ) ;", "del_tokens": "t . printStackTrace ( ) ; return null ;"}
{"commit_tokens": ["LPS", "-", "16305", "Js", "Error", "when", "uploading", "images", "to", "Image", "Gallery"], "add_tokens": "public int doEndTag ( ) {", "del_tokens": "public int doStartTag ( ) {"}
{"commit_tokens": ["remove", "superfluous", "semicolon"], "add_tokens": "/ *", "del_tokens": "/ * ;"}
{"commit_tokens": ["Fix", "nit", "on", "length", "of", "flag", "constant", "."], "add_tokens": "\" vending_pd_resend_frequency_ms \" ;", "del_tokens": "\" vending_pending_download_resend_frequency_ms \" ;"}
{"commit_tokens": ["Remove", "the", "divider", "in", "Upcoming", "and", "Recent", "lists", "."], "add_tokens": "list . setDivider ( null ) ;", "del_tokens": ""}
{"commit_tokens": ["build", "number", "10"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Fix", "the", "fix", "in", "r1530423"], "add_tokens": "result = processDataBinary ( ) ;", "del_tokens": "return processDataBinary ( ) ;"}
{"commit_tokens": ["Reverts", "removal", "of", "@", "JsonIgnore", "on", "Event", ".", "type", "field"], "add_tokens": "@ JsonIgnore", "del_tokens": ""}
{"commit_tokens": ["Revert", "LPS", "-", "35707", "SF"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "36595", "LPS", "-", "37303", "Undo", "SF", "in", "c034e424db7a18a4de11f2ec3c2bde00c4ee9b56", "because", "I", "think", "he", "was", "trying", "to", "show", "declare", "and", "set", "membershipRestriction", "in", "its", "own", "block", "."], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Add", "missing", "class", "."], "add_tokens": "\" core . AsyncListenerWrapper \" ) ; loader . loadClass ( basePackage +", "del_tokens": ""}
{"commit_tokens": ["suppress", "unused", "fields", "inspection"], "add_tokens": "@ SuppressWarnings ( \" unused \" )", "del_tokens": ""}
{"commit_tokens": ["Call", "progress", "(", "null", ")", "in", "closeOutput", "(", ")"], "add_tokens": "progress ( null ) ;", "del_tokens": ""}
{"commit_tokens": ["Add", "an", "override", "annotation"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["help", "topics", "for", "VCS", "configurables", "(", "IDEADEV", "-", "33672", ")"], "add_tokens": "return \" project . propVCSSupport . VCSs \" ;", "del_tokens": "return null ;"}
{"commit_tokens": ["add", "@", "see"], "add_tokens": "* @ see DomService # createAnchor ( DomElement )", "del_tokens": ""}
{"commit_tokens": ["Exported", "version", "0", ".", "8", ".", "1"], "add_tokens": "public final static boolean DEBUG = false ;", "del_tokens": "public final static boolean DEBUG = true ;"}
{"commit_tokens": ["remove", "patch", "verb", "not", "supported", "by", "HttpUrlConnection"], "add_tokens": "GET , POST , PUT , DELETE , HEAD , OPTIONS , TRACE", "del_tokens": "GET , POST , PUT , DELETE , HEAD , OPTIONS , TRACE , PATCH"}
{"commit_tokens": ["add", "helpID"], "add_tokens": "return \" preferences . customizations \" ;", "del_tokens": "return null ;"}
{"commit_tokens": ["triggering", "the", "build", ".", ".", "."], "add_tokens": "/ /", "del_tokens": "/ /"}
{"commit_tokens": ["Add", "@", "SmallTest", "for", "continuous", "tests", "."], "add_tokens": "@ SmallTest", "del_tokens": ""}
{"commit_tokens": ["Fix", "SeekableViewsForTest", "to", "handle", "the", "reset", "(", "long", "double", ")", "overload", "properly"], "add_tokens": "current_data . reset ( generateTimestamp ( ) , ( double ) current ) ;", "del_tokens": "current_data . reset ( generateTimestamp ( ) , current ) ;"}
{"commit_tokens": ["Changed", "thrown", "exception", "in", "Javadoc", "in", "FileInStreamIntegrationTest"], "add_tokens": "* @ throws TachyonException", "del_tokens": "* @ throws TException"}
{"commit_tokens": ["Set", "isInEditMode", "(", ")", "to", "true", "#", "9"], "add_tokens": "@ Override public boolean isInEditMode ( ) { return true ; }", "del_tokens": ""}
{"commit_tokens": ["Added", "a", "super", ".", "shutdown", "(", ")", "so", "that", "it", "unexports", "the", "RMI", "object", "as", "well"], "add_tokens": "super . shutdown ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "unused", "local", "variable"], "add_tokens": "", "del_tokens": "VariableScope scope = compileStack . getScope ( ) ;"}
{"commit_tokens": ["LPS", "-", "61779", "Fix", "condition"], "add_tokens": "if ( includeSpecifiedOrganization ) {", "del_tokens": "if ( ! includeSpecifiedOrganization ) {"}
{"commit_tokens": ["Put", "accidentally", "deleted", "LF", "in", "place"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["default", "focused", "control", "is", "OK", "button"], "add_tokens": "return getRootPane ( ) . getDefaultButton ( ) ;", "del_tokens": "return myFileList ;"}
{"commit_tokens": ["remove", "unnecessary", "subclassing", "PsiClass", "in", "marker", "interface"], "add_tokens": "public interface JetJavaMirrorMarker {", "del_tokens": "import com . intellij . psi . PsiClass ; public interface JetJavaMirrorMarker extends PsiClass {"}
{"commit_tokens": ["Fixed", "the", "CS", "error", "of", "camel", "-", "core"], "add_tokens": "private static final class MyStuff {", "del_tokens": "private static class MyStuff {"}
{"commit_tokens": ["Fixes", "license", "header"], "add_tokens": "/ *", "del_tokens": "/ * *"}
{"commit_tokens": ["Ignore", "stochastic", "GBM", "JUnit", "for", "now", "."], "add_tokens": "@ Ignore", "del_tokens": ""}
{"commit_tokens": ["Fix", "wrong", "intent", "being", "passed", "in", "PhoneWindowManager", "."], "add_tokens": "startActivityAsUser ( intent , UserHandle . CURRENT ) ;", "del_tokens": "startActivityAsUser ( mHomeIntent , UserHandle . CURRENT ) ;"}
{"commit_tokens": ["fire", "file", "statuses", "changed", "event", "after", "adding", "ignored", "files", "(", "IDEADEV", "-", "16670", ")"], "add_tokens": "FileStatusManager . getInstance ( getProject ( ) ) . fileStatusesChanged ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "throws", "signature"], "add_tokens": "protected abstract void run ( ) throws Failure , Exception ;", "del_tokens": "protected abstract void run ( ) throws UnloggedFailure , Failure , Exception ;"}
{"commit_tokens": ["Removed", "unnecessary", "@", "SuppressWarnings"], "add_tokens": "", "del_tokens": "@ SuppressWarnings ( \" unused \" )"}
{"commit_tokens": ["Fix", "masking", "of", "LockClientStoppedException", "during", "OperationFacade", ".", "unregisterExecutingQuery"], "add_tokens": "", "del_tokens": "statement . assertOpen ( ) ;"}
{"commit_tokens": ["remove", "unnecessary", "import"], "add_tokens": "", "del_tokens": "import tachyon . conf . MasterConf ;"}
{"commit_tokens": ["removed", "some", "compiler", "warnings"], "add_tokens": "@ SuppressWarnings ( \" unchecked \" )", "del_tokens": ""}
{"commit_tokens": ["simplified", "dbget", "."], "add_tokens": "return ( DBObject ) get ( ) ;", "del_tokens": "DBObject o = ( DBObject ) get ( ) ; return o ;"}
{"commit_tokens": ["Create", "the", "history", "table", "for", "new", "users"], "add_tokens": "History . TABLE ,", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "55603", "-", "Remove", "unnecessary", "code", "from", "PortalImpl", ".", "getHost", "(", ")"], "add_tokens": "", "del_tokens": "else { host = null ; }"}
{"commit_tokens": ["LPS", "-", "54662", "Do", "not", "use", "a", "new", "thread", "pool"], "add_tokens": "compiler . disableThreads ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "crash", "when", "doing", "conferencing", "over", "Wi", "-", "Fi"], "add_tokens": "if ( mCallAudioState = = null ) { return null ; }", "del_tokens": ""}
{"commit_tokens": ["Guarding", "moved", "pass", "CheckRegExp", "with", "skipNonTranspilationPasses", "flag", "."], "add_tokens": "if ( options . computeFunctionSideEffects & & ! options . skipNonTranspilationPasses ) {", "del_tokens": "if ( options . computeFunctionSideEffects ) {"}
{"commit_tokens": ["Don", "t", "convert", "MIME", "content", "-", "type", "headers", "to", "lower", "case", "as", "this", "seems", "to", "cause", "problems", "."], "add_tokens": "return contentType ;", "del_tokens": "return contentType . toLowerCase ( ) ;"}
{"commit_tokens": ["allow", "Locker", "configuration"], "add_tokens": "public Locker ( boolean spin )", "del_tokens": "protected Locker ( boolean spin )"}
{"commit_tokens": ["Fixed", "findbugs", "issue"], "add_tokens": "private static final class GcMetrics {", "del_tokens": "private final class GcMetrics {"}
{"commit_tokens": ["Refresh", "action", "bar", "title", "in", "FolderList", "when", "unread", "count", "was", "calculated"], "add_tokens": "mHandler . refreshTitle ( ) ;", "del_tokens": "super . accountStatusChanged ( account , stats ) ;"}
{"commit_tokens": ["updated", "study", "project", "name"], "add_tokens": "return \" Learn Python \" ;", "del_tokens": "return \" Study project \" ;"}
{"commit_tokens": ["End", "handle", "disappears", "when", "the", "selection", "is", "short", "."], "add_tokens": "return isPositionVisible ( mPositionX + mHotspotX + getHorizontalOffset ( ) , mPositionY ) ;", "del_tokens": "return isPositionVisible ( mPositionX + mHotspotX , mPositionY ) ;"}
{"commit_tokens": ["LPS", "-", "50963", "add", "javadoc", "with", "version", "in", "which", "it", "was", "deprecated"], "add_tokens": "/ * * * @ deprecated As of 7 . 0 . 0 * /", "del_tokens": ""}
{"commit_tokens": ["Add", "an", "assert", "to", "RowDataResolver", "#", "getData", "(", ")"], "add_tokens": "assert ! replies . isEmpty ( ) ;", "del_tokens": ""}
{"commit_tokens": ["don", "t", "return", "null", "network", "."], "add_tokens": "return network ;", "del_tokens": "return currentNetwork ;"}
{"commit_tokens": ["Fix", "possible", "resource", "leak", "."], "add_tokens": "} finally {", "del_tokens": ""}
{"commit_tokens": ["enable", "dan", "s", "new", "resync", "accounts", "on", "reconnect", "code", "for", "push"], "add_tokens": "if ( mConnection ! = oldConnection )", "del_tokens": "if ( false & & mConnection ! = oldConnection )"}
{"commit_tokens": ["adjusting", "the", "DocsGenerator"], "add_tokens": "super ( title , \" docs \" ) ;", "del_tokens": "super ( \" docs \" , title ) ;"}
{"commit_tokens": ["Fix", "the", "typo", "Costin", "spotted"], "add_tokens": "public static interface Dynamic", "del_tokens": "public static interface Dynmaic"}
{"commit_tokens": ["fixed", "unittest", "producer"], "add_tokens": "else return true ;", "del_tokens": ""}
{"commit_tokens": ["Hide", "field", "packer", "."], "add_tokens": "/ * * * @ hide * * * /", "del_tokens": ""}
{"commit_tokens": ["Add", "VisibleForTesting", "to", "a", "constant"], "add_tokens": "@ VisibleForTesting", "del_tokens": ""}
{"commit_tokens": ["Default", "update", "notifications"], "add_tokens": "cbNotify . setChecked ( true ) ;", "del_tokens": "cbNotify . setChecked ( false ) ;"}
{"commit_tokens": ["start", "the", "damned", "thread"], "add_tokens": "} ) . start ( ) ;", "del_tokens": "} ) ;"}
{"commit_tokens": ["Removed", "dummy", "code", "that", "was", "breaking", "the", "tests", "."], "add_tokens": "", "del_tokens": "nearby . removeBadge ( ) ;"}
{"commit_tokens": ["removed", "dev", "import", "."], "add_tokens": "", "del_tokens": "import com . mongodb . impl . * ;"}
{"commit_tokens": ["Save", "existing", "post", "content", "even", "if", "we", "have", "no", "images", "in", "the", "post", "."], "add_tokens": "content = postContentEditable . toString ( ) ;", "del_tokens": "content = postContentEditable . toString ( ) ;"}
{"commit_tokens": ["bump", "the", "version", "in", "Version", ".", "java"], "add_tokens": "public static final String VERSION = \" 0 . 2 . 1 - SNAPSHOT \" ;", "del_tokens": "public static final String VERSION = \" 0 . 2 - SNAPSHOT \" ;"}
{"commit_tokens": ["Prohibit", "ticket", "updates", "for", "empty", "repositories"], "add_tokens": "& & repository . hasCommits", "del_tokens": ""}
{"commit_tokens": ["remove", "orientation", "spam"], "add_tokens": "/ / Log . i ( TAG , \" Orientation not found \" ) ;", "del_tokens": "Log . i ( TAG , \" Orientation not found \" ) ;"}
{"commit_tokens": ["Removed", "some", "necessary", "javadoc"], "add_tokens": "", "del_tokens": "* @ return"}
{"commit_tokens": ["Disable", "one", "of", "the", "ExternalJavacIntegrationTest", "test", "cases", "."], "add_tokens": "assumeTrue ( Platform . detect ( ) ! = Platform . LINUX ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "config", "option", "loading", "for", "TitanFactory", "Builder"], "add_tokens": "ReflectiveConfigOptionLoader . loadOnce ( ) ;", "del_tokens": ""}
{"commit_tokens": ["removing", "unimplemented", "method", "activeScanSessionUrls", "from", "ClientApi"], "add_tokens": "", "del_tokens": "public void activeScanSessionUrls ( String regex ) { }"}
{"commit_tokens": ["Disable", "optimized", "readers", "by", "default"], "add_tokens": "private boolean optimizedReaderEnabled ;", "del_tokens": "private boolean optimizedReaderEnabled = true ;"}
{"commit_tokens": ["Don", "t", "resolve", "the", "base", "path", "before", "passing", "it", "to", "the", "project", "generator", "."], "add_tokens": "basePath ,", "del_tokens": "projectFilesystem . getPathForRelativePath ( basePath ) ,"}
{"commit_tokens": ["Fix", "endless", "looping", "in", "layout", "."], "add_tokens": "if ( ! animating & & animation = = null ) {", "del_tokens": "if ( ! animating ) {"}
{"commit_tokens": ["Fix", "the", "marking", "of", "restricted", "network", "requests"], "add_tokens": "case NetworkCapabilities . NET_CAPABILITY_NOT_RESTRICTED : / / there by default", "del_tokens": ""}
{"commit_tokens": ["Mouse", "click", "behavior", "#", "2755"], "add_tokens": "hide ( ) ;", "del_tokens": "/ / hide ( ) ;"}
{"commit_tokens": ["make", "TypeSpec", ".", "Kind", "enum", "public"], "add_tokens": "public enum Kind {", "del_tokens": "private enum Kind {"}
{"commit_tokens": ["fix", "create", "a", "nearcache", "object", "before", "reading", "into"], "add_tokens": "private NearCacheConfig nearCacheConfig = new NearCacheConfig ( ) ;", "del_tokens": "private NearCacheConfig nearCacheConfig = null ;"}
{"commit_tokens": ["Removed", "unnecessary", "import", "."], "add_tokens": "", "del_tokens": "import android . content . ContentResolver ;"}
{"commit_tokens": ["Added", "null", "pointer", "check", "."], "add_tokens": "return ( mAdapter = = null ) ? null : mAdapter . mFolders ;", "del_tokens": "return mAdapter . mFolders ;"}
{"commit_tokens": ["missed", "return"], "add_tokens": "return ;", "del_tokens": ""}
{"commit_tokens": ["PY", "-", "1065", "Reformat", "and", "auto", "-", "import", "do", "not", "respect", "space", "-", "after", "-", "comma", "preference", "in", "multiline", "imports"], "add_tokens": "public void _testSpaceAfterCommaWrappedLine ( ) { / / PY - 1065", "del_tokens": "public void testSpaceAfterCommaWrappedLine ( ) { / / PY - 1065"}
{"commit_tokens": ["stop", "the", "session"], "add_tokens": "getSession ( ) . stop ( ) ;", "del_tokens": "/ / send ( Api . HALT ) ;"}
{"commit_tokens": ["Reduce", "visibility"], "add_tokens": "class MessagePart {", "del_tokens": "public class MessagePart {"}
{"commit_tokens": ["The", "/", "green", "command", "should", "now", "only", "affect", "dirt", "on", "the", "top", "layer", "."], "add_tokens": "+ affected ; break ;", "del_tokens": ""}
{"commit_tokens": ["Whoops", "fix", "installing", "."], "add_tokens": "false ) ) {", "del_tokens": "true ) ) {"}
{"commit_tokens": ["Fix", "loadUrl", "(", ")", "for", "Snacktory", "."], "add_tokens": "mGetPageAsTextTask . execute ( urlAsString ) ;", "del_tokens": "mGetPageAsTextTask . execute ( getUrl ( ) . toString ( ) ) ;"}
{"commit_tokens": ["Removed", "MESSAGE_BIND_PROFILE_SERVICE", "messages", "on", "unbind"], "add_tokens": "mHandler . removeMessages ( MESSAGE_BIND_PROFILE_SERVICE ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "visibility", "of", "Prober", "to", "public"], "add_tokens": "public interface Prober {", "del_tokens": "interface Prober {"}
{"commit_tokens": ["actually", "fix", "CSV", "export", "on", "stream", "results", "filter", "on", "that", "stream"], "add_tokens": "return routes . StreamSearchController . exportAsCsv (", "del_tokens": "return routes . SearchController . exportAsCsv ("}
{"commit_tokens": ["reduce", "RAM", "usage", "in", "tarjan", "algorithm", "via", "trimToSize"], "add_tokens": "component . trimToSize ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Stops", "bad", "behavior"], "add_tokens": "", "del_tokens": "if ( logger . isLoggable ( Level . FINE ) ) logger . fine ( \" Request params : \" + getParamList ( true ) ) ;"}
{"commit_tokens": ["Add", "missing", "invalidation", "check", "to", "drawable", "cache"], "add_tokens": "return Configuration . needNewResources ( configChanges , entry . getChangingConfigurations ( ) ) ;", "del_tokens": "return false ;"}
{"commit_tokens": ["changed", "param", "name", "to", "match", "checkstyle", "naming", "rules"], "add_tokens": "public AbstractCheckTestCase ( String aName ) super ( aName ) ;", "del_tokens": "public AbstractCheckTestCase ( String s ) super ( s ) ;"}
{"commit_tokens": ["Fix", "compilation", "(", "use", "the", "new", "UserDictionary", ".", "open", ")"], "add_tokens": "return UserDictionary . open ( reader ) ;", "del_tokens": "return new UserDictionary ( reader ) ;"}
{"commit_tokens": ["Fix", "compilation", "problem"], "add_tokens": "public void setupProcedures ( Procedures procedures ) throws KernelException", "del_tokens": "public void registerProcedures ( Procedures procedures ) throws KernelException"}
{"commit_tokens": ["Updated", "unit", "test", "for", "CacheConfig", "class", "."], "add_tokens": "", "del_tokens": "cacheManager . destroyCache ( cacheName ) ;"}
{"commit_tokens": ["correct", "null", "+", "String", "to", "not", "throw", "an", "NPE"], "add_tokens": "public Object plus ( String s ) { return \" null \" + s ; }", "del_tokens": ""}
{"commit_tokens": ["Added", "default", "culling", "implementation", "to", "RectangularShape", "."], "add_tokens": "return ! RectangularShapeCollisionChecker . isVisible ( pCamera , this ) ;", "del_tokens": "return false ;"}
{"commit_tokens": ["Add", "javadoc", "saying", "that", "wake", "locks", "are", "ref", "counted", "by", "default", "."], "add_tokens": "* < p > Wake locks are reference counted by default . *", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "17831", "Fix", "compile", "error"], "add_tokens": "import junit . framework . Test ;", "del_tokens": ""}
{"commit_tokens": ["HHH", "-", "6297", "remove", "legacy", "cache", "api"], "add_tokens": "return Timestamper . ONE_MS * 600000 ;", "del_tokens": "return Timestamper . ONE_MS * 60000 ;"}
{"commit_tokens": ["Remove", "unnecessary", "unused", "suppression"], "add_tokens": "", "del_tokens": "@ SuppressWarnings ( \" unused \" )"}
{"commit_tokens": ["Add", "mnemonic", "to", "Force", "checkout", "/", "merge"], "add_tokens": "super ( \" & Force \" + capitalize ( operationTitle ) ) ;", "del_tokens": "super ( \" Force \" + capitalize ( operationTitle ) ) ;"}
{"commit_tokens": ["Fix", "mining", "wells", "not", "put", "two", "or", "more", "stacks", "in", "pipe"], "add_tokens": "continue ;", "del_tokens": "return ;"}
{"commit_tokens": ["Call", "WebView", "#", "freeMemory", "before", "collecting", "memory", "information"], "add_tokens": "mWebView . freeMemory ( ) ;", "del_tokens": "mWebView . clearCache ( true ) ;"}
{"commit_tokens": ["Fixed", "non", "-", "removing", "bug", "in", "PersistentMultiMaplet", "(", "jps", "/", "incremental", ")", "."], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Removed", "@", "Overrides", "from", "method", "that", "implements", "interface", "instead", "of", "overriding", "superclass", "to", "resolve", "Java", "1", ".", "5", "error"], "add_tokens": "", "del_tokens": "@ Override"}
{"commit_tokens": ["Avoid", "needless", "nullpointers", "."], "add_tokens": "return ( mName = = null ? \" \" : mName ) ;", "del_tokens": "return mName ;"}
{"commit_tokens": ["help", "ID", "(", "PY", "-", "4107", ")"], "add_tokens": "return \" python . reference . introduceVariable \" ;", "del_tokens": "return \" refactoring . introduceVariable \" ;"}
{"commit_tokens": ["Add", "missing", "mechanism", "-", "too", "-", "weak", "SASL", "Error"], "add_tokens": "mechanism_too_weak ,", "del_tokens": ""}
{"commit_tokens": ["removed", "unused", "import"], "add_tokens": "", "del_tokens": "import com . hazelcast . impl . ClusterOperation ;"}
{"commit_tokens": ["help", "IDs", "(", "PY", "-", "1334", ")"], "add_tokens": "@ Override protected String getHelpId ( ) { return \" create_new_project_dialog \" ; }", "del_tokens": ""}
{"commit_tokens": ["Added", "invalidateMaster", "method", "to", "control", "that", "behaviour", "from", "outside"], "add_tokens": "void invalidateMaster ( ) ;", "del_tokens": ""}
{"commit_tokens": ["compiler", "should", "form", "-", "source", "for", "ModuleChunk", "not", "project", "language", "level"], "add_tokens": "LanguageLevel moduleLanguageLevel = module . getEffectiveLanguageLevel ( ) ;", "del_tokens": "LanguageLevel moduleLanguageLevel = module . getLanguageLevel ( ) ;"}
{"commit_tokens": ["LPS", "-", "66130", "Remove", "old", "property"], "add_tokens": "typeSettingsProperties . remove ( oldStagingPortletId ) ;", "del_tokens": ""}
{"commit_tokens": ["Make", "TemplateResource", "public", "(", "to", "make", "it", "reusable", "from", "other", "frameworks", ")"], "add_tokens": "public static class TemplateResource {", "del_tokens": "static class TemplateResource {"}
{"commit_tokens": ["formatting", "change"], "add_tokens": "public static class InvalidAwaitCall", "del_tokens": "public static class InvalidAwaitCall"}
{"commit_tokens": ["Removed", "unused", "method"], "add_tokens": "", "del_tokens": "public boolean isCacheable ( ) { return false ; }"}
{"commit_tokens": ["Reset", "languageMode", "to", "languageIn", "at", "the", "beginning", "of", "processNewScript", "(", ")"], "add_tokens": "languageMode = options . getLanguageIn ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "an", "obsolete", "import", "for", "performance", "tests", "."], "add_tokens": "", "del_tokens": "import static android . test . suitebuilder . TestPredicates . REJECT_PERFORMANCE ;"}
{"commit_tokens": ["Updated", "value", "for", "drag", "distance"], "add_tokens": "private float pullPastSlack = 150f ;", "del_tokens": "private float pullPastSlack = 50f ;"}
{"commit_tokens": ["LPS", "-", "38392", "Fix", "my", "bad", "SF"], "add_tokens": "themeDisplay . setShowSignOutIcon ( showSignOutIcon ) ;", "del_tokens": "themeDisplay . setShowSignOutIcon ( themeDisplay . isImpersonated ( ) ) ;"}
{"commit_tokens": ["remove", "debug", "line"], "add_tokens": "", "del_tokens": "new Exception ( \" setting blend mode to \" + mode ) . printStackTrace ( ) ;"}
{"commit_tokens": ["reset", "User", "on", "token", "change"], "add_tokens": "setUser ( \" \" ) ;", "del_tokens": ""}
{"commit_tokens": ["Code", "style", "settings", "code", "refactoring", "/", "clean", "up"], "add_tokens": "setPanelLanguage ( langSelector . getLanguage ( ) ) ;", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "65093", "deprecate", "destination", "name"], "add_tokens": "@ Deprecated", "del_tokens": ""}
{"commit_tokens": ["Hide", "FingerprintManagerCompatApi23"], "add_tokens": "* @ hide", "del_tokens": ""}
{"commit_tokens": ["AccessibilityNodeInfo", "refresh", "returns", "a", "stale", "state", "."], "add_tokens": "return refresh ( true ) ;", "del_tokens": "return refresh ( false ) ;"}
{"commit_tokens": ["Fix", "comments"], "add_tokens": "private RuntimeConstants ( ) { } / / prevent instantiation", "del_tokens": ""}
{"commit_tokens": ["add", "getRegion", "to", "PolygonSprite"], "add_tokens": "public PolygonRegion getRegion ( ) { return region ; }", "del_tokens": ""}
{"commit_tokens": ["Updated", "TSViterator", "and", "created", "an", "asrelations", "processor"], "add_tokens": "public enum SentenceField {", "del_tokens": "enum SentenceField {"}
{"commit_tokens": ["Revert", "change", "with", "default", "location"], "add_tokens": "public static final int VERSION_DEFAULTLOCATION_CHANGED = Integer . MAX_VALUE ;", "del_tokens": "public static final int VERSION_DEFAULTLOCATION_CHANGED = 19 ;"}
{"commit_tokens": ["fixed", "var", "eval", "presentation", "with", "errors", "(", "PY", "-", "2671", ")"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Don", "t", "add", "@", "to", "an", "empty", "filename", "for", "svn", "(", "causing", "an", "error", ";", "-", ")", ")"], "add_tokens": "if ( name . length ( ) = = 0 ) { return name ; }", "del_tokens": ""}
{"commit_tokens": ["Now", "prints", "an", "error", "message", "if", "permission", "is", "not", "available", "."], "add_tokens": "} else { player . printError ( \" You don ' t have permission for this command . \" ) ;", "del_tokens": ""}
{"commit_tokens": ["delete", "all", "files", "from", "the", "map", "during", "reinitialization"], "add_tokens": "IOUtil . deleteAllFilesStartingWith ( myFile ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "copy", "-", "pasted", "comment", "."], "add_tokens": "* Sets ECMAScript version to use .", "del_tokens": "* Sets how goog . tweak calls are processed ."}
{"commit_tokens": ["Remove", "unused", "field", "."], "add_tokens": "", "del_tokens": "public static final String ANNOTATION_PROCESSORS = \" annotation_processors \" ;"}
{"commit_tokens": ["preferred", "focused", "component"], "add_tokens": "@ Override public JComponent getPreferredFocusedComponent ( ) { return myTree ; }", "del_tokens": ""}
{"commit_tokens": ["revert", "circular", "reference", "in", "generics"], "add_tokens": "public class DBMaker < DBMakerT extends DBMaker < DBMakerT > > {", "del_tokens": "public class DBMaker < DBMakerT extends DBMaker > {"}
{"commit_tokens": ["ACT", "-", "66", "added", "getDeploymentId", "and", "getStartFormResourceKey", "to", "ProcessDefinition"], "add_tokens": "String getDeploymentId ( ) ; String getStartFormResourceKey ( ) ;", "del_tokens": ""}
{"commit_tokens": ["disposing", "tree", "builder"], "add_tokens": "myBuilder . dispose ( ) ;", "del_tokens": ""}
{"commit_tokens": ["removed", "extraneous", "whitespace", "from", "pull", "request"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Implement", "PrestoConnection", ".", "getTransactionIsolation"], "add_tokens": "return TRANSACTION_NONE ;", "del_tokens": "throw new UnsupportedOperationException ( \" getTransactionIsolation \" ) ;"}
{"commit_tokens": ["changed", "createTempDir", "to", "protected", "so", "it", "can", "be", "overriden", "by", "sub", "classes"], "add_tokens": "protected File createTempDir ( ) {", "del_tokens": "private static File createTempDir ( ) {"}
{"commit_tokens": ["Excel", "import", "sometimes", "drops", "last", "row", "of", "data", "."], "add_tokens": "if ( nextRow > lastRow ) {", "del_tokens": "if ( nextRow > = lastRow ) {"}
{"commit_tokens": ["LPS", "-", "38482", "Add", "missing", "@", "Override"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["Revert", "Invalidating", "a", "TE", "should", "not", "cause", "the", "pipe", "to", "drop"], "add_tokens": "item . hoverStart = value ;", "del_tokens": "item . field_804_d = value ;"}
{"commit_tokens": ["Avoid", "infinite", "loop"], "add_tokens": "break ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "build"], "add_tokens": "public void captivePortalCheckComplete ( ) { / / not implemented } @ Override", "del_tokens": ""}
{"commit_tokens": ["Now", "closes", "ReadableByteChannel", "after", "it", "has", "been", "read", "."], "add_tokens": "channel . close ( ) ;", "del_tokens": ""}
{"commit_tokens": ["removed", "extra", "chars"], "add_tokens": "* /", "del_tokens": "* / gi"}
{"commit_tokens": ["Removed", "system", "out", "."], "add_tokens": "", "del_tokens": "System . out . println ( \" Created relationship type \" + name ) ;"}
{"commit_tokens": ["Remove", "unused", "java_test", "target", "specific", "override", "for", "the", "java", "agent", "."], "add_tokens": "", "del_tokens": "public Optional < String > pathToJavaAgent ;"}
{"commit_tokens": ["Copy", "premultipliedAlpha", "in", "copy", "constructor"], "add_tokens": "premultipliedAlpha = emitter . premultipliedAlpha ;", "del_tokens": ""}
{"commit_tokens": ["@", "Deprecated", "does", "not", "have", "effect", "in", "Groovy"], "add_tokens": "redirect ( ) . modifiers = modifiers ;", "del_tokens": "this . modifiers = modifiers ;"}
{"commit_tokens": ["reset", "current", "scheme", "panel", "after", "import", "if", "current", "scheme", "was", "updated"], "add_tokens": "reset ( ) ;", "del_tokens": "/ / do nothing"}
{"commit_tokens": ["Fix", "single", "energy", "pulse"], "add_tokens": "if ( ! isActive & & hasPulsed ) hasPulsed = false ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "unneeded", "exception", "signature", "from", "unit", "test", "."], "add_tokens": "public void testClassIsMissing ( )", "del_tokens": "public void testClassIsMissing ( ) throws ClassNotFoundException"}
{"commit_tokens": ["Change", "the", "SingleFilePageSwapperFactory", "implementation", "name", "from", "striped", "to", "single", "because", "we", "might", "want", "to", "stripe", "over", "files", "later"], "add_tokens": "return \" single \" ;", "del_tokens": "return \" striped \" ;"}
{"commit_tokens": ["java", "6", "compile", "error"], "add_tokens": "", "del_tokens": "@ Override"}
{"commit_tokens": ["modify", "symbol"], "add_tokens": "symbol", "del_tokens": ""}
{"commit_tokens": ["Added", "javadoc"], "add_tokens": "* IndexWriter . isClosed is package local .", "del_tokens": "*"}
{"commit_tokens": ["kill", "subprocess", "when", "ShellSpout", ".", "die", "(", ")", "called"], "add_tokens": "_process . destroy ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Add", "file", "path", "to", "CorruptSSTableException", "message"], "add_tokens": "super ( \" Corrupted : \" + path , cause ) ;", "del_tokens": "super ( cause ) ;"}
{"commit_tokens": ["Synchronize", "isClosed", "."], "add_tokens": "public synchronized boolean isClosed ( ) {", "del_tokens": "public boolean isClosed ( ) {"}
{"commit_tokens": ["Added", "bottom", "padding", "in", "textview", "s", "focused", "rectangle"], "add_tokens": "int paddingBottom = getExtendedPaddingBottom ( ) ; r . bottom + = paddingBottom ;", "del_tokens": ""}
{"commit_tokens": ["reinstated", "setting", "of", "mContext", "variable", "in", "constructor"], "add_tokens": "mContext = context ;", "del_tokens": ""}
{"commit_tokens": ["Added", "Cython", "lexer", "test"], "add_tokens": "CythonLexerTest . class ,", "del_tokens": ""}
{"commit_tokens": ["Also", "use", "the", "parent", "constructor", "here", "."], "add_tokens": "super ( rootCause ) ;", "del_tokens": "this ( rootCause . getLocalizedMessage ( ) , rootCause ) ;"}
{"commit_tokens": ["PartitionManager", "should", "commit", "latest", "offset", "before", "close"], "add_tokens": "commit ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "default", "focused", "element", "for", "credentials", "dialog", "opening", "(", "password", "is", "focused", "if", "username", "is", "disabled", ")"], "add_tokens": "return myUserNameText . isEnabled ( ) ? myUserNameText : myPasswordText ;", "del_tokens": "return myUserNameText ;"}
{"commit_tokens": ["Make", "SslHandshakeCompletionEvent", "constructor", "public"], "add_tokens": "public SslHandshakeCompletionEvent ( Throwable cause ) {", "del_tokens": "SslHandshakeCompletionEvent ( Throwable cause ) {"}
{"commit_tokens": ["Disable", "broken", "test"], "add_tokens": "@ Test ( enabled = false ) / / TODO fix this test", "del_tokens": "@ Test"}
{"commit_tokens": ["Set", "cache", "dirty", "when", "re", "-", "create", "the", "cache", "bitmap"], "add_tokens": "mCacheDirty = true ;", "del_tokens": ""}
{"commit_tokens": ["remove", "extra", "pop"], "add_tokens": "", "del_tokens": "typeStack . pop ( type1 , type2 ) ;"}
{"commit_tokens": ["forget", "regexp", "in", "find", "model", "(", "IDEA", "-", "90278", ")"], "add_tokens": "header . setRegexp ( false ) ;", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "56932", "missed", "this"], "add_tokens": "_scroll = false ;", "del_tokens": ""}
{"commit_tokens": ["Don", "t", "lowercase", "word", "vectors", "by", "default"], "add_tokens": "public boolean lowercaseWordVectors = false ;", "del_tokens": "public boolean lowercaseWordVectors = true ;"}
{"commit_tokens": ["Actually", "store", "the", "newly", "computed", "deceleration", "."], "add_tokens": "mDeceleration = computeDeceleration ( friction ) ;", "del_tokens": "computeDeceleration ( friction ) ;"}
{"commit_tokens": ["make", "CfInfo", "a", "static", "inner", "class"], "add_tokens": "protected static class CfInfo", "del_tokens": "protected class CfInfo"}
{"commit_tokens": ["remove", "import"], "add_tokens": "", "del_tokens": "import java . util . List ;"}
{"commit_tokens": ["enables", "classloading", "again"], "add_tokens": "/ / type may be resolved through the classloader before return type . isResolved ( ) ;", "del_tokens": "return false ;"}
{"commit_tokens": ["Stop", "Eclipse", "complaining"], "add_tokens": "/ / NOOP", "del_tokens": ""}
{"commit_tokens": ["Can", "t", "export", "a", "movie", "-", "Error", "returned", "from", "OMX", "API", "in", "ducati"], "add_tokens": "level = native_get_videoeditor_export_level ( vidCodec ) ;", "del_tokens": "level = native_get_videoeditor_export_profile ( vidCodec ) ;"}
{"commit_tokens": ["fix", "a", "numeric", "equality", "bug", "spotted", "by", "intellij"], "add_tokens": "if ( quietStarts . equals ( quietEnds ) )", "del_tokens": "if ( quietStarts = = quietEnds )"}
{"commit_tokens": ["Treat", "hardware", "keyboard", "Fn", "key", "as", "a", "modifier", "key", "."], "add_tokens": "case KEYCODE_FUNCTION : / / Ignore the function key . return ;", "del_tokens": ""}
{"commit_tokens": ["Return", "the", "view", "even", "when", "timing", "out", "in", "waitForView"], "add_tokens": "return view ;", "del_tokens": "return null ;"}
{"commit_tokens": ["Source", "formatter", "had", "trailing", "blank", "line"], "add_tokens": "excluded =", "del_tokens": "excluded ="}
{"commit_tokens": ["Fix", "bug", "in", "last", "commit", "that", "caused", "block", "to", "not", "break", "."], "add_tokens": "this . newSpeed = original ;", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "50178", "Fix", "a", "presumably", "copy", "-", "paste", "issue"], "add_tokens": "if ( overrideAllAssetTagNames ! = null ) {", "del_tokens": "if ( overrideAllAssetCategoryIds ! = null ) {"}
{"commit_tokens": ["Fixed", "serialization", "/", "deserialization", "."], "add_tokens": "public RemoteServerConfiguration ( ) { }", "del_tokens": ""}
{"commit_tokens": ["Remove", "unnecessary", "whitespace"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Fix", "Xposed", "not", "enabled"], "add_tokens": "return Util . class . getName ( ) ;", "del_tokens": "return \" biz . bokhorst . xprivacy . Util \" ;"}
{"commit_tokens": ["noticed", "we", "were", "calling", "HelpshiftHelper", ".", "init", "twice"], "add_tokens": "", "del_tokens": "HelpshiftHelper . init ( this ) ;"}
{"commit_tokens": ["Recognize", "API", "25", "as", "Nougat"], "add_tokens": "case 25 :", "del_tokens": ""}
{"commit_tokens": ["Revert", "LPS", "-", "44526", "New", "User", "does", "not", "have", "administration", "permissions", "in", "New", "Site", "when", "made", "Site", "Administrator", "/", "Site", "Owner"], "add_tokens": "", "del_tokens": "clearCache ( userGroupRole ) ;"}
{"commit_tokens": ["Make", "MarkupBuilder", ".", "getMkp", "(", ")", "return", "MarkupBuilderHelper", "instead", "of", "Object"], "add_tokens": "public MarkupBuilderHelper getMkp ( ) {", "del_tokens": "public Object getMkp ( ) {"}
{"commit_tokens": ["added", "missing", "imports"], "add_tokens": "import java . io . UnsupportedEncodingException ; import java . net . URLDecoder ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "a", "bug", "in", "Color", "where", "alpha", "changes", "were", "not", "applied", "when", "setting", "using", "setChanging", "(", "float", "float", "float", "float", ")", "."], "add_tokens": "this . mAlpha = pAlpha ;", "del_tokens": ""}
{"commit_tokens": ["Update", "the", "ant", "example", "to", "contain", "an", "error"], "add_tokens": "/ / Dead exception new Exception ( ) ;", "del_tokens": "if ( args . length < 1 ) ; throw new IllegalArgumentException ( \" Missing required argument \" ) ;"}
{"commit_tokens": ["I", "inadvertently", "passed", "the", "wrong", "source", "in", "the", "compile", "-", "time", "refactoring", "."], "add_tokens": "handleMissingBinding ( key ) ;", "del_tokens": "handleMissingBinding ( this , key ) ;"}
{"commit_tokens": ["Turn", "off", "debug", "flag"], "add_tokens": "public static final boolean DEBUG = false ;", "del_tokens": "public static final boolean DEBUG = true ;"}
{"commit_tokens": ["Have", "getPhoneType", "return", "PHONE_TYPE_NONE", "for", "non", "-", "voice", "capable", "devices", "."], "add_tokens": "if ( ! isVoiceCapable ( ) ) { return PHONE_TYPE_NONE ; }", "del_tokens": ""}
{"commit_tokens": ["Wrap", "the", "root", "cause", "rather", "than", "just", "using", "the", "message", "."], "add_tokens": "throw new RuntimeException ( e ) ;", "del_tokens": "throw new RuntimeException ( e . getMessage ( ) ) ;"}
{"commit_tokens": ["Test", "awaits", "Lucene", "snapshot", "upgrade"], "add_tokens": "@ AwaitsFix ( bugUrl = \" https : / / github . com / elastic / elasticsearch / issues / 16373 \" )", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "37805", "Remove", "unnecessary", "call", "to", "parent", "class", "constructor"], "add_tokens": "", "del_tokens": "super ( ) ;"}
{"commit_tokens": ["Clicking", "on", "the", "new", "mail", "notification", "gets", "you", "to", "the", "default", "folder", "if", "any", "else", "to", "the", "folder", "list"], "add_tokens": "else { intent . putExtra ( EXTRA_STARTUP , true ) ; }", "del_tokens": ""}
{"commit_tokens": ["Hardcoding", "indexmlock", "to", "true"], "add_tokens": "setAutoLock = true ; / / remove this !", "del_tokens": ""}
{"commit_tokens": ["don", "t", "prompt", "use", "about", "data", "service", ";", "if", "it", "is", "off", "then", "we", "don", "t", "do", "anything"], "add_tokens": "pCursor . close ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Implement", "size", "method", "for", "vector", "class", "."], "add_tokens": "public int size ( ) { return elements . length ; }", "del_tokens": ""}
{"commit_tokens": ["Fixed", "AntennaPod", "auto", "-", "cleanup", "algorithm"], "add_tokens": "return getPerformAutoCleanupArgs ( context , 0 ) ;", "del_tokens": "return 0 ;"}
{"commit_tokens": ["immediately", "update", "todo", "tree", "(", "IDEADEV", "-", "20186", ")"], "add_tokens": "updateTree ( ) ;", "del_tokens": ""}
{"commit_tokens": ["revert", "8e704f627c7b03427ab1b71bb6774292a4a032f2", "because", "more", "appropriate", "fix", "provided", "for", "(", "IDEA", "-", "145290", ")", "-", "added", "missing", "checkbox"], "add_tokens": "", "del_tokens": "OTHER_INDENT_OPTIONS . SMART_TABS = false ;"}
{"commit_tokens": ["Return", "the", "record", "state", "locked"], "add_tokens": "synchronized ( mRecordingStateLock ) { return mRecordingState ; }", "del_tokens": "return mRecordingState ;"}
{"commit_tokens": ["Documented", "minimum", "JUnit", "for", "mockito", "rule"], "add_tokens": "* It requires JUnit at least 4 . 7 .", "del_tokens": ""}
{"commit_tokens": ["Removed", "an", "unused", "stacktrace"], "add_tokens": "", "del_tokens": "new Exception ( \" Something is wrong \" ) . printStackTrace ( ) ;"}
{"commit_tokens": ["Add", "url", "null", "check", "for", "getting", "cached", "file", "."], "add_tokens": "if ( url = = null ) return null ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "bottom", "border", "in", "templates", "lists"], "add_tokens": ". setAsUsualTopToolbar ( )", "del_tokens": ""}
{"commit_tokens": ["Fixing", "bug", "2502522", "-", "Accessibility", "events", "contain", "text", "of", "invisible", "views"], "add_tokens": "if ( ! isShown ( ) ) { return false ; }", "del_tokens": ""}
{"commit_tokens": ["Wait", "the", "end", "of", "ICE", "processing", "to", "process", "session", "-", "accept", "message", "."], "add_tokens": "mediaHandler . getTransportManager ( ) . wrapupConnectivityEstablishment ( ) ;", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "54341", "add", "@", "Override"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["Deprecated", "InitialDirContextFactory"], "add_tokens": "* @ deprecated Use SpringSecurityContextSource instead", "del_tokens": ""}
{"commit_tokens": ["Bug", "4588114", "-", "Make", "GestureDetector", "behave", "nicer", "with", "parallel", "multi", "-", "touch", "detection"], "add_tokens": "mAlwaysInTapRegion = false ; mAlwaysInBiggerTapRegion = false ;", "del_tokens": ""}
{"commit_tokens": ["Actually", "allow", "halide_library", "(", ")", "to", "use", "supported_platforms_regex"], "add_tokens": "if ( ! isPlatformSupported ( cxxPlatform ) ) { return CxxPreprocessorInput . EMPTY ; }", "del_tokens": ""}
{"commit_tokens": ["IDEA", "-", "19061", "Integrate", "the", "Rearranger", "-", "plugin", "into", "core", "-", "IDEA"], "add_tokens": "", "del_tokens": "/ / TODO den implement"}
{"commit_tokens": ["corrected", "a", "typo", "from", "@", "Maxwell1987"], "add_tokens": "bossGroup = null ;", "del_tokens": "workerGroup = null ;"}
{"commit_tokens": ["LPS", "-", "30638", "Executing", "portlet", "struts", "action", "should", "not", "create", "embedded", "portlet"], "add_tokens": "PortletPreferencesLocalServiceUtil . getStrictPreferences (", "del_tokens": "PortletPreferencesLocalServiceUtil . getPreferences ("}
{"commit_tokens": ["Don", "t", "force", "ActionMenuItemView", "to", "use", "textAllCaps"], "add_tokens": "", "del_tokens": "setTransformationMethod ( new AllCapsTransformationMethod ( context ) ) ;"}
{"commit_tokens": ["Fixed", "typo", "."], "add_tokens": "*", "del_tokens": ""}
{"commit_tokens": ["Make", "DayViewFacade", "not", "final"], "add_tokens": "public class DayViewFacade {", "del_tokens": "public final class DayViewFacade {"}
{"commit_tokens": ["Add", "missing", "@", "Override", "annotation"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["Fix", "example", "usage"], "add_tokens": "JSONObject firstEvent = ( JSONObject ) timeline . get ( 0 ) ;", "del_tokens": "JSONObject firstEvent = timeline . get ( 0 ) ;"}
{"commit_tokens": ["Working", "around", "problem", "users", "might", "assign", "custom", "file", "type", "to", "something", "we", "later", "provided", "special", "language", "FT", "for", "."], "add_tokens": "if ( table ! = null & & type instanceof CustomFileType ) {", "del_tokens": "if ( table ! = null ) {"}
{"commit_tokens": ["remove", "unused", "method"], "add_tokens": "", "del_tokens": "public MessageCryptoView getDecryptLayout ( ) { return mCryptoView ; }"}
{"commit_tokens": ["Add", "java", ".", "util", ".", "List", "import", "."], "add_tokens": "import java . util . List ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "errors", "found", "by", "the", "new", "check", "."], "add_tokens": "default : throw new IllegalArgumentException ( \" Unknown type \" + aAST ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "bitmap", "tinting"], "add_tokens": "mTintFilter = updateTintFilter ( mTintFilter , state . mTint , state . mTintMode ) ;", "del_tokens": "updateTintFilter ( mTintFilter , state . mTint , state . mTintMode ) ;"}
{"commit_tokens": ["reset", "stanza", "queue", "when", "resetting", "xmppconnection"], "add_tokens": "mStanzaQueue . clear ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "a", "sentance", "that", "was"], "add_tokens": "* Based on PeepholeSubstituteAlternateSyntax", "del_tokens": "* Based on PeepholeSubstituteAlternateSyntax by"}
{"commit_tokens": ["fixed", "NPE", "in", "Box", ".", "extendToEncompass", "close", "#", "1783"], "add_tokens": "if ( toBeContained = = null | | ! toBeContained . initialized ) {", "del_tokens": "if ( ! toBeContained . initialized ) {"}
{"commit_tokens": ["Suppressed", "the", "invalidFrameRate", "as", "the", "framework", "is", "not", "throwing", "the", "IOException", "anymore", "."], "add_tokens": "@ Suppress", "del_tokens": ""}
{"commit_tokens": ["Fix", "View", "-", ">", "Model", "space", "for", "ViewProjectionMatrix"], "add_tokens": "* The view projection matrix . Converts Model space to Clip / Projection", "del_tokens": "* The view projection matrix . Converts View space to Clip / Projection"}
{"commit_tokens": ["Added", "TOTO", "in", "Text", "class", "to", "use", "CharSequence", "insteaf", "of", "String", "."], "add_tokens": "* TODO Use { @ link CharSequence } instead of { @ link String } .", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "46809", "Add", "a", "line", "break", "since", "we", "re", "about", "to", "manipulate", "the", "var"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["added", "python", "remote", "debug"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["suppress", "warning"], "add_tokens": "@ SuppressWarnings ( \" unused \" )", "del_tokens": ""}
{"commit_tokens": ["Added", "TODO"], "add_tokens": "/ / TODO : define more patterns ( Either , Option , Try and other value objects )", "del_tokens": ""}
{"commit_tokens": ["add", "isPipeRegistered", "for", "mods", "to", "check", "if", "pipe", "-", "id", "already", "taken", "."], "add_tokens": "public static boolean isPipeRegistered ( int key ) { return pipes . containsKey ( key ) ; }", "del_tokens": ""}
{"commit_tokens": ["Handle", "object", "names", "that", "end", "up", "with", "spaces", "around", "them"], "add_tokens": "objectName = objectName . trim ( ) ;", "del_tokens": ""}
{"commit_tokens": ["add", "toString", "(", ")"], "add_tokens": "public String toString ( ) { return sourceString + \" & \" + targetString ; }", "del_tokens": ""}
{"commit_tokens": ["Clarify", "a", "use", "case", "."], "add_tokens": "* The embedder can pass null if not interested in the callback .", "del_tokens": ""}
{"commit_tokens": ["Fix", "show", "call", "."], "add_tokens": "mIsShowing = false ;", "del_tokens": ""}
{"commit_tokens": ["Returning", "the", "defaultCatalogName", "if", "it", "is", "not", "null", "."], "add_tokens": "return defaultCatalogName ;", "del_tokens": "return defaultSchemaName ;"}
{"commit_tokens": ["Consider", "scene", "uninitialized", "after", "destroyScene", "(", ")"], "add_tokens": "mSceneInitialized = false ;", "del_tokens": ""}
{"commit_tokens": ["replace", "path", "separator", "characters"], "add_tokens": "/ / Replace path separator characters to avoid inconsistent paths return displayName . replaceAll ( \" / \" , \" - \" ) ;", "del_tokens": "return displayName ;"}
{"commit_tokens": ["fixed", "maybeClass", "when", "passed", "Class"], "add_tokens": "if ( form instanceof Class ) return ( Class ) form ;", "del_tokens": ""}
{"commit_tokens": ["add", "toString", "(", ")", "to", "GoLightType"], "add_tokens": "return getClass ( ) . getSimpleName ( ) + \" { \" + myElement + \" } \" ;", "del_tokens": "return null ;"}
{"commit_tokens": ["Remove", "an", "outdated", "comment"], "add_tokens": "", "del_tokens": "/ / Clear any pending messages and post delayed"}
{"commit_tokens": ["Fixed", "method", "name"], "add_tokens": "public void setEventSubType ( EventSubType eventSubType ) {", "del_tokens": "public void serEventSubType ( EventSubType eventSubType ) {"}
{"commit_tokens": ["changing", "mx2", "/", "my2", "back"], "add_tokens": "mx2 = width ; my2 = height ;", "del_tokens": "mx2 = width - 1 ; my2 = height - 1 ;"}
{"commit_tokens": ["write", "end", "element"], "add_tokens": "streamWriter . writeEndElement ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "automapping", "cache", "update", "position"], "add_tokens": "autoMappingsCache . put ( mapKey , autoMapping ) ;", "del_tokens": "autoMappingsCache . put ( mapKey , autoMapping ) ;"}
{"commit_tokens": ["Fix", "ticking", "on", "the", "server"], "add_tokens": "return true ;", "del_tokens": "return false ;"}
{"commit_tokens": ["Expose", "window", "size", "."], "add_tokens": "public int getWindowSize ( ) { return values . length ; }", "del_tokens": ""}
{"commit_tokens": ["Added", "sleep", "to", "avoid", "null", "error", "after", "most", "recent", "change", "to", "not", "break", "API"], "add_tokens": "sleep ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Destroy", "display", "lists", "when", "running", "complete", "memory", "trims"], "add_tokens": "clearDisplayList ( ) ;", "del_tokens": ""}
{"commit_tokens": ["remove", "spurious", "import"], "add_tokens": "", "del_tokens": "import com . sun . jmx . snmp . internal . SnmpDecryptedPdu ;"}
{"commit_tokens": ["ImageDetail", "extends", "BinaryDetail"], "add_tokens": "public static class ImageDetail extends BinaryDetail", "del_tokens": "public static class ImageDetail extends GenericDetail"}
{"commit_tokens": ["improve", "concurrency"], "add_tokens": "protected volatile boolean uncommitedData = false ;", "del_tokens": "protected boolean uncommitedData = false ;"}
{"commit_tokens": ["Call", "odDataSetChanged", "(", ")", "in", "ListRemoteViewsFactory", "constructor", "to", "guarantee", "that", "task", "list", "is", "populated", "."], "add_tokens": "onDataSetChanged ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "superfluous", "comment"], "add_tokens": "", "del_tokens": "/ / Empty constructor"}
{"commit_tokens": ["revert", "change", "preventing", "NULL", "SSID", "in", "a", "WifiConfiguration"], "add_tokens": "", "del_tokens": "if ( SSID = = null ) return false ;"}
{"commit_tokens": ["Added", "IPC", "manager", "(", "support", "info", ")"], "add_tokens": "\" com . zte . security . ZTEIPackageManager \" , / / ZTE", "del_tokens": ""}
{"commit_tokens": ["Fixed", "the", "TitleParserTest", "to", "reflect", "recent", "updates", "in", "behavior"], "add_tokens": "task . clear ( ) ;", "del_tokens": ""}
{"commit_tokens": ["make", "predicate", "package", "local"], "add_tokens": "class NestedTryStatementsPredicate implements PsiElementPredicate {", "del_tokens": "public class NestedTryStatementsPredicate implements PsiElementPredicate {"}
{"commit_tokens": ["LPS", "-", "52139", "make", "sure", "to", "cleanup", "template", "managers"], "add_tokens": "templateManager . destroy ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "newly", "introduced", "warnings", "in", "JsonWriter", "."], "add_tokens": "@ SuppressWarnings ( \" unchecked \" )", "del_tokens": ""}
{"commit_tokens": ["Ignore", "bad", "unit", "test"], "add_tokens": "@ Ignore", "del_tokens": ""}
{"commit_tokens": ["Set", "the", "entity", "to", "null", "after", "writing", "the", "padding"], "add_tokens": "response . setEntity ( null ) ;", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "24280", "add", "comment"], "add_tokens": "/ / See LPS - 6029 , LPS - 8865 and LPS - 24280", "del_tokens": "/ / See LPS - 6029 and LPS - 8865"}
{"commit_tokens": ["HHH", "-", "6495", "Adding", "a", "comment", "and", "reference", "to", "jira", "issue"], "add_tokens": "/ / see HHH - 6501", "del_tokens": ""}
{"commit_tokens": ["Fix", "suggestion", "popup", "for", "RTL", "text", "on", "LTR", "layout", "."], "add_tokens": "", "del_tokens": "mSuggestionListView . getLayoutParams ( ) . width = width ;"}
{"commit_tokens": ["Fix", "up", "tiny", "packet", "handler", "to", "actually", "work"], "add_tokens": "if ( mod . tinyPacketHandler ( ) ! = getTinyPacketHandlerDefaultValue ( ) )", "del_tokens": "if ( mod . tinyPacketHandler ( ) ! = tinyPacketHandlerDefaultValue )"}
{"commit_tokens": ["Remove", "unnecessary", "semicolon", "in", "StringUtils"], "add_tokens": "}", "del_tokens": "} ;"}
{"commit_tokens": ["Fix", "driver", "stop", "handling"], "add_tokens": "case WifiMonitor . SUPPLICANT_STATE_CHANGE_EVENT :", "del_tokens": ""}
{"commit_tokens": ["refresh", "annotations", "dir", "during", "setUp"], "add_tokens": "annotationsDir . refresh ( false , true ) ;", "del_tokens": ""}
{"commit_tokens": ["Changed", "super", "call", "to", "point", "to", "correct", "method", "."], "add_tokens": "return super . onKeyPreIme ( keyCode , event ) ;", "del_tokens": "return super . dispatchKeyEvent ( event ) ;"}
{"commit_tokens": ["Add", "null", "check", "in", "ViewOverlay"], "add_tokens": "if ( mDrawables ! = null ) { mDrawables . clear ( ) ; }", "del_tokens": "mDrawables . clear ( ) ;"}
{"commit_tokens": ["Fix", "#", "2751"], "add_tokens": "needLinks = false ;", "del_tokens": ""}
{"commit_tokens": ["CPP", "-", "618", "Add", "possibility", "to", "run", "CLion", "as", "desktop", "app", "on", "Ubuntu"], "add_tokens": "return CreateDesktopEntryAction . isAvailable ( ) ;", "del_tokens": "return true | | CreateDesktopEntryAction . isAvailable ( ) ;"}
{"commit_tokens": ["Appease", "the", "checkstyle", "overlords", "."], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["disable", "a", "doc", "comment"], "add_tokens": "/ *", "del_tokens": "/ * *"}
{"commit_tokens": ["Removed", "redundant", "public", "qualifier", "."], "add_tokens": "AtomicBuffer buffer ( ) ;", "del_tokens": "public AtomicBuffer buffer ( ) ;"}
{"commit_tokens": ["DatabaseType", "loadDriver", "now", "throws", "a", "SQLException", "which", "makes", "more", "sense", "."], "add_tokens": "public void loadDriver ( ) {", "del_tokens": "public void loadDriver ( ) throws ClassNotFoundException {"}
{"commit_tokens": ["Added", "noop", "unregisterReceiver", "to", "complement", "existing", "noop", "registerReceiver", "."], "add_tokens": "public void unregisterReceiver ( BroadcastReceiver receiver ) { / / Ignore } @ Override", "del_tokens": ""}
{"commit_tokens": ["BatchNode", "now", "updates", "its", "geometric", "state", "right", "after", "batching", "."], "add_tokens": "updateGeometricState ( ) ;", "del_tokens": ""}
{"commit_tokens": ["don", "t", "include", "classpath", ".", "index", "file", "generated", "by", "IDEA", "to", "layout"], "add_tokens": "setExcludes ( \" classpath . index \" ) ;", "del_tokens": ""}
{"commit_tokens": ["Missed", "import"], "add_tokens": "import jsr166y . ForkJoinPool ;", "del_tokens": ""}
{"commit_tokens": ["adding", "newline", "at", "end", "of", "file"], "add_tokens": "}", "del_tokens": "}"}
{"commit_tokens": ["fixed", "bug"], "add_tokens": "modeView . requestLayout ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "progress", "issue", "in", "InOutDegree", "."], "add_tokens": "Progress . progress ( mProgress , i ) ;", "del_tokens": "mProgress . progress ( i ) ;"}
{"commit_tokens": ["Fix", "issues", "with", "app", "crash"], "add_tokens": "if ( impassableRoads = = null ) { return new long [ 0 ] ; }", "del_tokens": ""}
{"commit_tokens": ["Put", "@", "ViewDebug", "."], "add_tokens": "@ ViewDebug . ExportedProperty ( category = \" text \" )", "del_tokens": ""}
{"commit_tokens": ["Fix", "unit", "test"], "add_tokens": "config . initialize ( ) ;", "del_tokens": ""}
{"commit_tokens": ["fixed", "issue", "328"], "add_tokens": "return null ! = getFileLocalPath ( ) ;", "del_tokens": "return null ! = getContentType ( ) & & null ! = getFileLocalPath ( ) ;"}
{"commit_tokens": ["Fix", "potential", "NPE", "in", "WebView"], "add_tokens": "mAutoFillData = new WebViewCore . AutoFillData ( ) ;", "del_tokens": ""}
{"commit_tokens": ["changed", "int", "to", "double", "."], "add_tokens": "double count = 0 ;", "del_tokens": "int count = 0 ;"}
{"commit_tokens": ["Need", "at", "least", "one", "public", "API", "for", "javadoc", "to", "run", "during", "release", "."], "add_tokens": "public class CoffeeApp implements Runnable {", "del_tokens": "class CoffeeApp implements Runnable {"}
{"commit_tokens": ["Fixed", "an", "issue", "with", "the", "headless", "server", "not", "saving", "the", "world", "on", "shutdown", "."], "add_tokens": "worldProvider . dispose ( ) ;", "del_tokens": "/ / TODO Auto - generated method stub"}
{"commit_tokens": ["Abort", "FDN", "delete", "when", "number", "is", "empty", "(", "instead", "of", "name", ")"], "add_tokens": "if ( TextUtils . isEmpty ( number ) ) {", "del_tokens": "if ( TextUtils . isEmpty ( tag ) ) {"}
{"commit_tokens": ["do", "not", "use", "animator", "in", "tests"], "add_tokens": "if ( application = = null ) {", "del_tokens": "if ( myTimer = = null ) {"}
{"commit_tokens": ["Added", "new", "biome", "enum", "values"], "add_tokens": "FROZEN_OCEAN , FROZEN_RIVER , ICE_PLAINS , ICE_MOUNTAINS , MUSHROOM_ISLAND , MUSHROOM_SHORE", "del_tokens": ""}
{"commit_tokens": ["Add", "support", "for", "the", "Firebird", "database", "-", "Fixed", "multi", "-", "record", "INSERT"], "add_tokens": "case FIREBIRD :", "del_tokens": ""}
{"commit_tokens": ["Fix", "typo", "in", "log", "message", "."], "add_tokens": "throw new IOException ( \" Unknown message type . \" ) ;", "del_tokens": "throw new IOException ( \" Uknown message type . \" ) ;"}
{"commit_tokens": ["removed", "sysout", "from", "AnimChannel"], "add_tokens": "", "del_tokens": "System . out . println ( \" Setting notified false \" ) ;"}
{"commit_tokens": ["Add", "a", "bogus", "method", "in", "otherwise", "empty", "test", "to", "prevent", "build", "breakage"], "add_tokens": "public void testIt ( ) { }", "del_tokens": ""}
{"commit_tokens": ["Remove", "@", "Nullable", "from", "PreDexMerge", ".", "getSecondaryDexDirectories"], "add_tokens": "", "del_tokens": "@ Nullable"}
{"commit_tokens": ["Dismiss", "item", "dialog", "when", "starting", "playback", "of", "downloaded", "episode"], "add_tokens": "if ( media . isDownloaded ( ) ) { / / playback was started , dialog should close itself dismiss ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["make", "auto", "focus", "for", "all", "consoles", "with", "history"], "add_tokens": "", "del_tokens": "@ Override protected boolean isAutoFocusContent ( ) { return true ; }"}
{"commit_tokens": ["eliminate", "eclipse", "warning"], "add_tokens": "@ SuppressWarnings ( \" serial \" )", "del_tokens": ""}
{"commit_tokens": ["Revert", "Changed", "power", "request", "to", "activation", "energy", "."], "add_tokens": "return getPowerProvider ( ) . getMaxEnergyReceived ( ) ;", "del_tokens": "return getPowerProvider ( ) . getActivationEnergy ( ) ;"}
{"commit_tokens": ["Reset", "animation", "speed", "to", "250", "(", "2500", "was", "for", "local", "testing", "and", "was", "accidentally", "committed", ")"], "add_tokens": "public int cellPositionTransitionAnimationDuration = 250 ;", "del_tokens": "public int cellPositionTransitionAnimationDuration = 2500 ;"}
{"commit_tokens": ["Remove", "unnecessary", "call", "."], "add_tokens": "", "del_tokens": "connections . remove ( socket ) ;"}
{"commit_tokens": ["Added", "missing", "implementation"], "add_tokens": "public void update ( ) { / / Do nothing }", "del_tokens": ""}
{"commit_tokens": ["remove", "@", "Override", "from", "interface", "method", "impl"], "add_tokens": "", "del_tokens": "@ Override"}
{"commit_tokens": ["Do", "not", "call", "WebTextView", ".", "requestFocus", "if", "WebView", "is", "not", "focused", "."], "add_tokens": "if ( isFocused ( ) ) { mWebTextView . requestFocus ( ) ; }", "del_tokens": "mWebTextView . requestFocus ( ) ;"}
{"commit_tokens": ["corrected", "constant", "reference"], "add_tokens": "return Filter . NEUTRAL ;", "del_tokens": "return AuditEventFilter . NEUTRAL ;"}
{"commit_tokens": ["Removed", "unecessary", "bindview", "call"], "add_tokens": "", "del_tokens": "/ / populate view content bindView ( view , context , cursor ) ;"}
{"commit_tokens": ["Add", "missing", "return", "statement", "."], "add_tokens": "return false ;", "del_tokens": ""}
{"commit_tokens": ["Renamed", "a", "method", "for", "better", "readability"], "add_tokens": "public void runEveryXSeconds ( int seconds )", "del_tokens": "public void runEvery_Seconds ( int seconds )"}
{"commit_tokens": ["Remove", "unnecessary", "interface", "modifiers"], "add_tokens": "String COLUMN_PACKAGE_NAME = \" package_name \" ;", "del_tokens": "public static final String COLUMN_PACKAGE_NAME = \" package_name \" ;"}
{"commit_tokens": ["add", "newline", "for", "github", "not", "to", "cry"], "add_tokens": "}", "del_tokens": "}"}
{"commit_tokens": ["LPS", "-", "3461", "Fix", "mail", "persistence"], "add_tokens": "}", "del_tokens": "}"}
{"commit_tokens": ["remove", "misplaced", "@", "Override", "annotation"], "add_tokens": "", "del_tokens": "@ Override"}
{"commit_tokens": ["Change", "IntSetIterator", "to", "public"], "add_tokens": "static public class IntSetIterator {", "del_tokens": "static private class IntSetIterator {"}
{"commit_tokens": ["Remove", "MWE", "-", "specific", "class", "members"], "add_tokens": "", "del_tokens": "private static final String MISSING_PHRASAL = \" DUMMYP \" ; private static final String MISSING_POS = \" DUMMY \" ;"}
{"commit_tokens": ["Make", "ScrollDirectionListener", "public"], "add_tokens": "public interface ScrollDirectionListener {", "del_tokens": "interface ScrollDirectionListener {"}
{"commit_tokens": ["Don", "t", "lowercase", "word", "vectors", "by", "default"], "add_tokens": "public boolean lowercaseWordVectors = false ;", "del_tokens": "public boolean lowercaseWordVectors = true ;"}
{"commit_tokens": ["Fix", "NPE", "when", "using", "Executor"], "add_tokens": "return workers ! = null ? curThreads - workers . size ( ) : 0 ;", "del_tokens": "return curThreads - workers . size ( ) ;"}
{"commit_tokens": ["Add", "missing", "Override", "annotation"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["Fix", "AppleBundle", "#", "getBuildSteps", "(", ")", "so", "it", "returns", "a", "non", "-", "null", "value", "."], "add_tokens": "return ImmutableList . of ( ) ;", "del_tokens": "@ Nullable return null ;"}
{"commit_tokens": ["Make", "every", "language", "have", "its", "own", "preview", "page", "by", "default", "(", "no", "need", "to", "specify", "useSharedPreview", "(", ")", "for", "each", ")"], "add_tokens": "", "del_tokens": "@ Override public boolean usesSharedPreview ( ) { return false ; }"}
{"commit_tokens": ["DO", "NOT", "MERGE", "Fix", "build", "."], "add_tokens": "/ * * * @ hide * /", "del_tokens": ""}
{"commit_tokens": ["Add", "w3c_device_sensor_event", "."], "add_tokens": "\" w3c_device_sensor_event . js \" ,", "del_tokens": ""}
{"commit_tokens": ["Add", "case", "for", "Decimal128", "to", "BsonBinaryReader", "#", "skipValue"], "add_tokens": "case DECIMAL128 : skip = 16 ; break ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "wrong", "argument", "of", "StandardWrapper", ".", "remove", "(", ")", "in", "case", "when", "singleThreadModel", "and", "instancePool", "are", "used", "."], "add_tokens": "SecurityUtil . remove ( s ) ;", "del_tokens": "SecurityUtil . remove ( instance ) ;"}
{"commit_tokens": ["Fix", "Checkstyle", "/", "IDE", "/", "Gump", "nags"], "add_tokens": "", "del_tokens": "import org . junit . Ignore ;"}
{"commit_tokens": ["Added", "check", "for", "invalid", "scope"], "add_tokens": "Preconditions . checkEmptyString ( scope , \" Invalid OAuth scope \" ) ;", "del_tokens": ""}
{"commit_tokens": ["don", "t", "force", "refresh", "if", "data", "is", "taken", "from", "cache"], "add_tokens": "", "del_tokens": "partner . forceRefresh ( ) ;"}
{"commit_tokens": ["manage", "visibilty", "of", "rsconnect", "global", "toolbar", "menu"], "add_tokens": "connectMenuButton . setVisible ( commands_ . rsconnectDeploy ( ) . isEnabled ( ) ) ;", "del_tokens": ""}
{"commit_tokens": ["switched", "version", "number", "to", "72"], "add_tokens": "static final String VERSION = \" 0072 Alpha \" ;", "del_tokens": "static final String VERSION = \" 0071 Alpha \" ;"}
{"commit_tokens": ["Added", "a", "property", "to", "avoid", "the", "exception", "stack", "trace", "when", "running", "the", "console"], "add_tokens": "public GroovyShell getShell ( ) { return shell ; }", "del_tokens": ""}
{"commit_tokens": ["Fix", "Eclipse", "warning"], "add_tokens": "private static final long serialVersionUID = 1L ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "i18n", "-", "unsafe", "API", "in", "AaptStep"], "add_tokens": "return \" aapt_package \" ;", "del_tokens": "return String . format ( \" aapt_package \" ) ;"}
{"commit_tokens": ["Fix", "up", "whitespace"], "add_tokens": "this . instrumentationTemplateFile = filename ;", "del_tokens": "this . instrumentationTemplateFile = filename ;"}
{"commit_tokens": ["Optimize", "it"], "add_tokens": "writer . optimize ( ) ;", "del_tokens": "/ / writer . optimize ( ) ;"}
{"commit_tokens": ["Fixed", "UnrecognizedPropertyException", "."], "add_tokens": "@ JsonProperty ( \" database \" )", "del_tokens": "@ JsonProperty"}
{"commit_tokens": ["Prevent", "transparent", "region", "from", "getting", "out", "of", "sync", "with", "Surface", "Flinger"], "add_tokens": "mPreviousTransparentRegion . setEmpty ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "logging"], "add_tokens": "", "del_tokens": "e . printStackTrace ( ) ;"}
{"commit_tokens": ["Fixed", "the", "problem", "with", "the", "calendar", "sort", "order", "using", "the", "column", "name"], "add_tokens": "public static final String DEFAULT_SORT_ORDER = CALENDAR_DISPLAY_NAME ;", "del_tokens": "public static final String DEFAULT_SORT_ORDER = \" displayName \" ;"}
{"commit_tokens": ["Fixed", "a", "bug", "with", "notes", "de", "-", "linkifying"], "add_tokens": "notesPreview . setText ( \" \" ) ;", "del_tokens": ""}
{"commit_tokens": ["Indexer", "don", "t", "use", "the", "value", "specified", "with", "-", "m"], "add_tokens": "writer . setMaxFieldLength ( RuntimeEnvironment . getInstance ( ) . getIndexWordLimit ( ) ) ;", "del_tokens": ""}
{"commit_tokens": ["cleared", "cache", "in", "travis"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Remove", "unused", "import"], "add_tokens": "", "del_tokens": "import java . lang . reflect . InvocationTargetException ;"}
{"commit_tokens": ["Possibly", "fix", "#", "94"], "add_tokens": "mArrowImageView . clearAnimation ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixing", "possible", "race", "condition", "."], "add_tokens": "return thr . mService ;", "del_tokens": "return thr . mService ;"}
{"commit_tokens": ["removed", "incorrect", "comment", "that", "stated", "that", "the", "return", "value", "of", "addSketches", "was", "ignored", "when", "it", "actually", "was", "used", "in", "a", "few", "places"], "add_tokens": "return found ;", "del_tokens": "return found ; / / actually ignored , but . ."}
{"commit_tokens": ["list", "comp", "expr", "has", "a", "type"], "add_tokens": "return PyBuiltinCache . getInstance ( this ) . getListType ( ) ;", "del_tokens": "return null ;"}
{"commit_tokens": ["start", "drag", "of", "text", "selection", "on", "initial", "press"], "add_tokens": "mSelectionStarted = true ; mTouchMode = TOUCH_DRAG_MODE ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "potential", "index", "exception", "in", "ForgeDirection"], "add_tokens": "if ( id > 0 & & id < ForgeDirection . values ( ) . length )", "del_tokens": "if ( id < ForgeDirection . values ( ) . length )"}
{"commit_tokens": ["do", "not", "show", "error", "on", "success"], "add_tokens": "return true ;", "del_tokens": ""}
{"commit_tokens": ["Invalidating", "a", "TE", "should", "not", "cause", "the", "pipe", "to", "drop"], "add_tokens": "item . field_804_d = value ;", "del_tokens": "item . hoverStart = value ;"}
{"commit_tokens": ["fixed", "wrong", "test"], "add_tokens": "runScript ( dataSource , BLOG_DDL ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "extra", "space", "."], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Make", "HazelcastInstanceImpl", "non", "-", "final", "to", "be", "able", "to", "mock"], "add_tokens": "public class HazelcastInstanceImpl", "del_tokens": "public final class HazelcastInstanceImpl"}
{"commit_tokens": ["PY", "-", "15476", "Docker", "certificates", "folder", "field", "made", "prefilled", "with", "default", "Docker", "certificates", "location"], "add_tokens": "public abstract String getDefaultCertificatesFolder ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "Groovy", "-", "226", "."], "add_tokens": "cv . visitVarInsn ( ALOAD , 0 ) ;", "del_tokens": "loadThisOrOwner ( ) ;"}
{"commit_tokens": ["move", "remaining", "CHM", "construction", "to", "the", "factory", "method"], "add_tokens": "", "del_tokens": "import jsr166e . ConcurrentHashMapV8 ;"}
{"commit_tokens": ["don", "t", "pass", "remote", "-", "shell", "-", "port", "parameter", "twice"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["align", "multiline", "parameters", "in", "calls", "by", "default", "(", "PY", "-", "5700", ")"], "add_tokens": "defaultSettings . ALIGN_MULTILINE_PARAMETERS_IN_CALLS = true ;", "del_tokens": ""}
{"commit_tokens": ["Removing", "type", "arguments", "as", "compiler", "will", "infer", "them"], "add_tokens": "public void activeScanSessionUrls ( String regex ) { }", "del_tokens": ""}
{"commit_tokens": ["Fix", "copy", "/", "paste", "error", "spotted", "by", "FindBugs"], "add_tokens": "return groupPrincipalCallback . getSubject ( ) ;", "del_tokens": "return callerPrincipalCallback . getSubject ( ) ;"}
{"commit_tokens": ["hide", "description", "on", "custom", "plugin", "panel"], "add_tokens": "myPanelDescription . setVisible ( false ) ;", "del_tokens": ""}
{"commit_tokens": ["Rename", "method"], "add_tokens": "cookie_login_should_return_user_if_user_present_in_http_session ( ) {", "del_tokens": "calling_login_should_return_user_if_user_present_in_http_session ( ) {"}
{"commit_tokens": ["HeadlessMaterial", "doesn", "t", "correctly", "set", "material", "data", "field"], "add_tokens": "this . data = newData ;", "del_tokens": "this . data = data ;"}
{"commit_tokens": ["removing", "unused", "var"], "add_tokens": "", "del_tokens": "int bigCount = 0 ;"}
{"commit_tokens": ["Implement", "IndexLookupSourceSupplier", ".", "destroy"], "add_tokens": "/ / nothing to do", "del_tokens": "throw new UnsupportedOperationException ( ) ;"}
{"commit_tokens": ["Fixed", "a", "bug", "where", "the", "notifications", "could", "overlap", "when", "reset"], "add_tokens": "requestLayout ( ) ;", "del_tokens": ""}
{"commit_tokens": ["preferred", "component", "set", "(", "roma", ")"], "add_tokens": "return myShowNewNameField ? myNewNameField : myTargetDirectoryField . getChildComponent ( ) ;", "del_tokens": "return myNewNameField ;"}
{"commit_tokens": ["Fix", "possible", "NPE", "in", "snapshot", "/", "restore", "during", "node", "shutdown"], "add_tokens": "return currentState ;", "del_tokens": "return null ;"}
{"commit_tokens": ["Remove", "debug"], "add_tokens": "", "del_tokens": "System . out . printf ( \" % d % d % d : % s \\ n \" , xCoord , yCoord , zCoord , Arrays . asList ( transferState ) ) ;"}
{"commit_tokens": ["Remove", "Set", "up", "library", "later", "from", "dialog"], "add_tokens": "public boolean isOnlyLibraryAdded ( ) { return true ; } @ Override", "del_tokens": ""}
{"commit_tokens": ["Fix", "NO_CONNECTIVITY", "flag", "in", "some", "cases", "."], "add_tokens": "newNet = null ; / / not officially avail . . try anyway , but / / report no failover", "del_tokens": ""}
{"commit_tokens": ["Revert", "LPS", "-", "48545", "SF"], "add_tokens": "private final TransactionAttribute _transactionAttribute ;", "del_tokens": "private TransactionAttribute _transactionAttribute ;"}
{"commit_tokens": ["don", "t", "put", "ejabberds", "status", "code", "muc", "messages", "into", "an", "actual", "conversation"], "add_tokens": "return null ;", "del_tokens": ""}
{"commit_tokens": ["Add", "a", "missing", "wifi", "p2p", "discovery", "changed", "broadcast"], "add_tokens": "sendP2pDiscoveryChangedBroadcast ( false ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "Internal", ".", "inMilliseconds", "(", ")", "where", "the", "offset", "was", "a", "byte", "instead"], "add_tokens": "final int offset ) {", "del_tokens": "final byte offset ) {"}
{"commit_tokens": ["remove", "change", "from", "another", "PR", "to", "avoid", "confusion"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["HS2", "ShutdownHookManager", "holds", "extra", "of", "Driver", "instance", "in", "nested", "compile"], "add_tokens": "driver . destroy ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Added", "the", "root", "cause", "to", "the", "exception", "."], "add_tokens": "throw new GdxRuntimeException ( \" Invalid version \" + VERSION , t ) ;", "del_tokens": "throw new GdxRuntimeException ( \" Invalid version \" + VERSION ) ;"}
{"commit_tokens": ["Remove", "comment"], "add_tokens": "", "del_tokens": "/ / Synch Stats if the service is not running"}
{"commit_tokens": ["Make", "GetAllResult", "a", "static", "inner", "class", "."], "add_tokens": "private static class GetAllResult {", "del_tokens": "private class GetAllResult {"}
{"commit_tokens": ["suppress", "F1", "key", "in", "message", "dialogs", "(", "IDEADEV", "-", "38870", ")"], "add_tokens": "@ Override protected void doHelpAction ( ) { / / do nothing }", "del_tokens": ""}
{"commit_tokens": ["provide", "simple", "mechanism", "to", "convert", "jetty6", "jetty", "-", "web", ".", "xml", "files", "to", "jetty7", "on", "the", "fly"], "add_tokens": "", "del_tokens": "import java . io . InputStream ;"}
{"commit_tokens": ["Remove", "unused", "discard", "(", ")", "method"], "add_tokens": "", "del_tokens": "public String discard ( ) { return super . discard ( ) ; }"}
{"commit_tokens": ["Added", "manual", "GLProfile", "shutdown", "to", "make", "sure", "that", "no", "JOGL", "threads", "are"], "add_tokens": "GLProfile . shutdown ( ) ;", "del_tokens": ""}
{"commit_tokens": ["remove", "parse", "integer", "logspam"], "add_tokens": "if ( o = = null ) { return fallback ; }", "del_tokens": ""}
{"commit_tokens": ["Fixed", "CCE", "(", "EA", "-", "38206", ")", "."], "add_tokens": "catch ( Exception e ) {", "del_tokens": "catch ( IOException e ) {"}
{"commit_tokens": ["auto", "synchronize", "rng"], "add_tokens": "synchonrizeRng ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "error"], "add_tokens": "if ( mapLayers . getLocationLayer ( ) = = null ) { return null ; }", "del_tokens": ""}
{"commit_tokens": ["Fix", "mCoveredFadeColor", "setter"], "add_tokens": "requestLayout ( ) ;", "del_tokens": "invalidate ( ) ;"}
{"commit_tokens": ["Removed", "Thread", ".", "dumpStack", "(", ")", "calls", "used", "for", "debugging", "."], "add_tokens": "", "del_tokens": "Thread . dumpStack ( ) ;"}
{"commit_tokens": ["Use", "correct", "smooth", "scroll", "default", "duration"], "add_tokens": "mPositionScroller . startWithOffset ( position , offset ) ;", "del_tokens": "mPositionScroller . startWithOffset ( position , offset , offset ) ;"}
{"commit_tokens": ["Forcing", "revalidation", "after", "entering", "fullscreen", "."], "add_tokens": "myFrame . validate ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Removes", "a", "use", "of", "JTable", ".", "setFillsViewportHeight", "because", "it", "requires", "Java", "1", ".", "6", "."], "add_tokens": "", "del_tokens": "table . setFillsViewportHeight ( true ) ;"}
{"commit_tokens": ["Suppress", "UnsatisfiedLinkError", "(", "debug", "info", ")"], "add_tokens": "else if ( ex instanceof UnsatisfiedLinkError ) priority = Log . WARN ;", "del_tokens": ""}
{"commit_tokens": ["don", "t", "make", "toArray", "unmodifiable"], "add_tokens": "return _all ;", "del_tokens": "return Collections . unmodifiableList ( _all ) ;"}
{"commit_tokens": ["removed", "unused", "imports"], "add_tokens": "", "del_tokens": "import javaslang . Function2 ; import javaslang . Tuple ;"}
{"commit_tokens": ["implement", "keyguardGoingAway", "(", ")", "fixes", "build", "."], "add_tokens": "public void keyguardGoingAway ( ) throws RemoteException { } @ Override", "del_tokens": ""}
{"commit_tokens": ["set", "theme", "res", "in", "a", "wrapper", "from", "constructor"], "add_tokens": "this . mTheme = themeres ;", "del_tokens": ""}
{"commit_tokens": ["Notify", "the", "EmulatorView", "of", "an", "update", "after", "resetting", "the", "terminal"], "add_tokens": "if ( mNotify ! = null ) { mNotify . onUpdate ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["Set", "the", "minimum", "number", "of", "threads", "=", "=", "to", "the", "maximum", "number", "of", "threads", "since", "ThreadPoolExecutor", "may", "not", "do", "what", "we", "hope", "."], "add_tokens": "super ( maxThreads ,", "del_tokens": "super ( 1 ,"}
{"commit_tokens": ["Add", "column", "caching", "to", "MonochromeBitmapSources", "and", "use", "it", "to", "improve", "Data", "Matrix", "speed"], "add_tokens": "public void cacheColumnForLuminance ( int x ) { }", "del_tokens": ""}
{"commit_tokens": ["Add", "break", "statement", "on", "load", "extractor", "from", "form"], "add_tokens": "break ;", "del_tokens": ""}
{"commit_tokens": ["add", "forgotten", "method", "body"], "add_tokens": "doCheckout ( project , listener , null ) ;", "del_tokens": ""}
{"commit_tokens": ["Add", "back", "setDivider", "(", "null", ")", "setDividerHeight", "(", "0", ")"], "add_tokens": "setDivider ( null ) ; setDividerHeight ( 0 ) ;", "del_tokens": ""}
{"commit_tokens": ["remove", "javadoc", "warning"], "add_tokens": "* @ return this", "del_tokens": "* @ return"}
{"commit_tokens": ["Fix", "pressed", "state", "when", "long", "pressing", "nav", "bar", "buttons"], "add_tokens": "", "del_tokens": "setPressed ( false ) ;"}
{"commit_tokens": ["Fix", "copy", "n", "paste", "error"], "add_tokens": "public ExpressionType getHandledPredicate ( ) {", "del_tokens": "public ExpressionType getCompletePredicate ( ) {"}
{"commit_tokens": ["Use", "the", "app", "context", "to", "avoid", "a", "memory", "leak", "."], "add_tokens": "( WindowManager ) appContext . getSystemService (", "del_tokens": "( WindowManager ) context . getSystemService ("}
{"commit_tokens": ["Removed", "redundant", "call", "v", ".", "done", "(", ")", "in", "ClosureCodegen"], "add_tokens": "", "del_tokens": "v . done ( ) ;"}
{"commit_tokens": ["don", "t", "show", "crash", "dialog", "here"], "add_tokens": "", "del_tokens": "mApp . checkForCrashes ( this ) ;"}
{"commit_tokens": ["LPS", "-", "64265", "Set", "default", "locale", "when", "it", "is", "null"], "add_tokens": "else { locale = new Locale ( StringPool . BLANK ) ; }", "del_tokens": ""}
{"commit_tokens": ["Fix", "a", "race", "condition", "in", "ViewDragHelper"], "add_tokens": "mParentView . removeCallbacks ( mSetIdleRunnable ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "build"], "add_tokens": "@ Override public int getAudioSessionId ( ) { return 0 ; }", "del_tokens": ""}
{"commit_tokens": ["Fix", "max", "stacksize", "on", "Potions", "."], "add_tokens": "POTION ( 373 , 1 ) ,", "del_tokens": "POTION ( 373 ) ,"}
{"commit_tokens": ["Removed", "an", "empty", "line"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Added", "property", "as", "a", "keyword", "identifier", "."], "add_tokens": "case KEYWORD_PROPERTY :", "del_tokens": ""}
{"commit_tokens": ["Adding", "sample", "code", "to", "FAQ", "for", "how", "to", "retrive", "a", "thrown", "exception", "send", "from", "CamelTemplate"], "add_tokens": "/ / END SNIPPET : e1", "del_tokens": "/ / START SNIPPET : e1"}
{"commit_tokens": ["Adds", "Throwable", "-", "less", "Exception"], "add_tokens": "UnableToInjectException ( String message ) { super ( message ) ; }", "del_tokens": ""}
{"commit_tokens": ["Prints", "the", "stack", "trace", "as", "well", "if", "there", "s", "something", "wrong"], "add_tokens": "e . printStackTrace ( System . err ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "UI", "in", "ingored", "VCS", "files"], "add_tokens": "}", "del_tokens": "}"}
{"commit_tokens": ["organize", "imports"], "add_tokens": "", "del_tokens": "import org . languagetool . tools . Tools ;"}
{"commit_tokens": ["Do", "not", "start", "queued", "actions", "for", "TV", "device"], "add_tokens": "", "del_tokens": "startQueuedActions ( ) ;"}
{"commit_tokens": ["remove", "extraneous", "@", "Override", "javadoc", "tag"], "add_tokens": "", "del_tokens": "@ Override"}
{"commit_tokens": ["fixed", "issue", "with", "implementation", "of", "getFiles", "in", "UsageTarget"], "add_tokens": "return null ;", "del_tokens": "return VirtualFile . EMPTY_ARRAY ;"}
{"commit_tokens": ["Fix", "the", "unhandled", "authentication", "message", "."], "add_tokens": "case Response . UNAUTHORIZED :", "del_tokens": ""}
{"commit_tokens": ["Added", "Builder", "to", "creative", "inventory"], "add_tokens": "setCreativeTab ( CreativeTabs . tabRedstone ) ;", "del_tokens": ""}
{"commit_tokens": ["Added", "missing", "@", "Implementation", "annotation", "that", "was", "breaking", "the", "build"], "add_tokens": "@ Implementation", "del_tokens": ""}
{"commit_tokens": ["QL", "parser", "/", "lexer", "should", "support", "HQL", "(", "IDEADEV", "-", "12901", ")"], "add_tokens": "public Lexer getLexer ( ) { return myLexer ; }", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "40458", "ExecutorIntraband", "should", "clean", "up", "timeout", "response", "waiting", "datagrams", "in", "writing", "thread"], "add_tokens": "cleanUpTimeoutResponseWaitingDatagrams ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "SideOnly", "in", "PacketPayload"], "add_tokens": "", "del_tokens": "@ SideOnly ( Side . CLIENT )"}
{"commit_tokens": ["Set", "max", "input", "size", "for", "H", ".", "265", "/", "HEVC", "."], "add_tokens": "case MimeTypes . VIDEO_H265 :", "del_tokens": ""}
{"commit_tokens": ["Removing", "println", "from", "OperationMerge"], "add_tokens": "", "del_tokens": "System . out . println ( \" unsubscribe from merge \" ) ;"}
{"commit_tokens": ["Fix", "issue", "in", "LayoutPanel", "refresh", "with", "selected", "builder", "."], "add_tokens": "this . selectedBuilder = selectedLayout . getBuilder ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Redwood", "should", "load", "the", "minimal", "configuration", "by", "default"], "add_tokens": "RedwoodConfiguration . minimal ( ) . apply ( ) ;", "del_tokens": "RedwoodConfiguration . standard ( ) . apply ( ) ;"}
{"commit_tokens": ["remove", "a", "c", "/", "p", "comment", "after", "counter", "loop", "/", "/", "We", "never", "get", "here", "but", "clean"], "add_tokens": "", "del_tokens": "/ / We never get here but clean up anyhow"}
{"commit_tokens": ["Correctly", "set", "the", "window", "callback", "for", "ToolbarActionBar"], "add_tokens": "mDecorToolbar . setWindowCallback ( mWindowCallback ) ;", "del_tokens": ""}
{"commit_tokens": ["Added", "getCurrentTime", "(", ")", "to", "Scheduler"], "add_tokens": "public long getCurrentTime ( ) { return currentTime ; }", "del_tokens": ""}
{"commit_tokens": ["enables", "classloading", "again"], "add_tokens": "/ / type may be resolved through the classloader before return type . isResolved ( ) ;", "del_tokens": "return false ;"}
{"commit_tokens": ["Remove", "import", "of", "removed", "view", "."], "add_tokens": "", "del_tokens": "import views . html . system . users . show ;"}
{"commit_tokens": ["Modifies", "#", "getPresences", "(", "String", ")", "to", "return", "an", "iterator", "on", "Presences", "instead", "of", "an", "iterator", "on", "Map", ".", "Entries"], "add_tokens": "return userPresences . values ( ) . iterator ( ) ;", "del_tokens": "return userPresences . entrySet ( ) . iterator ( ) ;"}
{"commit_tokens": ["Fix", "#", "125"], "add_tokens": "return START_NOT_STICKY ; / / no sense to use START_STICKY with using startForeground", "del_tokens": "return START_STICKY ;"}
{"commit_tokens": ["Renamed", "a", "method", "for", "better", "readability"], "add_tokens": "public void runEveryXSeconds ( int seconds )", "del_tokens": "public void runEvery_Seconds ( int seconds )"}
{"commit_tokens": ["LPS", "-", "47829", "add", "@", "Override"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["Fix", "security", "exception", "(", "support", "info", ")"], "add_tokens": "} catch ( SecurityException ignored ) {", "del_tokens": ""}
{"commit_tokens": ["Move", "the", "duplicate", "param", "warning", "into", "the", "es5strict", "group", "."], "add_tokens": "RhinoErrorReporter . DUPLICATE_PARAM ,", "del_tokens": ""}
{"commit_tokens": ["Add", "todo", "comment"], "add_tokens": "/ / TODO : Hard - code for YouTube , Instragram , Facebook and Twitter", "del_tokens": ""}
{"commit_tokens": ["Increasing", "Enum", "count", "to", "help", "parse", "strings", "upto", "65000"], "add_tokens": "public static final int MAX_ENUM_SIZE = 65000 ;", "del_tokens": "public static final int MAX_ENUM_SIZE = 11000 ;"}
{"commit_tokens": ["Changed", "a", "+", "=", "of", "a", "null", "string", "back", "to", "the", "appropriate", "=", "sign", "."], "add_tokens": "this . mName = name ;", "del_tokens": "this . mName + = name ;"}
{"commit_tokens": ["Added", "change", "user", "password", "."], "add_tokens": "addCommand ( new ChangeUserPassword ( ) ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "the", "Search", "header", "on", "search", "results"], "add_tokens": "setTitle ( getString ( R . string . search_results ) + \" : \" + mQueryString ) ;", "del_tokens": "setTitle ( R . string . search_results + \" : \" + mQueryString ) ;"}
{"commit_tokens": ["Remove", "accidental", "whitespace"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Reload", "bug", "fix", "(", "do", "not", "start", "additional", "activities", "for", "reloaded", "catalog", ")"], "add_tokens": "", "del_tokens": "NetworkView . Instance ( ) . openTree ( activity , tree , url ) ;"}
{"commit_tokens": ["Fixed", "bug", "that", "caused", "stats", "to", "refresh", "with", "every", "resume", "and", "fail", "to", "restore", "previous", "state"], "add_tokens": "restoreState ( savedInstanceState ) ;", "del_tokens": ""}
{"commit_tokens": ["Convert", "one", "more", "bind", "(", ")", "-", ">", "setVar", "(", ")", "."], "add_tokens": "setVar ( 0 , mTables ) ;", "del_tokens": "bindAllocation ( mTables , 0 ) ;"}
{"commit_tokens": ["browser", "actions", "linux", "fix"], "add_tokens": "return myLinuxPath ;", "del_tokens": "return null ;"}
{"commit_tokens": ["update", "bmt_example", "for", "TimestampReconciler", "singleton", "-", "ification", "."], "add_tokens": "TimestampReconciler . instance ,", "del_tokens": "new TimestampReconciler ( ) ,"}
{"commit_tokens": ["remove", "unnecessary", "line"], "add_tokens": "", "del_tokens": "square . invalidate ( ) ;"}
{"commit_tokens": ["remove", "object", "=", "=", "null"], "add_tokens": "if ( ! ( object instanceof Key ) ) {", "del_tokens": "if ( object = = null | | ! ( object instanceof Key ) ) {"}
{"commit_tokens": ["Remove", "ES", "Client", ".", "close", "(", ")", "."], "add_tokens": "", "del_tokens": "client . close ( ) ;"}
{"commit_tokens": ["fixed", "a", "small", "bug"], "add_tokens": "num = 0 ;", "del_tokens": ""}
{"commit_tokens": ["Add", "missing", "graph", ".", "shutdown", "(", ")", "in", "txn", "graph", "test"], "add_tokens": "graph . shutdown ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixes", "#", "591", "Synchronise", "the", "untrack", "statement", "method", "to", "ensure", "that", "Statements", "are", "independently", "thread", "-", "safe", "."], "add_tokens": "final synchronized void untrackStatement ( final Statement statement )", "del_tokens": "final void untrackStatement ( final Statement statement )"}
{"commit_tokens": ["Ninja", "fix", "CASSANDRA", "-", "9029"], "add_tokens": "now = 5 ;", "del_tokens": ""}
{"commit_tokens": ["give", "the", "filterview", "the", "activity", "so", "it", "can", "get", "connections"], "add_tokens": "mFilterView . setActivity ( getActivity ( ) ) ;", "del_tokens": "mFilterView . setConnection ( mConn ) ;"}
{"commit_tokens": ["HHH", "-", "7578", "Sybase", "does", "not", "support", "unique", "not", "null"], "add_tokens": "@ Override public boolean supportsNotNullUnique ( ) { return false ; }", "del_tokens": ""}
{"commit_tokens": ["Added", "Chunk", ".", "getWorld", "(", ")"], "add_tokens": "/ * * * Gets the world containing this chunk * * @ return Parent World * / World getWorld ( ) ;", "del_tokens": ""}
{"commit_tokens": ["help", "topic", "(", "IDEADEV", "-", "38121", ")"], "add_tokens": "return \" reference . settings . ide . settings . file - colors \" ;", "del_tokens": "return null ;"}
{"commit_tokens": ["updated", "queryClose"], "add_tokens": "query ( ) ;", "del_tokens": ""}
{"commit_tokens": ["completing", "predefined", "objects", "properties"], "add_tokens": "return EditSourceUtil . canNavigate ( this ) ;", "del_tokens": "return true ;"}
{"commit_tokens": ["Remove", "mLastNewIntent", "as", "it", "is", "not", "used", "."], "add_tokens": "", "del_tokens": "private Intent mLastNewIntent ;"}
{"commit_tokens": ["Use", "correct", "private", "key", "header", "byte", "in", "reg", "test", "mode", "."], "add_tokens": "dumpedPrivateKeyHeader = 128 ;", "del_tokens": ""}
{"commit_tokens": ["watch", "for", "gif", "decode", "OOM"], "add_tokens": "catch ( OutOfMemoryError e ) { exception = new Exception ( e ) ; }", "del_tokens": ""}
{"commit_tokens": ["Removing", "an", "empty", "line", "."], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["make", "Config", "match", "yaml", "(", "#", "6059", ")"], "add_tokens": "public Long read_request_timeout_in_ms = new Long ( 5000 ) ;", "del_tokens": "public Long read_request_timeout_in_ms = new Long ( 10000 ) ;"}
{"commit_tokens": ["Changing", "viewClient", "to", "default", "visibility"], "add_tokens": "CordovaWebViewClient viewClient ;", "del_tokens": "private CordovaWebViewClient viewClient ;"}
{"commit_tokens": ["Set", "missing", "camera", "position", "for", "particles"], "add_tokens": "mParticleShader . setCameraPosition ( camera . getPosition ( ) ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "cb", "sms", "implementation"], "add_tokens": "break ;", "del_tokens": ""}
{"commit_tokens": ["nope", "dont", "need", "you"], "add_tokens": "", "del_tokens": "/ / sketchMenu . add ( windowMenu ) ;"}
{"commit_tokens": ["LPS", "-", "45573", "add", "line", "breaks", "since", "I", "assume", "order", "matters"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Added", "ignored_columns", "."], "add_tokens": "\" ignored_columns \" ,", "del_tokens": ""}
{"commit_tokens": ["removed", "unnecessary", "else", "condition"], "add_tokens": "} else {", "del_tokens": "} else if ( ! wasSelected ) {"}
{"commit_tokens": ["Fix", "the", "build", "."], "add_tokens": "@ Override", "del_tokens": "@ Overide"}
{"commit_tokens": ["Fix", "NPE", "in", "moveSharedElementsToOverlay"], "add_tokens": "if ( mWindow = = null | | ! mWindow . getSharedElementsUseOverlay ( ) ) {", "del_tokens": "if ( ! mWindow . getSharedElementsUseOverlay ( ) ) {"}
{"commit_tokens": ["FileSystemCompiler", "#", "generateFileNamesFromOptions", "is", "adding", "filenames", "multiple", "times"], "add_tokens": "fileList . add ( filename ) ;", "del_tokens": "fileList . addAll ( Arrays . asList ( filenames ) ) ;"}
{"commit_tokens": ["missing", "break", "in", "switch"], "add_tokens": "return true ;", "del_tokens": ""}
{"commit_tokens": ["don", "t", "use", "setDaemon", "in", "DiscoveryWithServiceDisruptionsIT", "."], "add_tokens": "", "del_tokens": "thread . setDaemon ( true ) ;"}
{"commit_tokens": ["LPS", "-", "24377", "Explicitly", "set", "contribution", "and", "participation", "values", "to", "0", "when", "they", "are", "not", "defined", "in", "xml"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Added", "serialVersionUID", "to", "MongoInterruptedException"], "add_tokens": "private static final long serialVersionUID = - 4110417867718417860L ;", "del_tokens": ""}
{"commit_tokens": ["removed", "redundant", "startPreview", "call"], "add_tokens": "", "del_tokens": "startPreview ( ) ;"}
{"commit_tokens": ["Fixed"], "add_tokens": "mPageRight . setFlipTexture ( false ) ;", "del_tokens": ""}
{"commit_tokens": ["MessageOutput", "now", "has", "getName", "(", ")"], "add_tokens": "String getName ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Calling", "finish", "(", ")", "on", "Accounts", "activity", "when", "auto", "jumping", "to", "the", "only", "one", "existing", "account"], "add_tokens": "finish ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Don", "t", "swallow", "unknown", "payload", "in", "the", "parser", "."], "add_tokens": "", "del_tokens": "swallow ( payloadSize ) ;"}
{"commit_tokens": ["Fix", "reboot", "loop", "due", "to", "NPE", "."], "add_tokens": "} else { mPacFileUrl = Uri . EMPTY ;", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "47491", "Fix", "compile"], "add_tokens": "", "del_tokens": "@ Override super . tearDown ( ) ;"}
{"commit_tokens": ["adding", "one", "line", "for", "separate", "from", "the", "javadoc", "of", "next", "function"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Add", "missing", "pkg", "statement", "to", "test"], "add_tokens": "package com . yahoo . zookeeper . test ;", "del_tokens": ""}
{"commit_tokens": ["Added", "a", "generated", "serial", "version", "to", "UniqueIndexViolationException"], "add_tokens": "private static final long serialVersionUID = - 8679405097266977101L ;", "del_tokens": ""}
{"commit_tokens": ["Run", "versioncheck", "periodical", "with", "5", "minute", "initial", "delay"], "add_tokens": "return ( int ) MINUTES . toSeconds ( 5 ) ;", "del_tokens": "return 0 ;"}
{"commit_tokens": ["Return", "an", "empty", "PluginList", "instead", "of", "null", "for", "the"], "add_tokens": "return new PluginList ( ) ;", "del_tokens": "return null ;"}
{"commit_tokens": ["Remove", "superfluous", "limit"], "add_tokens": "", "del_tokens": "dummy . limit ( 1 ) ;"}
{"commit_tokens": ["Added", "getContext", "to", "FakeDialog"], "add_tokens": "public Context getContext ( ) { return context ; }", "del_tokens": ""}
{"commit_tokens": ["Implement", "missing", "method"], "add_tokens": "@ Override public void tellChangedSessionId ( String newId , String oldId , boolean notifySessionListeners , boolean notifyContainerListeners ) { / / NOOP }", "del_tokens": ""}
{"commit_tokens": ["Still", "return", "a", "package", "suspsended", "dialog", "if", "there", "is", "no", "owner", "."], "add_tokens": "/ / We ' re not specifying the device admin because there isn ' t one . return intent ;", "del_tokens": "return null ;"}
{"commit_tokens": ["do", "not", "repeat", "java", "preprocessing", "as", "it", "should", "be", "done", "anyway"], "add_tokens": "return usages ;", "del_tokens": "return getBaseHandler ( ) . preprocessUsages ( project , usages ) ;"}
{"commit_tokens": ["Method", "doesn", "t", "throw", "an", "exception"], "add_tokens": "protected void registerWriteInterest ( ) {", "del_tokens": "protected void registerWriteInterest ( ) throws IOException {"}
{"commit_tokens": ["In", "order", "to", "keep", "sysout", "clean", "removed", "dodgy", "code"], "add_tokens": "", "del_tokens": "System . out . println ( getStuff ( ) ) ;"}
{"commit_tokens": ["IDEA", "-", "99591", "New", "Module", "does", "not", "remember", "last", "selected", "module", "type"], "add_tokens": "LAST_TEMPLATE = state . LAST_TEMPLATE ;", "del_tokens": ""}
{"commit_tokens": ["Log", "exception", "if", "it", "prevented", "to", "start", "the", "Git", "process"], "add_tokens": "LOG . error ( t ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "default", "implementation", "of", "getCanonicalPath", "(", ")"], "add_tokens": "return getPath ( ) ;", "del_tokens": "return null ;"}
{"commit_tokens": ["LPS", "-", "39798", "fix", "test", "compile", "error"], "add_tokens": "servletContext ) ;", "del_tokens": "servletContext , null ) ;"}
{"commit_tokens": ["Add", "view"], "add_tokens": "listView . addHeaderView ( showDashboardOnStart ) ;", "del_tokens": ""}
{"commit_tokens": ["Switch", "CuratorDiscoveryConfig", "to", "not", "be", "an", "abstract", "class", "cause", "Jackson", "cannot", "instantiate", "them"], "add_tokens": "public class CuratorDiscoveryConfig", "del_tokens": "public abstract class CuratorDiscoveryConfig"}
{"commit_tokens": ["Fix", "typo"], "add_tokens": "0 ,", "del_tokens": "keyCode ,"}
{"commit_tokens": ["Fixed", "a", "bug", "where", "the", "notification", "scroller", "could", "crash", "."], "add_tokens": "updateChildren ( ) ;", "del_tokens": "applyCurrentState ( ) ;"}
{"commit_tokens": ["rename", "IntelliLang", "configurable", "to", "Language", "Injection"], "add_tokens": "return \" Language Injection \" ;", "del_tokens": "return \" IntelliLang \" ;"}
{"commit_tokens": ["Fix", "wrong", "states", "when", "waking", "up", "from", "doze", "via", "touch"], "add_tokens": "mNotificationPanel . setTouchDisabled ( false ) ;", "del_tokens": ""}
{"commit_tokens": ["Correctly", "set", "isText", "flag", "for", "text", "messages"], "add_tokens": "isText = Boolean . TRUE ;", "del_tokens": "isText = Boolean . FALSE ;"}
{"commit_tokens": ["Inline", "settings", "methods", "in", "callback", "for", "WI", "-", "29440", "Create", "custom", "project", "generator"], "add_tokens": "@ Nullable", "del_tokens": "@ NotNull"}
{"commit_tokens": ["Cancel", "dialog", "when", "TimePickerDialog", "s", "BUTTON_NEGATIVE", "is", "clicked"], "add_tokens": "case BUTTON_NEGATIVE : cancel ( ) ; break ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "an", "overzealous", "call", "to", "setDefaultSelection", "."], "add_tokens": "", "del_tokens": "mWebTextView . setDefaultSelection ( ) ;"}
{"commit_tokens": ["update", "CacheOffHeap", "."], "add_tokens": "/ / and release memory . Only necessary with ` DBMaker . memoryDirect ( ) `", "del_tokens": "/ / and release memory . Only necessary with ` DBMaker . newCacheDirect ( ) `"}
{"commit_tokens": ["Fix", "bad", "fallthrough", "switch"], "add_tokens": "break ;", "del_tokens": ""}
{"commit_tokens": ["Removing", "SOP", "from", "code"], "add_tokens": "", "del_tokens": "System . out . println ( \" Hello \" ) ;"}
{"commit_tokens": ["Add", "support", "for", "ALTER", "TABLE", "MODIFY", "in", "CUBRID"], "add_tokens": "case CUBRID :", "del_tokens": ""}
{"commit_tokens": ["Removed", "todo", "as", "it", "works"], "add_tokens": "", "del_tokens": "} else if ( value instanceof List ) { / / todo"}
{"commit_tokens": ["LPS", "-", "32314", "Add", "@", "Override"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["set", "max", "FUL", "failed", "attempts", "to", "5"], "add_tokens": "private static final int FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP = 5 ;", "del_tokens": "private static final int FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP = 15 ;"}
{"commit_tokens": ["Set", "mActions", "to", "an", "empty", "JSON", "object", "if", "no", "actions", "are", "found", "in", "the", "body", "."], "add_tokens": "if ( mActions = = null ) { mActions = new JSONObject ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["Fix", "trivial", "equals", "implementation"], "add_tokens": "", "del_tokens": "public final boolean equals ( Object o ) { return false ; }"}
{"commit_tokens": ["Why", "do", "I", "always", "spot", "comment", "typos", "2s", "after", "I", "commit", "a", "change", "?"], "add_tokens": "/ / This is set to false for each file processed by the TaglibRule", "del_tokens": "/ / This is set to false for each fiel processed by the TaglibRule"}
{"commit_tokens": ["Fix", "grammar", "error", "in", "RxJavaHooks", "javadocs", "(", "#", "4191", ")"], "add_tokens": "* Prevents changing the hooks .", "del_tokens": "* Prevents changing a hooks ."}
{"commit_tokens": ["added", "implementation", "of", "withMeta"], "add_tokens": "public Obj withMeta ( IPersistentMap meta ) { throw new UnsupportedOperationException ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["Close", "the", "file", "once", "we", "are", "done", "with", "it"], "add_tokens": "raf . close ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixes", "#", "140", "Removed", "line", "that", "nulled", "mChildren", "causing", "issues", "on", "certain", "devices", "."], "add_tokens": "", "del_tokens": "mChildren = null ;"}
{"commit_tokens": ["Removing", "return", "statement", "so", "that", "the", "adapter", "always", "reloads", "the", "posts", "list", "after", "a", "post", "fetch", "."], "add_tokens": "", "del_tokens": "return ;"}
{"commit_tokens": ["Added", "new", "analytics", "properties", "for", "push", "authentication", "tracking", "."], "add_tokens": "LOGIN_FAILED_TO_GUESS_XMLRPC , PUSH_AUTHENTICATION_APPROVED , PUSH_AUTHENTICATION_EXPIRED , PUSH_AUTHENTICATION_FAILED , PUSH_AUTHENTICATION_IGNORED", "del_tokens": "LOGIN_FAILED_TO_GUESS_XMLRPC"}
{"commit_tokens": ["Only", "leave", "one", "default", "network", "up", "at", "a", "time", "."], "add_tokens": "teardown ( thisNet ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "warning"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["remove", "@", "Experimental"], "add_tokens": "", "del_tokens": "@ Experimental"}
{"commit_tokens": ["Added", "getServerAddress", "method"], "add_tokens": "public ServerAddress getServerAddress ( ) { return serverAddress ; }", "del_tokens": ""}
{"commit_tokens": ["Ninja", "fix", "CommitLogStressTest", ".", "testRandomSize"], "add_tokens": "randomSize = true ;", "del_tokens": "randomSize = false ;"}
{"commit_tokens": ["delete", "files"], "add_tokens": "file . delete ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Shorten", "the", "animation", "length", "to", "make", "it", "snappier", "."], "add_tokens": "private static final int ZOOM_ANIMATION_LENGTH = 175 ;", "del_tokens": "private static final int ZOOM_ANIMATION_LENGTH = 500 ;"}
{"commit_tokens": ["fixed", "some", "warnings"], "add_tokens": "", "del_tokens": "return ;"}
{"commit_tokens": ["Register", "allocate", "the", "roundRobinIndex", "."], "add_tokens": "final int roundRobinIndex = this . roundRobinIndex ;", "del_tokens": ""}
{"commit_tokens": ["removing", "unused", "imports"], "add_tokens": "", "del_tokens": "import com . sun . jna . Library ; import com . sun . jna . Native ;"}
{"commit_tokens": ["Delete", "old", "image", "before", "setting", "a", "new", "one"], "add_tokens": "mGPUImage . deleteImage ( ) ;", "del_tokens": ""}
{"commit_tokens": ["getKeyCount", "(", ")", "didn", "t", "do", "anything", "due", "to", "local", "variable", "definition"], "add_tokens": "", "del_tokens": "int keyCount = 0 ;"}
{"commit_tokens": ["I", "am", "using", "the", "inline", "editor", "(", "github", ")", "and", "i", "forgot", "a", "type", "=", "before", "info", ".", "getTypeName", "(", ")", ";"], "add_tokens": "type = info . getTypeName ( ) ;", "del_tokens": "info . getTypeName ( ) ;"}
{"commit_tokens": ["Changed", "comment", "in", "JetMethod", ".", "flags", "(", ")"], "add_tokens": "* See JvmStdlibNames", "del_tokens": "* Bit 0 - property / not property *"}
{"commit_tokens": ["Remove", "log", "."], "add_tokens": "", "del_tokens": "logPoolState ( \" Release connection \" ) ;"}
{"commit_tokens": ["Remove", "unused", "imports"], "add_tokens": "", "del_tokens": "import java . io . BufferedReader ; import java . io . FileReader ;"}
{"commit_tokens": ["remove", "uuid"], "add_tokens": "", "del_tokens": "private String uuid ;"}
{"commit_tokens": ["add", "gl2_source_radio_input", "to", "hidden", "message", "fields"], "add_tokens": "\" gl2_source_radio \" , \" gl2_source_radio_input \"", "del_tokens": "\" gl2_source_radio \""}
{"commit_tokens": ["Removed", "magic", "number", "."], "add_tokens": "final int nonExistingId = getNonExistingCustomerId ( ) ;", "del_tokens": "final int nonExistingId = 999 ;"}
{"commit_tokens": ["Move", "obsolete", "javadoc"], "add_tokens": "* Stops the Tachyon master server .", "del_tokens": "* Stops the Tachyon master server . Should only be called by tests ."}
{"commit_tokens": ["reset", "mChildrenSortPending", "after", "sort"], "add_tokens": "this . mChildrenSortPending = false ;", "del_tokens": ""}
{"commit_tokens": ["fix", "ethernet", "and", "wifi", "can", "t", "be", "tuned", "seperately", "issue"], "add_tokens": "return \" net . tcp . buffersize . ethernet \" ;", "del_tokens": "return \" net . tcp . buffersize . wifi \" ;"}
{"commit_tokens": ["Make", "checkstyle", "happy"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Add", "@", "Override", "annotation"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["Fix", "BackdropFrameRenderer", "leak"], "add_tokens": "releaseThreadedRenderer ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Updating", "version", "string", "to", "3", ".", "0"], "add_tokens": "public static final String BUILD = \" 3 . 0 . 0 \" ;", "del_tokens": "public static final String BUILD = \" 3 . 0 \" ;"}
{"commit_tokens": ["Add", "a", "reminder"], "add_tokens": "/ / TODO Flow control", "del_tokens": ""}
{"commit_tokens": ["Fixed", "remove", "webiew", "bug"], "add_tokens": "mView . removeView ( mWebview ) ; mWebview . removeAllViews ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Updated", "version"], "add_tokens": "return \" 0 . 3 . 2 \" ;", "del_tokens": "return \" 0 . 3 . 1 \" ;"}
{"commit_tokens": ["Fix", "dark", "text", "appearance", "by", "using", "the", "correct", "resource", "identifier"], "add_tokens": "return R . style . Bubble_TextAppearance_Dark ;", "del_tokens": "return R . drawable . bubble_white ;"}
{"commit_tokens": ["Remove", "TODO", "in", "TelecomManager", "."], "add_tokens": "", "del_tokens": "* TODO : Move this all into PhoneManager ."}
{"commit_tokens": ["Remove", "multiple", "calls", "to", "recordLeakNonRefCountingOperation", "(", ")", "in", "AdvancedLeakAwareByteBuf", ".", "forEachByteDesc"], "add_tokens": "", "del_tokens": "recordLeakNonRefCountingOperation ( ) ;"}
{"commit_tokens": ["Add", "todo"], "add_tokens": "/ / TODO [ 2014 ] : This should really be a long", "del_tokens": ""}
{"commit_tokens": ["Added", "missing", "graph", ".", "shutdown", "(", ")", "to", "newly", "added", "test", "case"], "add_tokens": "graph . shutdown ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "indentation", "and", "code", "style"], "add_tokens": "if ( ! cursorValid ) { return false ; }", "del_tokens": "if ( ! cursorValid ) return false ;"}
{"commit_tokens": ["fixed", "SocketStoreTest", ".", "testVersionedPut"], "add_tokens": "StringBuilder mBuf = new StringBuilder ( ) ;", "del_tokens": "StringBuilder mBuf ;"}
{"commit_tokens": ["FIX", "BUGS"], "add_tokens": "mTouchView = null ;", "del_tokens": ""}
{"commit_tokens": ["Breaks", "the", "loop"], "add_tokens": "break ;", "del_tokens": ""}
{"commit_tokens": ["Missing", "overwritten", "method"], "add_tokens": "@ Override public String getSystemSchema ( ) { return \" informix \" ; }", "del_tokens": ""}
{"commit_tokens": ["Slightly", "increate", "the", "drag", "bezel", "size", "."], "add_tokens": "private static final int MAX_DRAG_BEZEL_DP = 24 ;", "del_tokens": "private static final int MAX_DRAG_BEZEL_DP = 16 ;"}
{"commit_tokens": ["Set", "classification", "to", "the", "same", "value", "as", "the", "checkpoint", "."], "add_tokens": "classification = cp . classification ;", "del_tokens": ""}
{"commit_tokens": ["not", "wrap", "_hintFields", "into", "unmodifiable", "to", "prevent", "NPE"], "add_tokens": "return _hintFields ;", "del_tokens": "return Collections . unmodifiableList ( _hintFields ) ;"}
{"commit_tokens": ["fixed", "compilation", "issue"], "add_tokens": "@ Override public String getUniqueKey ( ) { return null ; }", "del_tokens": ""}
{"commit_tokens": ["typo", "cont", "d", "(", "remove", "deprecated", "method", "in", "trunk", ")"], "add_tokens": "", "del_tokens": "@ Deprecated public boolean isUsingAnnonymousInnerClass ( ) { return isUsingAnonymousInnerClass ( ) ; }"}
{"commit_tokens": ["build", "#", "8"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "39254", "update", "references"], "add_tokens": "return new PrivilegedTemplateWrapper ( accessControlContext , template ) ;", "del_tokens": "return new PACLTemplateWrapper ( accessControlContext , template ) ;"}
{"commit_tokens": ["Fix", "modifier", "order", "in", "BytesStreamsTests"], "add_tokens": "private abstract static class BaseNamedWriteable implements NamedWriteable {", "del_tokens": "private static abstract class BaseNamedWriteable implements NamedWriteable {"}
{"commit_tokens": ["Added", "explicit", "HystrixPlugins", ".", "reset", "(", ")", "to", "HystrixTimerThread", "init", "of", "each", "test"], "add_tokens": "HystrixPlugins . reset ( ) ;", "del_tokens": ""}
{"commit_tokens": ["OperationSetServerStoredAccountInfo", "extends", "OperationSet", "-", "fix", "provided", "by", "Adam", "Goldstein"], "add_tokens": "extends OperationSet", "del_tokens": ""}
{"commit_tokens": ["add", "missing", "updateConstraints", "(", ")"], "add_tokens": "updateConstraints ( component ) ;", "del_tokens": ""}
{"commit_tokens": ["add", "isShowing", "function", "to", "Android", "SoftKeyBoard", "plugin"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Include", "scroll", "indicators", "in", "overflow", "."], "add_tokens": "setScrollIndicators ( View . SCROLL_INDICATOR_TOP | View . SCROLL_INDICATOR_BOTTOM ) ;", "del_tokens": ""}
{"commit_tokens": ["Index", "Update", "Settings", "API", "does", "not", "update", "settings", "in", "real", "time", "closes", "#", "1807", "."], "add_tokens": "return true ;", "del_tokens": "return false ;"}
{"commit_tokens": ["extra", "threads", "wait", "longer"], "add_tokens": "30 * 60L ,", "del_tokens": "60L ,"}
{"commit_tokens": ["Engines", "should", "have", "a", "block", "name"], "add_tokens": "setBlockName ( \" engineBlock \" ) ;", "del_tokens": ""}
{"commit_tokens": ["Adds", "Intent", ".", "FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET", "to", "launch", "fasttrack", "intent", "."], "add_tokens": "intent . setFlags ( Intent . FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET ) ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "blank", "line"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["add", "empty", "line"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["fixed", "lpv", "toArray", "patch", "from", "Chouser"], "add_tokens": "return array . clone ( ) ;", "del_tokens": "return array ;"}
{"commit_tokens": ["Added", "query", "timeout", "to", "test", "query", "."], "add_tokens": "statement . setQueryTimeout ( ( int ) TimeUnit . MILLISECONDS . toSeconds ( timeoutMs ) ) ;", "del_tokens": ""}
{"commit_tokens": ["Removed", "unnecessary", "javadoc", "in", "Tests"], "add_tokens": "", "del_tokens": "/ * * * @ author Klaus Bayrhammer * /"}
{"commit_tokens": ["Fix", "a", "bug", "in", "the", "Tags", ".", "resolveIds", "(", ")", "method", "where", "the", "NoSuchUniqueId"], "add_tokens": "} catch ( NoSuchUniqueId e ) { throw e ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "the", "OnItemClick", "listener", "when", "the", "fragment", "is", "destroyed", "."], "add_tokens": "mPreferenceManager . setOnPreferenceTreeClickListener ( null ) ;", "del_tokens": ""}
{"commit_tokens": ["javadoc", "comments", "should", "behave", "as", "simple", "java", "comments"], "add_tokens": "END_OF_LINE_COMMENT , C_STYLE_COMMENT , DOC_COMMENT , JavaDocTokenType . DOC_COMMENT_DATA", "del_tokens": "END_OF_LINE_COMMENT , C_STYLE_COMMENT , DOC_COMMENT"}
{"commit_tokens": ["Remove", "backwards", "incompatible", "change", "introduced", "by", "#", "210"], "add_tokens": "", "del_tokens": ". message ( \" Uncaught exception \" )"}
{"commit_tokens": ["made", "PersistentStructMap", "non", "-", "final", "again"], "add_tokens": "public class PersistentStructMap extends APersistentMap {", "del_tokens": "final public class PersistentStructMap extends APersistentMap {"}
{"commit_tokens": ["Removing", "@", "Override", "from", "interface", "method", "impl"], "add_tokens": "", "del_tokens": "@ Override"}
{"commit_tokens": ["Use", "PApplet", ".", "exit", "(", ")", "instead", "of", "System", ".", "exit", "(", "0", ")", "for", "present", "mode", "stop", "button"], "add_tokens": "applet . exit ( ) ;", "del_tokens": "System . exit ( 0 ) ;"}
{"commit_tokens": ["Fix", "build", "due", "to", "@", "deprecated", "tag", "not", "having", "content"], "add_tokens": "* @ deprecated This timeout should not be used by applications", "del_tokens": "* @ deprecated"}
{"commit_tokens": ["rethrowException", "wraps", "Throwable", "s", "in", "UndeclaredThrowableException"], "add_tokens": "throw t ;", "del_tokens": "ReflectionUtils . rethrowException ( t ) ; return null ;"}
{"commit_tokens": ["remove", "a", "log"], "add_tokens": "", "del_tokens": "Log_OC . e ( TAG , \" KeepInSync \" ) ;"}
{"commit_tokens": ["Fixed", "typo", "in", "doc"], "add_tokens": "* / / do work", "del_tokens": "* / / do worK"}
{"commit_tokens": ["Removed", "a", "duplicate", "log", "in", "AdminClient", ".", "waitForCompletion"], "add_tokens": "", "del_tokens": "logger . info ( nodeName + \" : \" + status ) ;"}
{"commit_tokens": ["LPS", "-", "50855", "Fix", "compilation"], "add_tokens": "return new BookmarksServiceVerifyProcess ( ) ;", "del_tokens": "return new VerifyBookmarks ( ) ;"}
{"commit_tokens": ["Fix", "bug", "with", "saving", "intermediate", "points", "of", "the", "route", "into", "GPX", "file"], "add_tokens": "gpx . points . add ( pt ) ;", "del_tokens": ""}
{"commit_tokens": ["remove", "tangent", "generation", "from", "batch", "factory"], "add_tokens": "", "del_tokens": "TangentBinormalGenerator . generate ( mesh ) ;"}
{"commit_tokens": ["fix", "hide", "-", ">", "quit", "issue"], "add_tokens": "removeMessages ( QUIT ) ;", "del_tokens": "removeCallbacksAndMessages ( null ) ;"}
{"commit_tokens": ["Fix", "service", "requirements"], "add_tokens": "\" < noname > \" ,", "del_tokens": ""}
{"commit_tokens": ["Enabled", "a", "metric", "to", "the", "BasicOpService"], "add_tokens": "return invocations . size ( ) ;", "del_tokens": "/ / todo : return 0 ;"}
{"commit_tokens": ["Fix", "VoiceInteractionService", ".", "isActiveService", "(", ")", "."], "add_tokens": "return curComp . equals ( service ) ;", "del_tokens": "return curComp . equals ( cur ) ;"}
{"commit_tokens": ["Managed", "bean", "resolution", "inside", "$", "{", "}", "for", "JSP", "2", ".", "1", "+", "JSF", "1", ".", "2", "(", "IDEADEV", "-", "23158", ")"], "add_tokens": "public abstract boolean isJsp_2_1_OrBetter ( final @ NotNull PsiFile context ) ;", "del_tokens": ""}
{"commit_tokens": ["Add", "final", "modifier", "to", "AtomicBoolean", "isStarted", "."], "add_tokens": "private final AtomicBoolean isStarted ;", "del_tokens": "private AtomicBoolean isStarted ;"}
{"commit_tokens": ["Copy", "the", "resolver", "configuration", "when", "cloning", "Bootstrap"], "add_tokens": "resolver = bootstrap . resolver ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "#", "1746", "(", "frequencies", "all", "on", "same", "line", ")", "."], "add_tokens": "endRecord ( ) ;", "del_tokens": ""}
{"commit_tokens": ["DO", "NOT", "MERGE", "Add", "missing", "ap", "threshold", "config", "for", "hotlists"], "add_tokens": "settings . apLostThreshold = apLostThreshold ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "incorrect", "value", "for", "ChatColor", ".", "BLACK", "(", "was", "1", "should", "be", "0", ")"], "add_tokens": "BLACK ( ' 0 ' , 0x00 ) ,", "del_tokens": "BLACK ( ' 0 ' , 0x01 ) ,"}
{"commit_tokens": ["Fix", "logic", "error"], "add_tokens": "return false ;", "del_tokens": "return true ;"}
{"commit_tokens": ["added", "license", "header"], "add_tokens": "/ * * Copyright ( c ) 2007 Mockito contributors * This program is made available under the terms of the MIT License . * /", "del_tokens": ""}
{"commit_tokens": ["Remove", "whitespace"], "add_tokens": "headerParsePos = HeaderParsePosition . HEADER_VALUE ;", "del_tokens": "headerParsePos = HeaderParsePosition . HEADER_VALUE ;"}
{"commit_tokens": ["Fix", "visibility", "."], "add_tokens": "private WebConnection connection ;", "del_tokens": "WebConnection connection ;"}
{"commit_tokens": ["add", "comment", "to", "deprecated", "tag"], "add_tokens": "* @ deprecated This method is now obsolete .", "del_tokens": "* @ deprecated"}
{"commit_tokens": ["I", "don", "t", "really", "see", "a", "justification", "for", "doing", "a", "blocking", "write", "on", "close", "."], "add_tokens": "flushInternal ( false , false ) ;", "del_tokens": "flushInternal ( true , true ) ;"}
{"commit_tokens": ["NFC", "adapter", "calls", "package", "manager"], "add_tokens": "\" android . nfc . NfcAdapter \" ,", "del_tokens": ""}
{"commit_tokens": ["Fix", "touch", "handling", "when", "the", "drawer", "is", "open", "."], "add_tokens": "mLastMotionY = ev . getY ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Don", "t", "reload", "loadView"], "add_tokens": "", "del_tokens": "loadView ( R . layout . activity_video ) ;"}
{"commit_tokens": ["Remove", "warning"], "add_tokens": "@ SuppressWarnings ( \" WeakerAccess \" )", "del_tokens": ""}
{"commit_tokens": ["fix", "missing", "line", "return", "at", "EOF"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Specify", "@", "Override"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["Blinking", "cursor", "in", "Talk"], "add_tokens": "/ / start or stop the cursor blinking as appropriate makeBlink ( ) ;", "del_tokens": ""}
{"commit_tokens": ["AccessibilityNodeInfo", "refresh", "returns", "a", "stale", "state", "."], "add_tokens": "return refresh ( true ) ;", "del_tokens": "return refresh ( false ) ;"}
{"commit_tokens": ["Fixed", "a", "subtle", "bug", "I", "happened", "to", "introduce", "last", "night", "."], "add_tokens": "", "del_tokens": "return null ; return null ;"}
{"commit_tokens": ["remove", "change", "from", "another", "PR", "to", "avoid", "confusion"], "add_tokens": "protected boolean isLeaderMode ( ) { return mIsLeader ; }", "del_tokens": ""}
{"commit_tokens": ["Removed", "unnecessary", "initialization", "."], "add_tokens": "private boolean nm ;", "del_tokens": "private boolean nm = false ;"}
{"commit_tokens": ["fix", "the", "build", "."], "add_tokens": "public void onReportFirstCardPosition ( int n ) { }", "del_tokens": ""}
{"commit_tokens": ["Added", "IPC", "exception", "(", "support", "info", ")"], "add_tokens": "\" android . app . ActivityManager \" ,", "del_tokens": ""}
{"commit_tokens": ["Don", "t", "allow", "onBackPressed", "to", "be", "called", "while", "AstridActivity", "is", "finishing", "."], "add_tokens": "if ( isFinishing ( ) ) return ;", "del_tokens": ""}
{"commit_tokens": ["Turn", "off", "fixed", "rate", "scheduling", "in", "OpenGL"], "add_tokens": "animator = new FPSAnimator ( window , 60 ) ;", "del_tokens": "animator = new FPSAnimator ( window , 60 , true ) ;"}
{"commit_tokens": ["IDEA", "-", "118675", "-", "Errors", "in", "app", "server", "run", "configs", "not", "shown", "in", "UI"], "add_tokens": "myValidationPanel . setVisible ( true ) ;", "del_tokens": ""}
{"commit_tokens": ["Reduce", "the", "priority", "of", "the", "TTS", "thread", "."], "add_tokens": "super ( SYNTH_THREAD_NAME , android . os . Process . THREAD_PRIORITY_DEFAULT ) ;", "del_tokens": "super ( SYNTH_THREAD_NAME , android . os . Process . THREAD_PRIORITY_AUDIO ) ;"}
{"commit_tokens": ["Fixed", "issue", "with", "failing", "jUnit", "tests", "for", "maven"], "add_tokens": "initialized = false ;", "del_tokens": "initialized = false ;"}
{"commit_tokens": ["Remove", "stray", "e", ".", "printStackTrace", "(", ")"], "add_tokens": "", "del_tokens": "e . printStackTrace ( ) ;"}
{"commit_tokens": ["Added", "some", "comment", "(", "mostly", "to", "test", "build", ")"], "add_tokens": "/ * * * Dispatched when the underlying data has been changed * /", "del_tokens": ""}
{"commit_tokens": ["HorizontalChangeHandler", "now", "correctly", "resets", "the", "X", "translation", "."], "add_tokens": "from . setTranslationX ( 0 ) ;", "del_tokens": "from . setTranslationY ( 0 ) ;"}
{"commit_tokens": ["Restore", "missing", "usage", "assignment", "in", "AudioAttributes"], "add_tokens": "mUsage = usageForLegacyStreamType ( streamType ) ;", "del_tokens": ""}
{"commit_tokens": ["Prevent", "TextureView", "from", "ever", "setting", "a", "null", "layer", "paint"], "add_tokens": "mLayerPaint = paint = = null ? new Paint ( ) : paint ;", "del_tokens": "mLayerPaint = paint ;"}
{"commit_tokens": ["Removed", "unused", "method"], "add_tokens": "", "del_tokens": "public void folderStatusChanged ( Account account , String folderName ) { }"}
{"commit_tokens": ["deprecate", "yaml", "snitch"], "add_tokens": "logger . warn ( \" YamlFileNetworkTopologySnitch is deprecated ; switch to GossipingPropertyFileSnitch instead \" ) ;", "del_tokens": ""}
{"commit_tokens": ["removed", "unused", "private", "field", "mUID"], "add_tokens": "", "del_tokens": "String mUID ;"}
{"commit_tokens": ["Remove", "destroyed", "AudioPlayer", "from", "list", "of", "AudioPlayers"], "add_tokens": "this . players . remove ( id ) ;", "del_tokens": ""}
{"commit_tokens": ["Added", "IPC", "exception", "(", "support", "info", ")"], "add_tokens": "\" android . telephony . CallISmsApp \" , / / system", "del_tokens": ""}
{"commit_tokens": ["remove", "final"], "add_tokens": "@ NotNull ResolveState state ,", "del_tokens": "@ NotNull final ResolveState state ,"}
{"commit_tokens": ["Removing", "dirty", "hack", "to", "fix", "failing", "input", "launch", "on", "radio"], "add_tokens": "", "del_tokens": "/ / TODO lolwut return new InputLaunchResponse ( ) ;"}
{"commit_tokens": ["Add", "card", "to", "download", "new", "map"], "add_tokens": "} . execute ( ( Void ) null ) ;", "del_tokens": "} ;"}
{"commit_tokens": ["avoid", "conflict", "with", "prev", "PR"], "add_tokens": "", "del_tokens": "protected boolean isLeaderMode ( ) { return mIsLeader ; }"}
{"commit_tokens": ["Add", "HSPAP", "to", "getTcpBufferSizesPropName"], "add_tokens": "case TelephonyManager . NETWORK_TYPE_HSPAP : networkTypeStr = \" hspap \" ; break ;", "del_tokens": ""}
{"commit_tokens": ["Finish", "scroller", "when", "reseting", "state"], "add_tokens": "mScroller . forceFinished ( true ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "a", "test"], "add_tokens": "\" onActivityCreated \" , \" onStart \"", "del_tokens": "\" onActivityCreated \""}
{"commit_tokens": ["Remove", "blank", "lines"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Remove", "unneeded", "method", "."], "add_tokens": "", "del_tokens": "String getFullInterpreterPath ( ) ;"}
{"commit_tokens": ["Branch", "action", "has", "only", "All", "option"], "add_tokens": "myBranchSelectorAction . asTextAction ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "compilation", "error", "in", "unit", "test"], "add_tokens": "protected StreamHandler createWebSocketHandler ( String subProtocol ,", "del_tokens": "protected StreamHandler createWebSocketInbound ( String subProtocol ,"}
{"commit_tokens": ["Reset", "the", "AtmosphereFactory", "as", "well"], "add_tokens": "arFactory = null ;", "del_tokens": ""}
{"commit_tokens": ["change", "the", "setConfiguration", "(", ")", "to", "static"], "add_tokens": "public static void setConfiguration ( SimpleFacebookConfiguration facebookToolsConfiguration )", "del_tokens": "public void setConfiguration ( SimpleFacebookConfiguration facebookToolsConfiguration )"}
{"commit_tokens": ["Add", "700", "(", "regular", "bus", "service", ")", "route_type", "to"], "add_tokens": "case 700 :", "del_tokens": ""}
{"commit_tokens": ["Fix", "build"], "add_tokens": "@ Override public void getStableInsets ( Rect outInsets ) throws RemoteException { }", "del_tokens": ""}
{"commit_tokens": ["Set", "touch", "mode", "to", "be", "TOUCH_DONE_MODE", "when", "calling", "doDoubleTap", "."], "add_tokens": "mTouchMode = TOUCH_DONE_MODE ;", "del_tokens": ""}
{"commit_tokens": ["Deprecated", "MockitoJUnitRule"], "add_tokens": "@ Deprecated", "del_tokens": ""}
{"commit_tokens": ["Drop", "cached", "qualified", "name", "after", "changing", "nodes", "in", "subtree"], "add_tokens": "@ Override public void subtreeChanged ( ) { qualifiedNameCache = null ; }", "del_tokens": ""}
{"commit_tokens": ["Eliminates", "BAD", "as", "the", "column", "type", "fallback", "and", "instead", "gives", "up", "to", "chose", "NUM", "."], "add_tokens": "types [ i ] = Vec . T_NUM ;", "del_tokens": "types [ i ] = Vec . T_BAD ;"}
{"commit_tokens": ["Switched", "off", "superfluous", "parse", "tree", "building", "resulting", "in", "nearly", "double", "parsing", "performance"], "add_tokens": "", "del_tokens": "@ BuildParseTree"}
{"commit_tokens": ["Re", "-", "enabled", "offset", "preference", "if", "the", "layer", "is", "selected", "out", "of", "middle"], "add_tokens": "offsetPreference . setEnabled ( true ) ; offsetPreference . setChecked ( true ) ;", "del_tokens": ""}
{"commit_tokens": ["Changed", "chat", "app", "from", "fitcDemo", "to", "chatServer"], "add_tokens": "return \" chatServer \" ;", "del_tokens": "return \" fitcDemo \" ;"}
{"commit_tokens": ["implement", "setDependencyMet"], "add_tokens": "public void setDependencyMet ( boolean met ) { / / not supported on this network }", "del_tokens": ""}
{"commit_tokens": ["Changed", "number", "of", "nodes", "for", "unittest", "to", "two", "instead", "of", "three", "to", "speed", "tests", "up"], "add_tokens": "", "del_tokens": "Hazelcast . newHazelcastInstance ( ) ;"}
{"commit_tokens": ["Fix", "emergency", "call", "when", "in", "launch", "transition", "."], "add_tokens": "reset ( ) ;", "del_tokens": ""}
{"commit_tokens": ["remove", "the", "@", "Override", "for", "jdk5", ".", "0"], "add_tokens": "", "del_tokens": "@ Override"}
{"commit_tokens": ["findbugs", "add", "serialversionuid"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["bug", "fix", "-", "added", "missing", "ATTRIBUTE_CONTEXT_PATH", "attribute"], "add_tokens": "ATTRIBUTE_CONTEXT_PATH ,", "del_tokens": ""}
{"commit_tokens": ["Removing", "Nullable", "as", "property", "is", "set", "in", "creator", "to", "non", "null", "value", "."], "add_tokens": "", "del_tokens": "@ Nullable"}
{"commit_tokens": ["Put", "TemplateServlet", "in", "the", "right", "package"], "add_tokens": "package groovy . servlet ;", "del_tokens": ""}
{"commit_tokens": ["UPDATE", "typo"], "add_tokens": "* Set the Drag View after the view is inflated", "del_tokens": "* Set the Drag Viuew after the view is inflated"}
{"commit_tokens": ["remove", "blank", "line"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["expose", "the", "highlighter", "builder", "Field", "constructor"], "add_tokens": "public Field ( String name ) {", "del_tokens": "private Field ( String name ) {"}
{"commit_tokens": ["Add", "a", "call", "to", "Agent", ".", "shutdown", "(", ")", "at", "the", "end", "of", "clojure", ".", "lang", ".", "Compile", "/", "main", "Refs", "#", "124"], "add_tokens": "Agent . shutdown ( ) ;", "del_tokens": ""}
{"commit_tokens": ["method", "made", "non", "-", "static"], "add_tokens": "protected boolean invalidContainer ( PsiElement tempContainer ) {", "del_tokens": "protected static boolean invalidContainer ( PsiElement tempContainer ) {"}
{"commit_tokens": ["Add", "getBytes", "to", "InputStream", "URL", "and", "File", "(", "patch", "thanks", "to", "jeremi", "Joslin", ")"], "add_tokens": "* @ author jeremi Joslin", "del_tokens": ""}
{"commit_tokens": ["Catch", "errors", "for", "unknown", "object", "types", "."], "add_tokens": "default : throw new RSRuntimeException ( \" Unrecognized object type in file . \" ) ;", "del_tokens": ""}
{"commit_tokens": ["nullify", "jettyServer", "on", "stop", "(", ")", "so", "that", "shared", "test", "base", "-", "classes", "with", "@", "BeforeClass", "DropWizardAppRules", "can", "start", "new", "jetty", "servers"], "add_tokens": "jettyServer = null ;", "del_tokens": ""}
{"commit_tokens": ["Use", "the", "right", "timeout"], "add_tokens": "return downDuration < LONG_PRESS_TIMEOUT ;", "del_tokens": "return downDuration < TAP_TIMEOUT ;"}
{"commit_tokens": ["LPS", "-", "39388", "Remove", "weird", "comment"], "add_tokens": "", "del_tokens": "/ / rollback"}
{"commit_tokens": ["Remove", "setting", "of", "cursor", "size", "as", "we", "ignore", "that", "for", "progress", "tracking", "."], "add_tokens": "", "del_tokens": "_total = _cursor . size ( ) ;"}
{"commit_tokens": ["And", "fixed", "diodes"], "add_tokens": "DIODE ( 356 ) ,", "del_tokens": "DIODE ( 100 ) ,"}
{"commit_tokens": ["Fix", "quality", "flaw"], "add_tokens": "public List < RuleParam > params ( ) {", "del_tokens": "public List < ? extends RuleParam > params ( ) {"}
{"commit_tokens": ["speed", "up", "todo"], "add_tokens": "return ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "removeTarget", "to", "remove", "by", "ID", "instead", "of", "index", "."], "add_tokens": "mTargetIds . remove ( ( Integer ) targetId ) ;", "del_tokens": "mTargetIds . remove ( targetId ) ;"}
{"commit_tokens": ["Fix", "AppBarLayout", "enterAlwaysCollapsed", "with", "inset", "window"], "add_tokens": "return mDownPreScrollRange = Math . max ( 0 , range ) ;", "del_tokens": "return mDownPreScrollRange = Math . max ( 0 , range - getTopInset ( ) ) ;"}
{"commit_tokens": ["Ninja", "fix", "CASSANDRA", "-", "9029"], "add_tokens": "now = 5 ;", "del_tokens": ""}
{"commit_tokens": ["override", "canNavigateToSource", "for", "the", "future", "compatibility"], "add_tokens": "@ Override public boolean canNavigateToSource ( ) { return true ; / / for the future compatibility }", "del_tokens": ""}
{"commit_tokens": ["Incorrect", "attribute", "value", "must", "be", "highlighted", "in", "-", "place", "(", "IDEADEV", "-", "6618", ")"], "add_tokens": "} else { currentElement = PsiTreeUtil . getParentOfType ( currentElement , XmlTag . class , false ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "bug", "in", "ByteBufferSend", "that", "lead", "to", "incorrect", "complete", "(", ")", "method", "."], "add_tokens": "return remaining < = 0 ;", "del_tokens": "return remaining > 0 ;"}
{"commit_tokens": ["disable", "parallel", "compilation", "for", "Kotlin", "modules"], "add_tokens": "public synchronized static Object invokeExecMethod (", "del_tokens": "public static Object invokeExecMethod ("}
{"commit_tokens": ["Fix", "hangouts", "conference", "calling", "regression", "."], "add_tokens": "return mConnectionById . containsKey ( callId ) ;", "del_tokens": "return mConferenceById . containsKey ( callId ) ;"}
{"commit_tokens": ["Remove", "spurious", "blank", "line"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Don", "t", "automatically", "show", "the", "batch", "buttons", "when", "entering", "multiselect", "mode"], "add_tokens": "toggleBatchButtons ( ) ;", "del_tokens": "showBatchButtons ( ) ;"}
{"commit_tokens": ["Eliminate", "production", "of", "useless", "anonymous", "inner", "class", "by", "javac", "."], "add_tokens": "public MillisType ( ) { }", "del_tokens": ""}
{"commit_tokens": ["fix", "a", "javadoc", "bug", "in", "ClientCall"], "add_tokens": "* call . sendMessage ( nextRequest ) ;", "del_tokens": "* call . sendMessage ( makeNextRequest ( ) ) ;"}
{"commit_tokens": ["Make", "method", "private"], "add_tokens": "private void setSettingInternal ( PSetting setting ) throws RemoteException {", "del_tokens": "public void setSettingInternal ( PSetting setting ) throws RemoteException {"}
{"commit_tokens": ["Remove", "tmp", "files", "after", "running", "tests", "-", "accidentially", "broken", "in", "28831ed", "."], "add_tokens": "OS . rmdir ( sTmpDir ) ;", "del_tokens": "/ / OS . rmdir ( sTmpDir ) ;"}
{"commit_tokens": ["X2", "matrix", "needs", "4", "float", "elements", "."], "add_tokens": "mMat = new float [ 4 ] ;", "del_tokens": "mMat = new float [ 2 ] ;"}
{"commit_tokens": ["save", "watches", "per", "configuration", "type", "-", "fixed", "tests"], "add_tokens": "return UnknownConfigurationType . INSTANCE ;", "del_tokens": "return null ; / / To change body of implemented methods use File | Settings | File Templates ."}
{"commit_tokens": ["Committing", "a", "memory", "leak", "fix", "from", "Michael", "Koch", "-", "making", "sure", "that", "players", "are", "properly", "released", "after", "a", "call", "."], "add_tokens": "player . deallocate ( ) ; player . close ( ) ;", "del_tokens": ""}
{"commit_tokens": ["remove", "empty", "line", "on", "top"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Fix", "double", "checked", "locking", "concurrency", "issue", "."], "add_tokens": "private volatile SourceMapConsumerV3 parsedSourceMap = null ;", "del_tokens": "private SourceMapConsumerV3 parsedSourceMap = null ;"}
{"commit_tokens": ["remove", "obsolete", "closes"], "add_tokens": "", "del_tokens": "/ / Close the InputStream and BufferedReader is . close ( ) ; br . close ( ) ;"}
{"commit_tokens": ["Remove", "unused", "import", "in", "IndexedSetTest"], "add_tokens": "", "del_tokens": "import tachyon . master . IndexedSet ;"}
{"commit_tokens": ["show", "actual", "address", "instead", "of", "wft"], "add_tokens": "return address . toString ( ) ;", "del_tokens": "return \" WTF \" ;"}
{"commit_tokens": ["Fix", "for", "RajawaliRenderer", ".", "setCamera", "(", ")", "didn", "t", "update", "the"], "add_tokens": "mCamera . setProjectionMatrix ( mViewportWidth , mViewportHeight ) ;", "del_tokens": ""}
{"commit_tokens": ["always", "use", "the", "max", "score", "across", "the", "shards", "in", "suggest", "response"], "add_tokens": "score = Math . max ( score , otherOption . score ) ;", "del_tokens": ""}
{"commit_tokens": ["Forgot", "to", "start", "the", "thread"], "add_tokens": "} ) . start ( ) ;", "del_tokens": "} ) ;"}
{"commit_tokens": ["Add", "back", "CordovaWebView", ".", "getUrl", "(", ")", "-", "needed", "by", "tests", "&", "does", "make", "sense", "to", "have"], "add_tokens": "String getUrl ( ) ;", "del_tokens": ""}
{"commit_tokens": ["rename", "method"], "add_tokens": "public DBMaker asyncThreadSetDeamon ( ) {", "del_tokens": "public DBMaker asyncThreadDeamonEnable ( ) {"}
{"commit_tokens": ["LPS", "-", "37266", "Source", "formatting", "-", "Just", "remove", "one", "empty", "line"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Fixed", "bug", "for", "updating", "mCurrentPosition"], "add_tokens": "", "del_tokens": "mCurrentPosition + = ret ;"}
{"commit_tokens": ["Also", "closes", "the", "executor", "containing", "the", "connections"], "add_tokens": "executor . shutdownNow ( ) ;", "del_tokens": ""}
{"commit_tokens": ["remove", "unused", "imports"], "add_tokens": "", "del_tokens": "import java . util . Deque ; import java . util . LinkedList ;"}
{"commit_tokens": ["Prevent", "duplicate", "loader", "onLoadFinished", "calls", "on", "config", "change"], "add_tokens": "if ( mHaveData & & ! mRetaining ) {", "del_tokens": "if ( mHaveData ) {"}
{"commit_tokens": ["Observable", ".", "just", "(", "throwable", ")", "dont", "emit", "an", "error", "will", "resubscribe", "again", "."], "add_tokens": "return Observable . error ( throwable ) ;", "del_tokens": "return Observable . just ( throwable ) ;"}
{"commit_tokens": ["Automated", "g4", "rollback", "of", "changelist", "65602026", "."], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["fix", "compile", "error"], "add_tokens": ") ) ;", "del_tokens": ") ;"}
{"commit_tokens": ["optimized", "imports"], "add_tokens": "", "del_tokens": "import org . testng . Assert ;"}
{"commit_tokens": ["remove", "generic", "warning"], "add_tokens": "scopes = Collections . emptySet ( ) ;", "del_tokens": "scopes = Collections . EMPTY_SET ;"}
{"commit_tokens": ["remove", "retina", "hint"], "add_tokens": "", "del_tokens": "static final int ENABLE_RETINA_PIXELS = 10 ; static final int DISABLE_RETINA_PIXELS = - 10 ;"}
{"commit_tokens": ["Removed", "unused", "return", "type", "in", "ExecutorServiceProxy", "."], "add_tokens": "protected void throwNotActiveException ( ) {", "del_tokens": "protected RuntimeException throwNotActiveException ( ) {"}
{"commit_tokens": ["removing", "unimplemented", "method", "activeScanSessionUrls", "from", "ClientApi"], "add_tokens": "", "del_tokens": "public void activeScanSessionUrls ( String regex ) { }"}
{"commit_tokens": ["Set", "mPositionBeforeScroll", "to", "page", "we", "notify", "switched", "to"], "add_tokens": "mPositionBeforeScroll = mSmoothScrollTargetPosition ;", "del_tokens": ""}
{"commit_tokens": ["Pass", "class", "preprocessor", "dir", "as", "an", "absolute", "file"], "add_tokens": "context . getProjectRoot ( ) . resolve ( preprocessJavaClassesInDir ) . toFile ( ) ) {", "del_tokens": "preprocessJavaClassesInDir . toFile ( ) ) {"}
{"commit_tokens": ["Fixed", "memory", "leak", "in", "ExtractEditLayout", "finish", "(", ")"], "add_tokens": "mMenu . close ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Add", "deprecated", "annotation", "to", "Util", ".", "getSize"], "add_tokens": "@ Deprecated", "del_tokens": ""}
{"commit_tokens": ["fix", "bug"], "add_tokens": "pager . setOffscreenPageLimit ( 10 ) ;", "del_tokens": ""}
{"commit_tokens": ["add", "new", "test", "classes", "to", "suite"], "add_tokens": "PyOptimizeImportsTest . class , PySmartEnterTest . class , PyStatementMoverTest . class", "del_tokens": "PyOptimizeImportsTest . class"}
{"commit_tokens": ["revert", "eclipse", "jar", "since", "it", "is", "not", "supported", "by", "our", "version", "of", "jasper"], "add_tokens": "classFile . getBytes ( ) ) ;", "del_tokens": "classFile ) ;"}
{"commit_tokens": ["Remove", "unused", "assignment", "."], "add_tokens": "", "del_tokens": "int threadCountStart = threadCount ( ) ;"}
{"commit_tokens": ["IDEA", "-", "103255", "Hide", "toolwindow", "button", "stays", "hover", "after", "toolwindow", "restoring"], "add_tokens": "private final TimedDeadzone myMouseDeadzone ;", "del_tokens": "private TimedDeadzone myMouseDeadzone ;"}
{"commit_tokens": ["Fix", "NPE", "in", "layoutlib", "."], "add_tokens": "", "del_tokens": "mContext = null ;"}
{"commit_tokens": ["remove", "infinite", "loop"], "add_tokens": "disableRelocations ( Arrays . asList ( endpoints ) ) ;", "del_tokens": "disableRelocations ( endpoints ) ;"}
{"commit_tokens": ["Instruction3rmi", "should", "use", "Format3rmi", "not", "Format3rms"], "add_tokens": "return Format . Format3rmi ;", "del_tokens": "return Format . Format3rms ;"}
{"commit_tokens": ["Fix", "bugsense", "error"], "add_tokens": "if ( ! isFinishing ( ) & & ! userHasDonated ( inventory ) ) {", "del_tokens": "if ( ! userHasDonated ( inventory ) ) {"}
{"commit_tokens": ["invalidate", "indices", "on", "PCE"], "add_tokens": "myChangedFilesCollector . invalidateIndicesForFile ( file , true ) ;", "del_tokens": ""}
{"commit_tokens": ["fixed", "copyright", "date"], "add_tokens": "/ * Copyright ( c ) 2000 - 2009 hamcrest . org", "del_tokens": "/ * Copyright ( c ) 2000 - 2006 hamcrest . org"}
{"commit_tokens": ["Fix", "from", "post", "submit", "review"], "add_tokens": "return ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "bug", "where", "groups", "were", "being", "closed", "twice", "."], "add_tokens": "", "del_tokens": "group . close ( ) ;"}
{"commit_tokens": ["Remove", "outdated", "TODO"], "add_tokens": ". expireStoreSize ( cacheSizeInGB )", "del_tokens": ". expireStoreSize ( cacheSizeInGB ) / / TODO not sure this actually works"}
{"commit_tokens": ["Added", "a", "protected", "method", "to", "retrieve", "the", "indent", "printer", "for", "reuse", "in", "subclasses", "of", "MarkupBuilder"], "add_tokens": "protected IndentPrinter getPrinter ( ) { return this . out ; }", "del_tokens": ""}
{"commit_tokens": ["Update", "default", "settings", "map", "creator"], "add_tokens": "return \" \" ;", "del_tokens": "return getDefaultWorkingDir ( ) . getAbsolutePath ( ) + \" / osmand . lib \" ;"}
{"commit_tokens": ["fixed", "rare", "npe", "after", "race", "condition"], "add_tokens": "this . activity = ( ConversationActivity ) getActivity ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Add", "accessor", "for", "buckets", "scanned", "in", "ScanData"], "add_tokens": "/ * * { @ hide } * / public int getBucketsScanned ( ) { return mBucketsScanned ; }", "del_tokens": ""}
{"commit_tokens": ["JMS", "now", "also", "enlists", "topic", "destinations", "as", "managed", "endpoints", "in", "JMX"], "add_tokens": "@ ManagedAttribute", "del_tokens": ""}
{"commit_tokens": ["apply", "review"], "add_tokens": "@ Deprecated", "del_tokens": ""}
{"commit_tokens": ["Fixed", "bug", "in", "class", "ReplayOutputChannelContext"], "add_tokens": "return false ;", "del_tokens": "return true ;"}
{"commit_tokens": ["remove", "unneeded", "cast"], "add_tokens": "return reflections . getSubTypesOf ( Structure . class ) ;", "del_tokens": "return ( Set < Class < ? extends Structure > > ) reflections . getSubTypesOf ( Structure . class ) ;"}
{"commit_tokens": ["Fix", "Issue", "#", "140"], "add_tokens": "if ( modItems = = null | | engine = = null ) return ; / / already closed", "del_tokens": "if ( modItems = = null ) return ; / / already closed"}
{"commit_tokens": ["Fix", "incorrect", "hashcode", "implementation", "for", "AbstractType"], "add_tokens": "return signature . hashCode ( ) ;", "del_tokens": "return getClass ( ) . hashCode ( ) ;"}
{"commit_tokens": ["remove", "accidental", "System", ".", "out", ".", "println"], "add_tokens": "", "del_tokens": "System . out . println ( \" read settings \" ) ;"}
{"commit_tokens": ["Fix", "descriptor", "leak", "after", "accepting", "connections"], "add_tokens": "s . mFdCreatedInternally = true ;", "del_tokens": ""}
{"commit_tokens": ["default", "constructor", "of", "Sprite", "didn", "t", "set", "the", "color", "."], "add_tokens": "setColor ( 1 , 1 , 1 , 1 ) ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "a", "minor", "issue", "in", "ParticleSystem", ".", "reset", "(", ")", "."], "add_tokens": "this . mParticlesDueToSpawn = 0 ;", "del_tokens": ""}
{"commit_tokens": ["Removed", "@", "Override", "flag", "from", "compareTo", "method", "since", "it", "isn", "t", "in", "the", "superclass", "."], "add_tokens": "", "del_tokens": "@ Override"}
{"commit_tokens": ["Tag", "the", "EventPoller", "with", "comment", "to", "indicate", "its", "experimental", "status", "."], "add_tokens": "/ * * * Experimental poll - based interface for the Disruptor . * /", "del_tokens": ""}
{"commit_tokens": ["FastArray", "doesn", "t", "overwrite", "toString", "(", ")", "method"], "add_tokens": "if ( size ( ) = = 0 ) return \" [ ] \" ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "extra", "spacing"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Fix", "regression"], "add_tokens": "if ( firstSlash < = 0 ) {", "del_tokens": "if ( firstSlash = = 0 ) {"}
{"commit_tokens": ["change", "caption", "to", "version", "control"], "add_tokens": "return \" Version Control \" ;", "del_tokens": "return \" Source Control \" ;"}
{"commit_tokens": ["Fix", "invitation", "request", "from", "persistent", "GC"], "add_tokens": "", "del_tokens": "mOwner = new WifiP2pDevice ( sa ) ;"}
{"commit_tokens": ["changed", "maxRecordStoreEntries", "default", "to", "100k"], "add_tokens": "private Integer maxRecordStoreEntries = 100000 ;", "del_tokens": "private Integer maxRecordStoreEntries = 10000 ;"}
{"commit_tokens": ["Removed", "dead", "code", "from", "sync", "unit", "test"], "add_tokens": "", "del_tokens": "Preferences . clear ( AstridNewSyncMigrator . PREF_SYNC_MIGRATION ) ;"}
{"commit_tokens": ["Recreate", "overlay", "view", "after", "the", "TIS", "crashes"], "add_tokens": "mOverlayViewCreated = false ; mOverlayViewFrame = null ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "a", "bug", "where", "GCalControlSet", "might", "not", "be", "initialized", "correctly"], "add_tokens": "getView ( ) ; / / Hack to force initialized", "del_tokens": ""}
{"commit_tokens": ["Removing", "copy", "and", "paste", "error", "."], "add_tokens": "RUNNING , STOPPING , STOPPED", "del_tokens": "RUNNING , STOPPING , state , STOPPED"}
{"commit_tokens": ["add", "toString", "for", "Fields"], "add_tokens": "@ Override public String toString ( ) { return _fields . toString ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "29244", "Fix", "regression", "&", "test", "errors"], "add_tokens": "returnValue = methodInvocation . proceed ( ) ;", "del_tokens": "throw new SystemException ( nsme ) ;"}
{"commit_tokens": ["LPS", "-", "37448", "Fix", "order", "and", "pagination", "in", "portlet", "processes"], "add_tokens": "groupId , name , taskExecutorClassName , start , end , orderByComparator ) ;", "del_tokens": "groupId , name , taskExecutorClassName ) ;"}
{"commit_tokens": ["LPS", "-", "54838", "Remove", "Journal", "portlet", "key", "from", "portal"], "add_tokens": "", "del_tokens": "public static final String JOURNAL = \" com_liferay_journal_web_portlet_JournalPortlet \" ;"}
{"commit_tokens": ["Delete", "an", "extra", "line"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Fixed", "problem", "with", "wrong", "log", "configuration", "."], "add_tokens": "return FilterReply . NEUTRAL ;", "del_tokens": "return FilterReply . DENY ;"}
{"commit_tokens": ["add", "a", "toString", "method", "for", "flickr", "photo", "objects"], "add_tokens": "@ Override public String toString ( ) { return getPartialUrl ( ) ; }", "del_tokens": ""}
{"commit_tokens": ["Fix", "a", "FindBugs", "warning"], "add_tokens": "public synchronized void recycle ( ) {", "del_tokens": "public void recycle ( ) {"}
{"commit_tokens": ["Fix", "#", "173"], "add_tokens": "messages + = messageCounter ;", "del_tokens": "messages = messageCounter ;"}
{"commit_tokens": ["Added", "missing", "@", "Support", "annotation"], "add_tokens": "@ Support", "del_tokens": ""}
{"commit_tokens": ["Properly", "name", "ignored", "exception", "in", "catch", "block", "."], "add_tokens": "} catch ( ClassNotFoundException ignored ) {", "del_tokens": "} catch ( ClassNotFoundException e ) {"}
{"commit_tokens": ["Add", "missing", "exception", "check"], "add_tokens": "@ Test ( expected = ELException . class )", "del_tokens": "@ Test"}
{"commit_tokens": ["Fix", "option", "parsing", "when", "piping", "data", "in", "via", "stdin"], "add_tokens": "type = typeOverride ;", "del_tokens": ""}
{"commit_tokens": ["LPS", "-", "30588", "Add", "toUnescapedModel", "to", "RepositoryModel"], "add_tokens": "public T toUnescapedModel ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Restore", "native", "synchronization", "functionality", "by", "loading", "proper", "module", "."], "add_tokens": "System . loadLibrary ( \" retrofit - android - native \" ) ;", "del_tokens": "System . loadLibrary ( \" retrofit \" ) ;"}
{"commit_tokens": ["Avoid", "NPE"], "add_tokens": "mSelected . clear ( ) ;", "del_tokens": "mSelected = null ;"}
{"commit_tokens": ["Fix", "Issue", "1827"], "add_tokens": "return saveJSONArray ( json , filename , null ) ;", "del_tokens": "return saveJSONArray ( json , filename ) ;"}
{"commit_tokens": ["Fix", "the", "issue", "of", "new", "call", "failing", "in", "3", "-", "way", "call", "scenario", "."], "add_tokens": "pendingMO = null ;", "del_tokens": ""}
{"commit_tokens": ["Fixed", "crash", "when", "trying", "to", "rotate", "image", "when", "bitmap", "=", "=", "null", "."], "add_tokens": "if ( state instanceof Bundle & & mBitmap ! = null ) {", "del_tokens": "if ( state instanceof Bundle ) {"}
{"commit_tokens": ["Added", "a", "TODO"], "add_tokens": "/ / TODO SF this can be now unit tested", "del_tokens": ""}
{"commit_tokens": ["remove", "useless", "deleteAllAccounts", "in", "initWpDb"], "add_tokens": "", "del_tokens": "wpDB . deleteAllAccounts ( ) ;"}
{"commit_tokens": ["SONAR", "-", "2279", "Fix", "injection"], "add_tokens": "this . eventBus = eventBus ;", "del_tokens": ""}
{"commit_tokens": ["removed", "dead", "code"], "add_tokens": "", "del_tokens": "private static final String TAB = \" \" ;"}
{"commit_tokens": ["add", "a", "comment", "on", "a", "missing", "feature"], "add_tokens": "/ / TODO : this should stored in the model rather than hard coded here", "del_tokens": ""}
{"commit_tokens": ["Fixes", "java", "1", ".", "5", "error", "."], "add_tokens": "", "del_tokens": "@ Override"}
{"commit_tokens": ["Fixed", "no", "action", "button", "with", "resource", "string", "bug"], "add_tokens": "show ( message , 0 , duration ) ;", "del_tokens": "show ( message , duration ) ;"}
{"commit_tokens": ["Revert", "Test", "awaits", "Lucene", "snapshot", "upgrade"], "add_tokens": "", "del_tokens": "@ AwaitsFix ( bugUrl = \" https : / / github . com / elastic / elasticsearch / issues / 16373 \" )"}
{"commit_tokens": ["Insert", "comment", "with", "indentation"], "add_tokens": "defaultSettings . BLOCK_COMMENT_AT_FIRST_COLUMN = false ;", "del_tokens": ""}
{"commit_tokens": ["Remove", "unnecessary", "ws"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Fix", "checkstyle", "error"], "add_tokens": "", "del_tokens": ""}
{"commit_tokens": ["Add", "space", "rather", "tah", "tab"], "add_tokens": "private boolean throwExceptionOnCloned ;", "del_tokens": "private boolean throwExceptionOnCloned ;"}
{"commit_tokens": ["Clear", "fake", "gtasks", "token", "after", "unit", "test"], "add_tokens": "gtasksPreferenceService . setToken ( null ) ;", "del_tokens": ""}
{"commit_tokens": ["HHH", "-", "5598", "sybase", "and", "ms", "sql", "server", "do", "support", "union", "all"], "add_tokens": "public boolean supportsUnionAll ( ) { return true ; }", "del_tokens": ""}
{"commit_tokens": ["Fix", "name", "typo"], "add_tokens": "public synchronized void receivedPushPromise ( ) {", "del_tokens": "public synchronized void receivedPushPromis ( ) {"}
{"commit_tokens": ["Fix", "build", "break", "in", "Bazaar", "history", "parsing"], "add_tokens": "history = new History ( ) ;", "del_tokens": ""}
{"commit_tokens": ["Fix", "collapsible", "action", "views", "."], "add_tokens": "if ( ! hasCollapsibleActionView ( ) ) {", "del_tokens": "if ( hasCollapsibleActionView ( ) ) {"}
{"commit_tokens": ["Using", "version", "0", ".", "4", ".", "0"], "add_tokens": "return \" 0 . 4 . 0 \" ;", "del_tokens": "return \" 0 . 3 . 3 \" ;"}
{"commit_tokens": ["Override", "annotation"], "add_tokens": "@ Override", "del_tokens": ""}
{"commit_tokens": ["Fix", "the", "DroidGap", "activity", "Lifecycle", "broken", "issue"], "add_tokens": "this . activityState = ACTIVITY_EXITING ;", "del_tokens": "this . endActivity ( ) ;"}
{"commit_tokens": ["Make", "getStencilBits", "static"], "add_tokens": "public static int getStencilBits ( )", "del_tokens": "public int getStencilBits ( )"}
{"commit_tokens": ["Fix", "build", "."], "add_tokens": "/ * * * @ hide * /", "del_tokens": ""}
